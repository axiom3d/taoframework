//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tao.OpenGl
{
    using System;
    using System.Runtime.InteropServices;
    using System.Text;
    using GLsizei = System.Int32;
    using GLsizeiptr = System.IntPtr;
    using GLintptr = System.IntPtr;
    using GLenum = System.Int32;
    using GLboolean = System.Int32;
    using GLbitfield = System.Int32;
    using GLvoid = System.Object;
    using GLchar = System.Char;
    using GLbyte = System.Byte;
    using GLubyte = System.Byte;
    using GLshort = System.Int16;
    using GLushort = System.Int16;
    using GLint = System.Int32;
    using GLuint = System.Int32;
    using GLfloat = System.Single;
    using GLclampf = System.Single;
    using GLdouble = System.Double;
    using GLclampd = System.Double;
    using GLstring = System.String;
    using GLsizeiptrARB = System.IntPtr;
    using GLintptrARB = System.IntPtr;
    using GLhandleARB = System.Int32;
    using GLhalfARB = System.Int16;
    using GLhalfNV = System.Int16;
    using GLcharARB = System.Char;
    using GLint64EXT = System.Int64;
    using GLuint64EXT = System.Int64;
    using GLint64 = System.Int64;
    using GLuint64 = System.Int64;
    
    #region GL class
    public partial class Gl
    {
        #pragma warning disable 1591

        #region Private Constants

        #region string GL_NATIVE_LIBRARY
        /// <summary>
        /// Specifies OpenGl's native library archive.
        /// </summary>
        /// <remarks>
        /// Specifies opengl32.dll everywhere; will be mapped via .config for mono.
        /// </remarks>
        internal const string GL_NATIVE_LIBRARY = "opengl32.dll";
        #endregion string GL_NATIVE_LIBRARY

        #endregion Private Constants

        #region OpenGL constants
        public const Int32 GL_1PASS_EXT = 0x80A1;
        public const Int32 GL_1PASS_SGIS = 0x80A1;
        public const Int32 GL_2_BYTES = 0x1407;
        public const Int32 GL_2D = 0x0600;
        public const Int32 GL_2PASS_0_EXT = 0x80A2;
        public const Int32 GL_2PASS_0_SGIS = 0x80A2;
        public const Int32 GL_2PASS_1_EXT = 0x80A3;
        public const Int32 GL_2PASS_1_SGIS = 0x80A3;
        public const Int32 GL_2X_BIT_ATI = 0x00000001;
        public const Int32 GL_3_BYTES = 0x1408;
        public const Int32 GL_3D = 0x0601;
        public const Int32 GL_3D_COLOR = 0x0602;
        public const Int32 GL_3D_COLOR_TEXTURE = 0x0603;
        public const Int32 GL_4_BYTES = 0x1409;
        public const Int32 GL_422_AVERAGE_EXT = 0x80CE;
        public const Int32 GL_422_EXT = 0x80CC;
        public const Int32 GL_422_REV_AVERAGE_EXT = 0x80CF;
        public const Int32 GL_422_REV_EXT = 0x80CD;
        public const Int32 GL_4D_COLOR_TEXTURE = 0x0604;
        public const Int32 GL_4PASS_0_EXT = 0x80A4;
        public const Int32 GL_4PASS_0_SGIS = 0x80A4;
        public const Int32 GL_4PASS_1_EXT = 0x80A5;
        public const Int32 GL_4PASS_1_SGIS = 0x80A5;
        public const Int32 GL_4PASS_2_EXT = 0x80A6;
        public const Int32 GL_4PASS_2_SGIS = 0x80A6;
        public const Int32 GL_4PASS_3_EXT = 0x80A7;
        public const Int32 GL_4PASS_3_SGIS = 0x80A7;
        public const Int32 GL_4X_BIT_ATI = 0x00000002;
        public const Int32 GL_8X_BIT_ATI = 0x00000004;
        public const Int32 GL_ABGR_EXT = 0x8000;
        public const Int32 GL_ACCUM = 0x0100;
        public const Int32 GL_ACCUM_ALPHA_BITS = 0x0D5B;
        public const Int32 GL_ACCUM_BLUE_BITS = 0x0D5A;
        public const Int32 GL_ACCUM_BUFFER_BIT = 0x00000200;
        public const Int32 GL_ACCUM_CLEAR_VALUE = 0x0B80;
        public const Int32 GL_ACCUM_GREEN_BITS = 0x0D59;
        public const Int32 GL_ACCUM_RED_BITS = 0x0D58;
        public const Int32 GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
        public const Int32 GL_ACTIVE_ATTRIBUTES = 0x8B89;
        public const Int32 GL_ACTIVE_STENCIL_FACE_EXT = 0x8911;
        public const Int32 GL_ACTIVE_TEXTURE = 0x84E0;
        public const Int32 GL_ACTIVE_TEXTURE_ARB = 0x84E0;
        public const Int32 GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
        public const Int32 GL_ACTIVE_UNIFORMS = 0x8B86;
        public const Int32 GL_ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82;
        public const Int32 GL_ACTIVE_VARYINGS_NV = 0x8C81;
        public const Int32 GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5;
        public const Int32 GL_ADD = 0x0104;
        public const Int32 GL_ADD_ATI = 0x8963;
        public const Int32 GL_ADD_SIGNED = 0x8574;
        public const Int32 GL_ADD_SIGNED_ARB = 0x8574;
        public const Int32 GL_ADD_SIGNED_EXT = 0x8574;
        public const Int32 GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
        public const Int32 GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
        public const Int32 GL_ALL_ATTRIB_BITS = unchecked((Int32)0xFFFFFFFF);
        public const Int32 GL_ALL_COMPLETED_NV = 0x84F2;
        public const Int32 GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
        public const Int32 GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
        public const Int32 GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
        public const Int32 GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
        public const Int32 GL_ALPHA = 0x1906;
        public const Int32 GL_ALPHA_BIAS = 0x0D1D;
        public const Int32 GL_ALPHA_BITS = 0x0D55;
        public const Int32 GL_ALPHA_FLOAT16_ATI = 0x881C;
        public const Int32 GL_ALPHA_FLOAT32_ATI = 0x8816;
        public const Int32 GL_ALPHA_INTEGER_EXT = 0x8D97;
        public const Int32 GL_ALPHA_MAX_CLAMP_INGR = 0x8567;
        public const Int32 GL_ALPHA_MAX_SGIX = 0x8321;
        public const Int32 GL_ALPHA_MIN_CLAMP_INGR = 0x8563;
        public const Int32 GL_ALPHA_MIN_SGIX = 0x8320;
        public const Int32 GL_ALPHA_SCALE = 0x0D1C;
        public const Int32 GL_ALPHA_TEST = 0x0BC0;
        public const Int32 GL_ALPHA_TEST_FUNC = 0x0BC1;
        public const Int32 GL_ALPHA_TEST_REF = 0x0BC2;
        public const Int32 GL_ALPHA12 = 0x803D;
        public const Int32 GL_ALPHA12_EXT = 0x803D;
        public const Int32 GL_ALPHA16 = 0x803E;
        public const Int32 GL_ALPHA16_EXT = 0x803E;
        public const Int32 GL_ALPHA16F_ARB = 0x881C;
        public const Int32 GL_ALPHA16I_EXT = 0x8D8A;
        public const Int32 GL_ALPHA16UI_EXT = 0x8D78;
        public const Int32 GL_ALPHA32F_ARB = 0x8816;
        public const Int32 GL_ALPHA32I_EXT = 0x8D84;
        public const Int32 GL_ALPHA32UI_EXT = 0x8D72;
        public const Int32 GL_ALPHA4 = 0x803B;
        public const Int32 GL_ALPHA4_EXT = 0x803B;
        public const Int32 GL_ALPHA8 = 0x803C;
        public const Int32 GL_ALPHA8_EXT = 0x803C;
        public const Int32 GL_ALPHA8I_EXT = 0x8D90;
        public const Int32 GL_ALPHA8UI_EXT = 0x8D7E;
        public const Int32 GL_ALWAYS = 0x0207;
        public const Int32 GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
        public const Int32 GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
        public const Int32 GL_AMBIENT = 0x1200;
        public const Int32 GL_AMBIENT_AND_DIFFUSE = 0x1602;
        public const Int32 GL_AND = 0x1501;
        public const Int32 GL_AND_INVERTED = 0x1504;
        public const Int32 GL_AND_REVERSE = 0x1502;
        public const Int32 GL_ARB_imaging = 1;
        public const Int32 GL_ARRAY_BUFFER = 0x8892;
        public const Int32 GL_ARRAY_BUFFER_ARB = 0x8892;
        public const Int32 GL_ARRAY_BUFFER_BINDING = 0x8894;
        public const Int32 GL_ARRAY_BUFFER_BINDING_ARB = 0x8894;
        public const Int32 GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9;
        public const Int32 GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8;
        public const Int32 GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766;
        public const Int32 GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767;
        public const Int32 GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D;
        public const Int32 GL_ASYNC_HISTOGRAM_SGIX = 0x832C;
        public const Int32 GL_ASYNC_MARKER_SGIX = 0x8329;
        public const Int32 GL_ASYNC_READ_PIXELS_SGIX = 0x835E;
        public const Int32 GL_ASYNC_TEX_IMAGE_SGIX = 0x835C;
        public const Int32 GL_ATTACHED_SHADERS = 0x8B85;
        public const Int32 GL_ATTENUATION_EXT = 0x834D;
        public const Int32 GL_ATTRIB_ARRAY_POINTER_NV = 0x8645;
        public const Int32 GL_ATTRIB_ARRAY_SIZE_NV = 0x8623;
        public const Int32 GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624;
        public const Int32 GL_ATTRIB_ARRAY_TYPE_NV = 0x8625;
        public const Int32 GL_ATTRIB_STACK_DEPTH = 0x0BB0;
        public const Int32 GL_AUTO_NORMAL = 0x0D80;
        public const Int32 GL_AUX_BUFFERS = 0x0C00;
        public const Int32 GL_AUX0 = 0x0409;
        public const Int32 GL_AUX1 = 0x040A;
        public const Int32 GL_AUX2 = 0x040B;
        public const Int32 GL_AUX3 = 0x040C;
        public const Int32 GL_AVERAGE_EXT = 0x8335;
        public const Int32 GL_AVERAGE_HP = 0x8160;
        public const Int32 GL_BACK = 0x0405;
        public const Int32 GL_BACK_LEFT = 0x0402;
        public const Int32 GL_BACK_NORMALS_HINT_PGI = 0x1A223;
        public const Int32 GL_BACK_PRIMARY_COLOR_NV = 0x8C77;
        public const Int32 GL_BACK_RIGHT = 0x0403;
        public const Int32 GL_BACK_SECONDARY_COLOR_NV = 0x8C78;
        public const Int32 GL_BGR = 0x80E0;
        public const Int32 GL_BGR_EXT = 0x80E0;
        public const Int32 GL_BGR_INTEGER_EXT = 0x8D9A;
        public const Int32 GL_BGRA = 0x80E1;
        public const Int32 GL_BGRA_EXT = 0x80E1;
        public const Int32 GL_BGRA_INTEGER_EXT = 0x8D9B;
        public const Int32 GL_BIAS_BIT_ATI = 0x00000008;
        public const Int32 GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541;
        public const Int32 GL_BINORMAL_ARRAY_EXT = 0x843A;
        public const Int32 GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443;
        public const Int32 GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441;
        public const Int32 GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440;
        public const Int32 GL_BITMAP = 0x1A00;
        public const Int32 GL_BITMAP_TOKEN = 0x0704;
        public const Int32 GL_BLEND = 0x0BE2;
        public const Int32 GL_BLEND_COLOR = 0x8005;
        public const Int32 GL_BLEND_COLOR_EXT = 0x8005;
        public const Int32 GL_BLEND_DST = 0x0BE0;
        public const Int32 GL_BLEND_DST_ALPHA = 0x80CA;
        public const Int32 GL_BLEND_DST_ALPHA_EXT = 0x80CA;
        public const Int32 GL_BLEND_DST_RGB = 0x80C8;
        public const Int32 GL_BLEND_DST_RGB_EXT = 0x80C8;
        public const Int32 GL_BLEND_EQUATION = 0x8009;
        public const Int32 GL_BLEND_EQUATION_ALPHA = 0x883D;
        public const Int32 GL_BLEND_EQUATION_ALPHA_EXT = 0x883D;
        public const Int32 GL_BLEND_EQUATION_EXT = 0x8009;
        public const Int32 GL_BLEND_EQUATION_RGB = GL_BLEND_EQUATION;
        public const Int32 GL_BLEND_EQUATION_RGB_EXT = GL_BLEND_EQUATION;
        public const Int32 GL_BLEND_SRC = 0x0BE1;
        public const Int32 GL_BLEND_SRC_ALPHA = 0x80CB;
        public const Int32 GL_BLEND_SRC_ALPHA_EXT = 0x80CB;
        public const Int32 GL_BLEND_SRC_RGB = 0x80C9;
        public const Int32 GL_BLEND_SRC_RGB_EXT = 0x80C9;
        public const Int32 GL_BLUE = 0x1905;
        public const Int32 GL_BLUE_BIAS = 0x0D1B;
        public const Int32 GL_BLUE_BIT_ATI = 0x00000004;
        public const Int32 GL_BLUE_BITS = 0x0D54;
        public const Int32 GL_BLUE_INTEGER_EXT = 0x8D96;
        public const Int32 GL_BLUE_MAX_CLAMP_INGR = 0x8566;
        public const Int32 GL_BLUE_MIN_CLAMP_INGR = 0x8562;
        public const Int32 GL_BLUE_SCALE = 0x0D1A;
        public const Int32 GL_BOOL = 0x8B56;
        public const Int32 GL_BOOL_ARB = 0x8B56;
        public const Int32 GL_BOOL_VEC2 = 0x8B57;
        public const Int32 GL_BOOL_VEC2_ARB = 0x8B57;
        public const Int32 GL_BOOL_VEC3 = 0x8B58;
        public const Int32 GL_BOOL_VEC3_ARB = 0x8B58;
        public const Int32 GL_BOOL_VEC4 = 0x8B59;
        public const Int32 GL_BOOL_VEC4_ARB = 0x8B59;
        public const Int32 GL_BUFFER_ACCESS = 0x88BB;
        public const Int32 GL_BUFFER_ACCESS_ARB = 0x88BB;
        public const Int32 GL_BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13;
        public const Int32 GL_BUFFER_MAP_POINTER = 0x88BD;
        public const Int32 GL_BUFFER_MAP_POINTER_ARB = 0x88BD;
        public const Int32 GL_BUFFER_MAPPED = 0x88BC;
        public const Int32 GL_BUFFER_MAPPED_ARB = 0x88BC;
        public const Int32 GL_BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12;
        public const Int32 GL_BUFFER_SIZE = 0x8764;
        public const Int32 GL_BUFFER_SIZE_ARB = 0x8764;
        public const Int32 GL_BUFFER_USAGE = 0x8765;
        public const Int32 GL_BUFFER_USAGE_ARB = 0x8765;
        public const Int32 GL_BUMP_ENVMAP_ATI = 0x877B;
        public const Int32 GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777;
        public const Int32 GL_BUMP_ROT_MATRIX_ATI = 0x8775;
        public const Int32 GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776;
        public const Int32 GL_BUMP_TARGET_ATI = 0x877C;
        public const Int32 GL_BUMP_TEX_UNITS_ATI = 0x8778;
        public const Int32 GL_BYTE = 0x1400;
        public const Int32 GL_C3F_V3F = 0x2A24;
        public const Int32 GL_C4F_N3F_V3F = 0x2A26;
        public const Int32 GL_C4UB_V2F = 0x2A22;
        public const Int32 GL_C4UB_V3F = 0x2A23;
        public const Int32 GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183;
        public const Int32 GL_CCW = 0x0901;
        public const Int32 GL_CLAMP = 0x2900;
        public const Int32 GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B;
        public const Int32 GL_CLAMP_READ_COLOR_ARB = 0x891C;
        public const Int32 GL_CLAMP_TO_BORDER = 0x812D;
        public const Int32 GL_CLAMP_TO_BORDER_ARB = 0x812D;
        public const Int32 GL_CLAMP_TO_BORDER_SGIS = 0x812D;
        public const Int32 GL_CLAMP_TO_EDGE = 0x812F;
        public const Int32 GL_CLAMP_TO_EDGE_SGIS = 0x812F;
        public const Int32 GL_CLAMP_VERTEX_COLOR_ARB = 0x891A;
        public const Int32 GL_CLEAR = 0x1500;
        public const Int32 GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
        public const Int32 GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1;
        public const Int32 GL_CLIENT_ALL_ATTRIB_BITS = unchecked((Int32)0xFFFFFFFF);
        public const Int32 GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
        public const Int32 GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
        public const Int32 GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
        public const Int32 GL_CLIP_DISTANCE_NV = 0x8C7A;
        public const Int32 GL_CLIP_FAR_HINT_PGI = 0x1A221;
        public const Int32 GL_CLIP_NEAR_HINT_PGI = 0x1A220;
        public const Int32 GL_CLIP_PLANE0 = 0x3000;
        public const Int32 GL_CLIP_PLANE1 = 0x3001;
        public const Int32 GL_CLIP_PLANE2 = 0x3002;
        public const Int32 GL_CLIP_PLANE3 = 0x3003;
        public const Int32 GL_CLIP_PLANE4 = 0x3004;
        public const Int32 GL_CLIP_PLANE5 = 0x3005;
        public const Int32 GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
        public const Int32 GL_CMYK_EXT = 0x800C;
        public const Int32 GL_CMYKA_EXT = 0x800D;
        public const Int32 GL_CND_ATI = 0x896A;
        public const Int32 GL_CND0_ATI = 0x896B;
        public const Int32 GL_COEFF = 0x0A00;
        public const Int32 GL_COLOR = 0x1800;
        public const Int32 GL_COLOR_ALPHA_PAIRING_ATI = 0x8975;
        public const Int32 GL_COLOR_ARRAY = 0x8076;
        public const Int32 GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
        public const Int32 GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898;
        public const Int32 GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
        public const Int32 GL_COLOR_ARRAY_EXT = 0x8076;
        public const Int32 GL_COLOR_ARRAY_LIST_IBM = 103072;
        public const Int32 GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082;
        public const Int32 GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7;
        public const Int32 GL_COLOR_ARRAY_POINTER = 0x8090;
        public const Int32 GL_COLOR_ARRAY_POINTER_EXT = 0x8090;
        public const Int32 GL_COLOR_ARRAY_SIZE = 0x8081;
        public const Int32 GL_COLOR_ARRAY_SIZE_EXT = 0x8081;
        public const Int32 GL_COLOR_ARRAY_STRIDE = 0x8083;
        public const Int32 GL_COLOR_ARRAY_STRIDE_EXT = 0x8083;
        public const Int32 GL_COLOR_ARRAY_TYPE = 0x8082;
        public const Int32 GL_COLOR_ARRAY_TYPE_EXT = 0x8082;
        public const Int32 GL_COLOR_ATTACHMENT0_EXT = 0x8CE0;
        public const Int32 GL_COLOR_ATTACHMENT1_EXT = 0x8CE1;
        public const Int32 GL_COLOR_ATTACHMENT10_EXT = 0x8CEA;
        public const Int32 GL_COLOR_ATTACHMENT11_EXT = 0x8CEB;
        public const Int32 GL_COLOR_ATTACHMENT12_EXT = 0x8CEC;
        public const Int32 GL_COLOR_ATTACHMENT13_EXT = 0x8CED;
        public const Int32 GL_COLOR_ATTACHMENT14_EXT = 0x8CEE;
        public const Int32 GL_COLOR_ATTACHMENT15_EXT = 0x8CEF;
        public const Int32 GL_COLOR_ATTACHMENT2_EXT = 0x8CE2;
        public const Int32 GL_COLOR_ATTACHMENT3_EXT = 0x8CE3;
        public const Int32 GL_COLOR_ATTACHMENT4_EXT = 0x8CE4;
        public const Int32 GL_COLOR_ATTACHMENT5_EXT = 0x8CE5;
        public const Int32 GL_COLOR_ATTACHMENT6_EXT = 0x8CE6;
        public const Int32 GL_COLOR_ATTACHMENT7_EXT = 0x8CE7;
        public const Int32 GL_COLOR_ATTACHMENT8_EXT = 0x8CE8;
        public const Int32 GL_COLOR_ATTACHMENT9_EXT = 0x8CE9;
        public const Int32 GL_COLOR_BUFFER_BIT = 0x00004000;
        public const Int32 GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835;
        public const Int32 GL_COLOR_CLEAR_VALUE = 0x0C22;
        public const Int32 GL_COLOR_INDEX = 0x1900;
        public const Int32 GL_COLOR_INDEX1_EXT = 0x80E2;
        public const Int32 GL_COLOR_INDEX12_EXT = 0x80E6;
        public const Int32 GL_COLOR_INDEX16_EXT = 0x80E7;
        public const Int32 GL_COLOR_INDEX2_EXT = 0x80E3;
        public const Int32 GL_COLOR_INDEX4_EXT = 0x80E4;
        public const Int32 GL_COLOR_INDEX8_EXT = 0x80E5;
        public const Int32 GL_COLOR_INDEXES = 0x1603;
        public const Int32 GL_COLOR_LOGIC_OP = 0x0BF2;
        public const Int32 GL_COLOR_MATERIAL = 0x0B57;
        public const Int32 GL_COLOR_MATERIAL_FACE = 0x0B55;
        public const Int32 GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
        public const Int32 GL_COLOR_MATRIX = 0x80B1;
        public const Int32 GL_COLOR_MATRIX_SGI = 0x80B1;
        public const Int32 GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2;
        public const Int32 GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
        public const Int32 GL_COLOR_SUM = 0x8458;
        public const Int32 GL_COLOR_SUM_ARB = 0x8458;
        public const Int32 GL_COLOR_SUM_CLAMP_NV = 0x854F;
        public const Int32 GL_COLOR_SUM_EXT = 0x8458;
        public const Int32 GL_COLOR_TABLE = 0x80D0;
        public const Int32 GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD;
        public const Int32 GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD;
        public const Int32 GL_COLOR_TABLE_BIAS = 0x80D7;
        public const Int32 GL_COLOR_TABLE_BIAS_SGI = 0x80D7;
        public const Int32 GL_COLOR_TABLE_BLUE_SIZE = 0x80DC;
        public const Int32 GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC;
        public const Int32 GL_COLOR_TABLE_FORMAT = 0x80D8;
        public const Int32 GL_COLOR_TABLE_FORMAT_SGI = 0x80D8;
        public const Int32 GL_COLOR_TABLE_GREEN_SIZE = 0x80DB;
        public const Int32 GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB;
        public const Int32 GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF;
        public const Int32 GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF;
        public const Int32 GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE;
        public const Int32 GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE;
        public const Int32 GL_COLOR_TABLE_RED_SIZE = 0x80DA;
        public const Int32 GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DA;
        public const Int32 GL_COLOR_TABLE_SCALE = 0x80D6;
        public const Int32 GL_COLOR_TABLE_SCALE_SGI = 0x80D6;
        public const Int32 GL_COLOR_TABLE_SGI = 0x80D0;
        public const Int32 GL_COLOR_TABLE_WIDTH = 0x80D9;
        public const Int32 GL_COLOR_TABLE_WIDTH_SGI = 0x80D9;
        public const Int32 GL_COLOR_WRITEMASK = 0x0C23;
        public const Int32 GL_COLOR3_BIT_PGI = 0x00010000;
        public const Int32 GL_COLOR4_BIT_PGI = 0x00020000;
        public const Int32 GL_COMBINE = 0x8570;
        public const Int32 GL_COMBINE_ALPHA = 0x8572;
        public const Int32 GL_COMBINE_ALPHA_ARB = 0x8572;
        public const Int32 GL_COMBINE_ALPHA_EXT = 0x8572;
        public const Int32 GL_COMBINE_ARB = 0x8570;
        public const Int32 GL_COMBINE_EXT = 0x8570;
        public const Int32 GL_COMBINE_RGB = 0x8571;
        public const Int32 GL_COMBINE_RGB_ARB = 0x8571;
        public const Int32 GL_COMBINE_RGB_EXT = 0x8571;
        public const Int32 GL_COMBINE4_NV = 0x8503;
        public const Int32 GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545;
        public const Int32 GL_COMBINER_AB_OUTPUT_NV = 0x854A;
        public const Int32 GL_COMBINER_BIAS_NV = 0x8549;
        public const Int32 GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546;
        public const Int32 GL_COMBINER_CD_OUTPUT_NV = 0x854B;
        public const Int32 GL_COMBINER_COMPONENT_USAGE_NV = 0x8544;
        public const Int32 GL_COMBINER_INPUT_NV = 0x8542;
        public const Int32 GL_COMBINER_MAPPING_NV = 0x8543;
        public const Int32 GL_COMBINER_MUX_SUM_NV = 0x8547;
        public const Int32 GL_COMBINER_SCALE_NV = 0x8548;
        public const Int32 GL_COMBINER_SUM_OUTPUT_NV = 0x854C;
        public const Int32 GL_COMBINER0_NV = 0x8550;
        public const Int32 GL_COMBINER1_NV = 0x8551;
        public const Int32 GL_COMBINER2_NV = 0x8552;
        public const Int32 GL_COMBINER3_NV = 0x8553;
        public const Int32 GL_COMBINER4_NV = 0x8554;
        public const Int32 GL_COMBINER5_NV = 0x8555;
        public const Int32 GL_COMBINER6_NV = 0x8556;
        public const Int32 GL_COMBINER7_NV = 0x8557;
        public const Int32 GL_COMP_BIT_ATI = 0x00000002;
        public const Int32 GL_COMPARE_R_TO_TEXTURE = 0x884E;
        public const Int32 GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E;
        public const Int32 GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E;
        public const Int32 GL_COMPILE = 0x1300;
        public const Int32 GL_COMPILE_AND_EXECUTE = 0x1301;
        public const Int32 GL_COMPILE_STATUS = 0x8B81;
        public const Int32 GL_COMPRESSED_ALPHA = 0x84E9;
        public const Int32 GL_COMPRESSED_ALPHA_ARB = 0x84E9;
        public const Int32 GL_COMPRESSED_INTENSITY = 0x84EC;
        public const Int32 GL_COMPRESSED_INTENSITY_ARB = 0x84EC;
        public const Int32 GL_COMPRESSED_LUMINANCE = 0x84EA;
        public const Int32 GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
        public const Int32 GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB;
        public const Int32 GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72;
        public const Int32 GL_COMPRESSED_LUMINANCE_ARB = 0x84EA;
        public const Int32 GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70;
        public const Int32 GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD;
        public const Int32 GL_COMPRESSED_RED_RGTC1_EXT = 0x8DBB;
        public const Int32 GL_COMPRESSED_RGB = 0x84ED;
        public const Int32 GL_COMPRESSED_RGB_ARB = 0x84ED;
        public const Int32 GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0;
        public const Int32 GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
        public const Int32 GL_COMPRESSED_RGBA = 0x84EE;
        public const Int32 GL_COMPRESSED_RGBA_ARB = 0x84EE;
        public const Int32 GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1;
        public const Int32 GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
        public const Int32 GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
        public const Int32 GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
        public const Int32 GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73;
        public const Int32 GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71;
        public const Int32 GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE;
        public const Int32 GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC;
        public const Int32 GL_COMPRESSED_SLUMINANCE = 0x8C4A;
        public const Int32 GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
        public const Int32 GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B;
        public const Int32 GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4A;
        public const Int32 GL_COMPRESSED_SRGB = 0x8C48;
        public const Int32 GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
        public const Int32 GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49;
        public const Int32 GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D;
        public const Int32 GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E;
        public const Int32 GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F;
        public const Int32 GL_COMPRESSED_SRGB_EXT = 0x8C48;
        public const Int32 GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C;
        public const Int32 GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
        public const Int32 GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3;
        public const Int32 GL_CON_0_ATI = 0x8941;
        public const Int32 GL_CON_1_ATI = 0x8942;
        public const Int32 GL_CON_10_ATI = 0x894B;
        public const Int32 GL_CON_11_ATI = 0x894C;
        public const Int32 GL_CON_12_ATI = 0x894D;
        public const Int32 GL_CON_13_ATI = 0x894E;
        public const Int32 GL_CON_14_ATI = 0x894F;
        public const Int32 GL_CON_15_ATI = 0x8950;
        public const Int32 GL_CON_16_ATI = 0x8951;
        public const Int32 GL_CON_17_ATI = 0x8952;
        public const Int32 GL_CON_18_ATI = 0x8953;
        public const Int32 GL_CON_19_ATI = 0x8954;
        public const Int32 GL_CON_2_ATI = 0x8943;
        public const Int32 GL_CON_20_ATI = 0x8955;
        public const Int32 GL_CON_21_ATI = 0x8956;
        public const Int32 GL_CON_22_ATI = 0x8957;
        public const Int32 GL_CON_23_ATI = 0x8958;
        public const Int32 GL_CON_24_ATI = 0x8959;
        public const Int32 GL_CON_25_ATI = 0x895A;
        public const Int32 GL_CON_26_ATI = 0x895B;
        public const Int32 GL_CON_27_ATI = 0x895C;
        public const Int32 GL_CON_28_ATI = 0x895D;
        public const Int32 GL_CON_29_ATI = 0x895E;
        public const Int32 GL_CON_3_ATI = 0x8944;
        public const Int32 GL_CON_30_ATI = 0x895F;
        public const Int32 GL_CON_31_ATI = 0x8960;
        public const Int32 GL_CON_4_ATI = 0x8945;
        public const Int32 GL_CON_5_ATI = 0x8946;
        public const Int32 GL_CON_6_ATI = 0x8947;
        public const Int32 GL_CON_7_ATI = 0x8948;
        public const Int32 GL_CON_8_ATI = 0x8949;
        public const Int32 GL_CON_9_ATI = 0x894A;
        public const Int32 GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
        public const Int32 GL_CONST_EYE_NV = 0x86E5;
        public const Int32 GL_CONSTANT = 0x8576;
        public const Int32 GL_CONSTANT_ALPHA = 0x8003;
        public const Int32 GL_CONSTANT_ALPHA_EXT = 0x8003;
        public const Int32 GL_CONSTANT_ARB = 0x8576;
        public const Int32 GL_CONSTANT_ATTENUATION = 0x1207;
        public const Int32 GL_CONSTANT_BORDER = 0x8151;
        public const Int32 GL_CONSTANT_BORDER_HP = 0x8151;
        public const Int32 GL_CONSTANT_COLOR = 0x8001;
        public const Int32 GL_CONSTANT_COLOR_EXT = 0x8001;
        public const Int32 GL_CONSTANT_COLOR0_NV = 0x852A;
        public const Int32 GL_CONSTANT_COLOR1_NV = 0x852B;
        public const Int32 GL_CONSTANT_EXT = 0x8576;
        public const Int32 GL_CONVOLUTION_1D = 0x8010;
        public const Int32 GL_CONVOLUTION_1D_EXT = 0x8010;
        public const Int32 GL_CONVOLUTION_2D = 0x8011;
        public const Int32 GL_CONVOLUTION_2D_EXT = 0x8011;
        public const Int32 GL_CONVOLUTION_BORDER_COLOR = 0x8154;
        public const Int32 GL_CONVOLUTION_BORDER_COLOR_HP = 0x8154;
        public const Int32 GL_CONVOLUTION_BORDER_MODE = 0x8013;
        public const Int32 GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013;
        public const Int32 GL_CONVOLUTION_FILTER_BIAS = 0x8015;
        public const Int32 GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015;
        public const Int32 GL_CONVOLUTION_FILTER_SCALE = 0x8014;
        public const Int32 GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014;
        public const Int32 GL_CONVOLUTION_FORMAT = 0x8017;
        public const Int32 GL_CONVOLUTION_FORMAT_EXT = 0x8017;
        public const Int32 GL_CONVOLUTION_HEIGHT = 0x8019;
        public const Int32 GL_CONVOLUTION_HEIGHT_EXT = 0x8019;
        public const Int32 GL_CONVOLUTION_HINT_SGIX = 0x8316;
        public const Int32 GL_CONVOLUTION_WIDTH = 0x8018;
        public const Int32 GL_CONVOLUTION_WIDTH_EXT = 0x8018;
        public const Int32 GL_COORD_REPLACE = 0x8862;
        public const Int32 GL_COORD_REPLACE_ARB = 0x8862;
        public const Int32 GL_COORD_REPLACE_NV = 0x8862;
        public const Int32 GL_COPY = 0x1503;
        public const Int32 GL_COPY_INVERTED = 0x150C;
        public const Int32 GL_COPY_PIXEL_TOKEN = 0x0706;
        public const Int32 GL_CUBIC_EXT = 0x8334;
        public const Int32 GL_CUBIC_HP = 0x815F;
        public const Int32 GL_CULL_FACE = 0x0B44;
        public const Int32 GL_CULL_FACE_MODE = 0x0B45;
        public const Int32 GL_CULL_FRAGMENT_NV = 0x86E7;
        public const Int32 GL_CULL_MODES_NV = 0x86E0;
        public const Int32 GL_CULL_VERTEX_EXT = 0x81AA;
        public const Int32 GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB;
        public const Int32 GL_CULL_VERTEX_IBM = 103050;
        public const Int32 GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC;
        public const Int32 GL_CURRENT_ATTRIB_NV = 0x8626;
        public const Int32 GL_CURRENT_BINORMAL_EXT = 0x843C;
        public const Int32 GL_CURRENT_BIT = 0x00000001;
        public const Int32 GL_CURRENT_COLOR = 0x0B00;
        public const Int32 GL_CURRENT_FOG_COORD = GL_CURRENT_FOG_COORDINATE;
        public const Int32 GL_CURRENT_FOG_COORDINATE = 0x8453;
        public const Int32 GL_CURRENT_FOG_COORDINATE_EXT = 0x8453;
        public const Int32 GL_CURRENT_INDEX = 0x0B01;
        public const Int32 GL_CURRENT_MATRIX_ARB = 0x8641;
        public const Int32 GL_CURRENT_MATRIX_INDEX_ARB = 0x8845;
        public const Int32 GL_CURRENT_MATRIX_NV = 0x8641;
        public const Int32 GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640;
        public const Int32 GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640;
        public const Int32 GL_CURRENT_NORMAL = 0x0B02;
        public const Int32 GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865;
        public const Int32 GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843;
        public const Int32 GL_CURRENT_PROGRAM = 0x8B8D;
        public const Int32 GL_CURRENT_QUERY = 0x8865;
        public const Int32 GL_CURRENT_QUERY_ARB = 0x8865;
        public const Int32 GL_CURRENT_RASTER_COLOR = 0x0B04;
        public const Int32 GL_CURRENT_RASTER_DISTANCE = 0x0B09;
        public const Int32 GL_CURRENT_RASTER_INDEX = 0x0B05;
        public const Int32 GL_CURRENT_RASTER_NORMAL_SGIX = 0x8406;
        public const Int32 GL_CURRENT_RASTER_POSITION = 0x0B07;
        public const Int32 GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
        public const Int32 GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
        public const Int32 GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
        public const Int32 GL_CURRENT_SECONDARY_COLOR = 0x8459;
        public const Int32 GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459;
        public const Int32 GL_CURRENT_TANGENT_EXT = 0x843B;
        public const Int32 GL_CURRENT_TEXTURE_COORDS = 0x0B03;
        public const Int32 GL_CURRENT_VERTEX_ATTRIB = 0x8626;
        public const Int32 GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626;
        public const Int32 GL_CURRENT_VERTEX_EXT = 0x87E2;
        public const Int32 GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B;
        public const Int32 GL_CURRENT_WEIGHT_ARB = 0x86A8;
        public const Int32 GL_CW = 0x0900;
        public const Int32 GL_DECAL = 0x2101;
        public const Int32 GL_DECR = 0x1E03;
        public const Int32 GL_DECR_WRAP = 0x8508;
        public const Int32 GL_DECR_WRAP_EXT = 0x8508;
        public const Int32 GL_DEFORMATIONS_MASK_SGIX = 0x8196;
        public const Int32 GL_DELETE_STATUS = 0x8B80;
        public const Int32 GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9;
        public const Int32 GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA;
        public const Int32 GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858;
        public const Int32 GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859;
        public const Int32 GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A;
        public const Int32 GL_DEPTH = 0x1801;
        public const Int32 GL_DEPTH_ATTACHMENT_EXT = 0x8D00;
        public const Int32 GL_DEPTH_BIAS = 0x0D1F;
        public const Int32 GL_DEPTH_BITS = 0x0D56;
        public const Int32 GL_DEPTH_BOUNDS_EXT = 0x8891;
        public const Int32 GL_DEPTH_BOUNDS_TEST_EXT = 0x8890;
        public const Int32 GL_DEPTH_BUFFER_BIT = 0x00000100;
        public const Int32 GL_DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF;
        public const Int32 GL_DEPTH_CLAMP_NV = 0x864F;
        public const Int32 GL_DEPTH_CLEAR_VALUE = 0x0B73;
        public const Int32 GL_DEPTH_COMPONENT = 0x1902;
        public const Int32 GL_DEPTH_COMPONENT16 = 0x81A5;
        public const Int32 GL_DEPTH_COMPONENT16_ARB = 0x81A5;
        public const Int32 GL_DEPTH_COMPONENT16_SGIX = 0x81A5;
        public const Int32 GL_DEPTH_COMPONENT24 = 0x81A6;
        public const Int32 GL_DEPTH_COMPONENT24_ARB = 0x81A6;
        public const Int32 GL_DEPTH_COMPONENT24_SGIX = 0x81A6;
        public const Int32 GL_DEPTH_COMPONENT32 = 0x81A7;
        public const Int32 GL_DEPTH_COMPONENT32_ARB = 0x81A7;
        public const Int32 GL_DEPTH_COMPONENT32_SGIX = 0x81A7;
        public const Int32 GL_DEPTH_COMPONENT32F_NV = 0x8DAB;
        public const Int32 GL_DEPTH_FUNC = 0x0B74;
        public const Int32 GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = 0x8311;
        public const Int32 GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = 0x8312;
        public const Int32 GL_DEPTH_PASS_INSTRUMENT_SGIX = 0x8310;
        public const Int32 GL_DEPTH_RANGE = 0x0B70;
        public const Int32 GL_DEPTH_SCALE = 0x0D1E;
        public const Int32 GL_DEPTH_STENCIL_EXT = 0x84F9;
        public const Int32 GL_DEPTH_STENCIL_NV = 0x84F9;
        public const Int32 GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F;
        public const Int32 GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E;
        public const Int32 GL_DEPTH_TEST = 0x0B71;
        public const Int32 GL_DEPTH_TEXTURE_MODE = 0x884B;
        public const Int32 GL_DEPTH_TEXTURE_MODE_ARB = 0x884B;
        public const Int32 GL_DEPTH_WRITEMASK = 0x0B72;
        public const Int32 GL_DEPTH24_STENCIL8_EXT = 0x88F0;
        public const Int32 GL_DEPTH32F_STENCIL8_NV = 0x8DAC;
        public const Int32 GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096;
        public const Int32 GL_DETAIL_TEXTURE_2D_SGIS = 0x8095;
        public const Int32 GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C;
        public const Int32 GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A;
        public const Int32 GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B;
        public const Int32 GL_DIFFUSE = 0x1201;
        public const Int32 GL_DISCARD_ATI = 0x8763;
        public const Int32 GL_DISCARD_NV = 0x8530;
        public const Int32 GL_DISTANCE_ATTENUATION_EXT = 0x8129;
        public const Int32 GL_DISTANCE_ATTENUATION_SGIS = 0x8129;
        public const Int32 GL_DITHER = 0x0BD0;
        public const Int32 GL_DOMAIN = 0x0A02;
        public const Int32 GL_DONT_CARE = 0x1100;
        public const Int32 GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D;
        public const Int32 GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3;
        public const Int32 GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED;
        public const Int32 GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1;
        public const Int32 GL_DOT_PRODUCT_NV = 0x86EC;
        public const Int32 GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B;
        public const Int32 GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2;
        public const Int32 GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C;
        public const Int32 GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE;
        public const Int32 GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF;
        public const Int32 GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0;
        public const Int32 GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E;
        public const Int32 GL_DOT2_ADD_ATI = 0x896C;
        public const Int32 GL_DOT3_ATI = 0x8966;
        public const Int32 GL_DOT3_RGB = 0x86AE;
        public const Int32 GL_DOT3_RGB_ARB = 0x86AE;
        public const Int32 GL_DOT3_RGB_EXT = 0x8740;
        public const Int32 GL_DOT3_RGBA = 0x86AF;
        public const Int32 GL_DOT3_RGBA_ARB = 0x86AF;
        public const Int32 GL_DOT3_RGBA_EXT = 0x8741;
        public const Int32 GL_DOT4_ATI = 0x8967;
        public const Int32 GL_DOUBLE = 0x140A;
        public const Int32 GL_DOUBLE_EXT = 0x140A;
        public const Int32 GL_DOUBLEBUFFER = 0x0C32;
        public const Int32 GL_DRAW_BUFFER = 0x0C01;
        public const Int32 GL_DRAW_BUFFER0 = 0x8825;
        public const Int32 GL_DRAW_BUFFER0_ARB = 0x8825;
        public const Int32 GL_DRAW_BUFFER0_ATI = 0x8825;
        public const Int32 GL_DRAW_BUFFER1 = 0x8826;
        public const Int32 GL_DRAW_BUFFER1_ARB = 0x8826;
        public const Int32 GL_DRAW_BUFFER1_ATI = 0x8826;
        public const Int32 GL_DRAW_BUFFER10 = 0x882F;
        public const Int32 GL_DRAW_BUFFER10_ARB = 0x882F;
        public const Int32 GL_DRAW_BUFFER10_ATI = 0x882F;
        public const Int32 GL_DRAW_BUFFER11 = 0x8830;
        public const Int32 GL_DRAW_BUFFER11_ARB = 0x8830;
        public const Int32 GL_DRAW_BUFFER11_ATI = 0x8830;
        public const Int32 GL_DRAW_BUFFER12 = 0x8831;
        public const Int32 GL_DRAW_BUFFER12_ARB = 0x8831;
        public const Int32 GL_DRAW_BUFFER12_ATI = 0x8831;
        public const Int32 GL_DRAW_BUFFER13 = 0x8832;
        public const Int32 GL_DRAW_BUFFER13_ARB = 0x8832;
        public const Int32 GL_DRAW_BUFFER13_ATI = 0x8832;
        public const Int32 GL_DRAW_BUFFER14 = 0x8833;
        public const Int32 GL_DRAW_BUFFER14_ARB = 0x8833;
        public const Int32 GL_DRAW_BUFFER14_ATI = 0x8833;
        public const Int32 GL_DRAW_BUFFER15 = 0x8834;
        public const Int32 GL_DRAW_BUFFER15_ARB = 0x8834;
        public const Int32 GL_DRAW_BUFFER15_ATI = 0x8834;
        public const Int32 GL_DRAW_BUFFER2 = 0x8827;
        public const Int32 GL_DRAW_BUFFER2_ARB = 0x8827;
        public const Int32 GL_DRAW_BUFFER2_ATI = 0x8827;
        public const Int32 GL_DRAW_BUFFER3 = 0x8828;
        public const Int32 GL_DRAW_BUFFER3_ARB = 0x8828;
        public const Int32 GL_DRAW_BUFFER3_ATI = 0x8828;
        public const Int32 GL_DRAW_BUFFER4 = 0x8829;
        public const Int32 GL_DRAW_BUFFER4_ARB = 0x8829;
        public const Int32 GL_DRAW_BUFFER4_ATI = 0x8829;
        public const Int32 GL_DRAW_BUFFER5 = 0x882A;
        public const Int32 GL_DRAW_BUFFER5_ARB = 0x882A;
        public const Int32 GL_DRAW_BUFFER5_ATI = 0x882A;
        public const Int32 GL_DRAW_BUFFER6 = 0x882B;
        public const Int32 GL_DRAW_BUFFER6_ARB = 0x882B;
        public const Int32 GL_DRAW_BUFFER6_ATI = 0x882B;
        public const Int32 GL_DRAW_BUFFER7 = 0x882C;
        public const Int32 GL_DRAW_BUFFER7_ARB = 0x882C;
        public const Int32 GL_DRAW_BUFFER7_ATI = 0x882C;
        public const Int32 GL_DRAW_BUFFER8 = 0x882D;
        public const Int32 GL_DRAW_BUFFER8_ARB = 0x882D;
        public const Int32 GL_DRAW_BUFFER8_ATI = 0x882D;
        public const Int32 GL_DRAW_BUFFER9 = 0x882E;
        public const Int32 GL_DRAW_BUFFER9_ARB = 0x882E;
        public const Int32 GL_DRAW_BUFFER9_ATI = 0x882E;
        public const Int32 GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CAA;
        public const Int32 GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9;
        public const Int32 GL_DRAW_PIXEL_TOKEN = 0x0705;
        public const Int32 GL_DRAW_PIXELS_APPLE = 0x8A0A;
        public const Int32 GL_DS_BIAS_NV = 0x8716;
        public const Int32 GL_DS_SCALE_NV = 0x8710;
        public const Int32 GL_DSDT_MAG_INTENSITY_NV = 0x86DC;
        public const Int32 GL_DSDT_MAG_NV = 0x86F6;
        public const Int32 GL_DSDT_MAG_VIB_NV = 0x86F7;
        public const Int32 GL_DSDT_NV = 0x86F5;
        public const Int32 GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B;
        public const Int32 GL_DSDT8_MAG8_NV = 0x870A;
        public const Int32 GL_DSDT8_NV = 0x8709;
        public const Int32 GL_DST_ALPHA = 0x0304;
        public const Int32 GL_DST_COLOR = 0x0306;
        public const Int32 GL_DT_BIAS_NV = 0x8717;
        public const Int32 GL_DT_SCALE_NV = 0x8711;
        public const Int32 GL_DU8DV8_ATI = 0x877A;
        public const Int32 GL_DUAL_ALPHA12_SGIS = 0x8112;
        public const Int32 GL_DUAL_ALPHA16_SGIS = 0x8113;
        public const Int32 GL_DUAL_ALPHA4_SGIS = 0x8110;
        public const Int32 GL_DUAL_ALPHA8_SGIS = 0x8111;
        public const Int32 GL_DUAL_INTENSITY12_SGIS = 0x811A;
        public const Int32 GL_DUAL_INTENSITY16_SGIS = 0x811B;
        public const Int32 GL_DUAL_INTENSITY4_SGIS = 0x8118;
        public const Int32 GL_DUAL_INTENSITY8_SGIS = 0x8119;
        public const Int32 GL_DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C;
        public const Int32 GL_DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D;
        public const Int32 GL_DUAL_LUMINANCE12_SGIS = 0x8116;
        public const Int32 GL_DUAL_LUMINANCE16_SGIS = 0x8117;
        public const Int32 GL_DUAL_LUMINANCE4_SGIS = 0x8114;
        public const Int32 GL_DUAL_LUMINANCE8_SGIS = 0x8115;
        public const Int32 GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124;
        public const Int32 GL_DUDV_ATI = 0x8779;
        public const Int32 GL_DYNAMIC_ATI = 0x8761;
        public const Int32 GL_DYNAMIC_COPY = 0x88EA;
        public const Int32 GL_DYNAMIC_COPY_ARB = 0x88EA;
        public const Int32 GL_DYNAMIC_DRAW = 0x88E8;
        public const Int32 GL_DYNAMIC_DRAW_ARB = 0x88E8;
        public const Int32 GL_DYNAMIC_READ = 0x88E9;
        public const Int32 GL_DYNAMIC_READ_ARB = 0x88E9;
        public const Int32 GL_E_TIMES_F_NV = 0x8531;
        public const Int32 GL_EDGE_FLAG = 0x0B43;
        public const Int32 GL_EDGE_FLAG_ARRAY = 0x8079;
        public const Int32 GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
        public const Int32 GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B;
        public const Int32 GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
        public const Int32 GL_EDGE_FLAG_ARRAY_EXT = 0x8079;
        public const Int32 GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075;
        public const Int32 GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;
        public const Int32 GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
        public const Int32 GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093;
        public const Int32 GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
        public const Int32 GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C;
        public const Int32 GL_EDGEFLAG_BIT_PGI = 0x00040000;
        public const Int32 GL_EIGHTH_BIT_ATI = 0x00000020;
        public const Int32 GL_ELEMENT_ARRAY_APPLE = 0x8768;
        public const Int32 GL_ELEMENT_ARRAY_ATI = 0x8768;
        public const Int32 GL_ELEMENT_ARRAY_BUFFER = 0x8893;
        public const Int32 GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893;
        public const Int32 GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
        public const Int32 GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895;
        public const Int32 GL_ELEMENT_ARRAY_POINTER_APPLE = 0x876A;
        public const Int32 GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A;
        public const Int32 GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8769;
        public const Int32 GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769;
        public const Int32 GL_EMBOSS_CONSTANT_NV = 0x855E;
        public const Int32 GL_EMBOSS_LIGHT_NV = 0x855D;
        public const Int32 GL_EMBOSS_MAP_NV = 0x855F;
        public const Int32 GL_EMISSION = 0x1600;
        public const Int32 GL_ENABLE_BIT = 0x00002000;
        public const Int32 GL_EQUAL = 0x0202;
        public const Int32 GL_EQUIV = 0x1509;
        public const Int32 GL_EVAL_2D_NV = 0x86C0;
        public const Int32 GL_EVAL_BIT = 0x00010000;
        public const Int32 GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5;
        public const Int32 GL_EVAL_TRIANGULAR_2D_NV = 0x86C1;
        public const Int32 GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6;
        public const Int32 GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7;
        public const Int32 GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0;
        public const Int32 GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1;
        public const Int32 GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2;
        public const Int32 GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3;
        public const Int32 GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4;
        public const Int32 GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5;
        public const Int32 GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8;
        public const Int32 GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9;
        public const Int32 GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA;
        public const Int32 GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB;
        public const Int32 GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC;
        public const Int32 GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD;
        public const Int32 GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE;
        public const Int32 GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF;
        public const Int32 GL_EXP = 0x0800;
        public const Int32 GL_EXP2 = 0x0801;
        public const Int32 GL_EXPAND_NEGATE_NV = 0x8539;
        public const Int32 GL_EXPAND_NORMAL_NV = 0x8538;
        public const Int32 GL_EXT_abgr = 1;
        public const Int32 GL_EXT_blend_color = 1;
        public const Int32 GL_EXT_blend_logic_op = 1;
        public const Int32 GL_EXT_blend_minmax = 1;
        public const Int32 GL_EXT_blend_subtract = 1;
        public const Int32 GL_EXT_cmyka = 1;
        public const Int32 GL_EXT_convolution = 1;
        public const Int32 GL_EXT_copy_texture = 1;
        public const Int32 GL_EXT_histogram = 1;
        public const Int32 GL_EXT_packed_pixels = 1;
        public const Int32 GL_EXT_point_parameters = 1;
        public const Int32 GL_EXT_polygon_offset = 1;
        public const Int32 GL_EXT_rescale_normal = 1;
        public const Int32 GL_EXT_shared_texture_palette = 1;
        public const Int32 GL_EXT_subtexture = 1;
        public const Int32 GL_EXT_texture = 1;
        public const Int32 GL_EXT_texture_object = 1;
        public const Int32 GL_EXT_texture3D = 1;
        public const Int32 GL_EXT_vertex_array = 1;
        public const Int32 GL_EXTENSIONS = 0x1F03;
        public const Int32 GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2;
        public const Int32 GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0;
        public const Int32 GL_EYE_LINE_SGIS = 0x81F6;
        public const Int32 GL_EYE_LINEAR = 0x2400;
        public const Int32 GL_EYE_PLANE = 0x2502;
        public const Int32 GL_EYE_PLANE_ABSOLUTE_NV = 0x855C;
        public const Int32 GL_EYE_POINT_SGIS = 0x81F4;
        public const Int32 GL_EYE_RADIAL_NV = 0x855B;
        public const Int32 GL_FALSE = 0;
        public const Int32 GL_FASTEST = 0x1101;
        public const Int32 GL_FEEDBACK = 0x1C01;
        public const Int32 GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
        public const Int32 GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
        public const Int32 GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
        public const Int32 GL_FENCE_APPLE = 0x8A0B;
        public const Int32 GL_FENCE_CONDITION_NV = 0x84F4;
        public const Int32 GL_FENCE_STATUS_NV = 0x84F3;
        public const Int32 GL_FILL = 0x1B02;
        public const Int32 GL_FILTER4_SGIS = 0x8146;
        public const Int32 GL_FIXED_ONLY_ARB = 0x891D;
        public const Int32 GL_FLAT = 0x1D00;
        public const Int32 GL_FLOAT = 0x1406;
        public const Int32 GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD;
        public const Int32 GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D;
        public const Int32 GL_FLOAT_MAT2 = 0x8B5A;
        public const Int32 GL_FLOAT_MAT2_ARB = 0x8B5A;
        public const Int32 GL_FLOAT_MAT2x3 = 0x8B65;
        public const Int32 GL_FLOAT_MAT2x4 = 0x8B66;
        public const Int32 GL_FLOAT_MAT3 = 0x8B5B;
        public const Int32 GL_FLOAT_MAT3_ARB = 0x8B5B;
        public const Int32 GL_FLOAT_MAT3x2 = 0x8B67;
        public const Int32 GL_FLOAT_MAT3x4 = 0x8B68;
        public const Int32 GL_FLOAT_MAT4 = 0x8B5C;
        public const Int32 GL_FLOAT_MAT4_ARB = 0x8B5C;
        public const Int32 GL_FLOAT_MAT4x2 = 0x8B69;
        public const Int32 GL_FLOAT_MAT4x3 = 0x8B6A;
        public const Int32 GL_FLOAT_R_NV = 0x8880;
        public const Int32 GL_FLOAT_R16_NV = 0x8884;
        public const Int32 GL_FLOAT_R32_NV = 0x8885;
        public const Int32 GL_FLOAT_RG_NV = 0x8881;
        public const Int32 GL_FLOAT_RG16_NV = 0x8886;
        public const Int32 GL_FLOAT_RG32_NV = 0x8887;
        public const Int32 GL_FLOAT_RGB_NV = 0x8882;
        public const Int32 GL_FLOAT_RGB16_NV = 0x8888;
        public const Int32 GL_FLOAT_RGB32_NV = 0x8889;
        public const Int32 GL_FLOAT_RGBA_MODE_NV = 0x888E;
        public const Int32 GL_FLOAT_RGBA_NV = 0x8883;
        public const Int32 GL_FLOAT_RGBA16_NV = 0x888A;
        public const Int32 GL_FLOAT_RGBA32_NV = 0x888B;
        public const Int32 GL_FLOAT_VEC2 = 0x8B50;
        public const Int32 GL_FLOAT_VEC2_ARB = 0x8B50;
        public const Int32 GL_FLOAT_VEC3 = 0x8B51;
        public const Int32 GL_FLOAT_VEC3_ARB = 0x8B51;
        public const Int32 GL_FLOAT_VEC4 = 0x8B52;
        public const Int32 GL_FLOAT_VEC4_ARB = 0x8B52;
        public const Int32 GL_FOG = 0x0B60;
        public const Int32 GL_FOG_BIT = 0x00000080;
        public const Int32 GL_FOG_COLOR = 0x0B66;
        public const Int32 GL_FOG_COORD = GL_FOG_COORDINATE;
        public const Int32 GL_FOG_COORD_ARRAY = GL_FOG_COORDINATE_ARRAY;
        public const Int32 GL_FOG_COORD_ARRAY_BUFFER_BINDING = GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING;
        public const Int32 GL_FOG_COORD_ARRAY_POINTER = GL_FOG_COORDINATE_ARRAY_POINTER;
        public const Int32 GL_FOG_COORD_ARRAY_STRIDE = GL_FOG_COORDINATE_ARRAY_STRIDE;
        public const Int32 GL_FOG_COORD_ARRAY_TYPE = GL_FOG_COORDINATE_ARRAY_TYPE;
        public const Int32 GL_FOG_COORD_SRC = GL_FOG_COORDINATE_SOURCE;
        public const Int32 GL_FOG_COORDINATE = 0x8451;
        public const Int32 GL_FOG_COORDINATE_ARRAY = 0x8457;
        public const Int32 GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
        public const Int32 GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D;
        public const Int32 GL_FOG_COORDINATE_ARRAY_EXT = 0x8457;
        public const Int32 GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076;
        public const Int32 GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;
        public const Int32 GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
        public const Int32 GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456;
        public const Int32 GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
        public const Int32 GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455;
        public const Int32 GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
        public const Int32 GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454;
        public const Int32 GL_FOG_COORDINATE_EXT = 0x8451;
        public const Int32 GL_FOG_COORDINATE_SOURCE = 0x8450;
        public const Int32 GL_FOG_COORDINATE_SOURCE_EXT = 0x8450;
        public const Int32 GL_FOG_DENSITY = 0x0B62;
        public const Int32 GL_FOG_DISTANCE_MODE_NV = 0x855A;
        public const Int32 GL_FOG_END = 0x0B64;
        public const Int32 GL_FOG_FACTOR_TO_ALPHA_SGIX = 0x836F;
        public const Int32 GL_FOG_FUNC_POINTS_SGIS = 0x812B;
        public const Int32 GL_FOG_FUNC_SGIS = 0x812A;
        public const Int32 GL_FOG_HINT = 0x0C54;
        public const Int32 GL_FOG_INDEX = 0x0B61;
        public const Int32 GL_FOG_MODE = 0x0B65;
        public const Int32 GL_FOG_OFFSET_SGIX = 0x8198;
        public const Int32 GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
        public const Int32 GL_FOG_SCALE_SGIX = 0x81FC;
        public const Int32 GL_FOG_SCALE_VALUE_SGIX = 0x81FD;
        public const Int32 GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC;
        public const Int32 GL_FOG_START = 0x0B63;
        public const Int32 GL_FORCE_BLUE_TO_ONE_NV = 0x8860;
        public const Int32 GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982;
        public const Int32 GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983;
        public const Int32 GL_FRAGMENT_COLOR_EXT = 0x834C;
        public const Int32 GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402;
        public const Int32 GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403;
        public const Int32 GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401;
        public const Int32 GL_FRAGMENT_DEPTH = 0x8452;
        public const Int32 GL_FRAGMENT_DEPTH_EXT = 0x8452;
        public const Int32 GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A;
        public const Int32 GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408;
        public const Int32 GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B;
        public const Int32 GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409;
        public const Int32 GL_FRAGMENT_LIGHT0_SGIX = 0x840C;
        public const Int32 GL_FRAGMENT_LIGHT1_SGIX = 0x840D;
        public const Int32 GL_FRAGMENT_LIGHT2_SGIX = 0x840E;
        public const Int32 GL_FRAGMENT_LIGHT3_SGIX = 0x840F;
        public const Int32 GL_FRAGMENT_LIGHT4_SGIX = 0x8410;
        public const Int32 GL_FRAGMENT_LIGHT5_SGIX = 0x8411;
        public const Int32 GL_FRAGMENT_LIGHT6_SGIX = 0x8412;
        public const Int32 GL_FRAGMENT_LIGHT7_SGIX = 0x8413;
        public const Int32 GL_FRAGMENT_LIGHTING_SGIX = 0x8400;
        public const Int32 GL_FRAGMENT_MATERIAL_EXT = 0x8349;
        public const Int32 GL_FRAGMENT_NORMAL_EXT = 0x834A;
        public const Int32 GL_FRAGMENT_PROGRAM_ARB = 0x8804;
        public const Int32 GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873;
        public const Int32 GL_FRAGMENT_PROGRAM_NV = 0x8870;
        public const Int32 GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4;
        public const Int32 GL_FRAGMENT_SHADER = 0x8B30;
        public const Int32 GL_FRAGMENT_SHADER_ARB = 0x8B30;
        public const Int32 GL_FRAGMENT_SHADER_ATI = 0x8920;
        public const Int32 GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
        public const Int32 GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
        public const Int32 GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7;
        public const Int32 GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1;
        public const Int32 GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0;
        public const Int32 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4;
        public const Int32 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3;
        public const Int32 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4;
        public const Int32 GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2;
        public const Int32 GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
        public const Int32 GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5;
        public const Int32 GL_FRAMEBUFFER_EXT = 0x8D40;
        public const Int32 GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6;
        public const Int32 GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9;
        public const Int32 GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB;
        public const Int32 GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA;
        public const Int32 GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9;
        public const Int32 GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8;
        public const Int32 GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7;
        public const Int32 GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56;
        public const Int32 GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC;
        public const Int32 GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA;
        public const Int32 GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9;
        public const Int32 GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD;
        public const Int32 GL_FRAMEZOOM_FACTOR_SGIX = 0x818C;
        public const Int32 GL_FRAMEZOOM_SGIX = 0x818B;
        public const Int32 GL_FRONT = 0x0404;
        public const Int32 GL_FRONT_AND_BACK = 0x0408;
        public const Int32 GL_FRONT_FACE = 0x0B46;
        public const Int32 GL_FRONT_LEFT = 0x0400;
        public const Int32 GL_FRONT_RIGHT = 0x0401;
        public const Int32 GL_FULL_RANGE_EXT = 0x87E1;
        public const Int32 GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
        public const Int32 GL_FUNC_ADD = 0x8006;
        public const Int32 GL_FUNC_ADD_EXT = 0x8006;
        public const Int32 GL_FUNC_REVERSE_SUBTRACT = 0x800B;
        public const Int32 GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B;
        public const Int32 GL_FUNC_SUBTRACT = 0x800A;
        public const Int32 GL_FUNC_SUBTRACT_EXT = 0x800A;
        public const Int32 GL_GENERATE_MIPMAP = 0x8191;
        public const Int32 GL_GENERATE_MIPMAP_HINT = 0x8192;
        public const Int32 GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
        public const Int32 GL_GENERATE_MIPMAP_SGIS = 0x8191;
        public const Int32 GL_GENERIC_ATTRIB_NV = 0x8C7D;
        public const Int32 GL_GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002;
        public const Int32 GL_GEOMETRY_DEFORMATION_SGIX = 0x8194;
        public const Int32 GL_GEOMETRY_INPUT_TYPE_EXT = 0x8DDB;
        public const Int32 GL_GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC;
        public const Int32 GL_GEOMETRY_PROGRAM_NV = 0x8C26;
        public const Int32 GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3;
        public const Int32 GL_GEOMETRY_SHADER_EXT = 0x8DD9;
        public const Int32 GL_GEOMETRY_VERTICES_OUT_EXT = 0x8DDA;
        public const Int32 GL_GEQUAL = 0x0206;
        public const Int32 GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA;
        public const Int32 GL_GLOBAL_ALPHA_SUN = 0x81D9;
        public const Int32 GL_GREATER = 0x0204;
        public const Int32 GL_GREEN = 0x1904;
        public const Int32 GL_GREEN_BIAS = 0x0D19;
        public const Int32 GL_GREEN_BIT_ATI = 0x00000002;
        public const Int32 GL_GREEN_BITS = 0x0D53;
        public const Int32 GL_GREEN_INTEGER_EXT = 0x8D95;
        public const Int32 GL_GREEN_MAX_CLAMP_INGR = 0x8565;
        public const Int32 GL_GREEN_MIN_CLAMP_INGR = 0x8561;
        public const Int32 GL_GREEN_SCALE = 0x0D18;
        public const Int32 GL_HALF_BIAS_NEGATE_NV = 0x853B;
        public const Int32 GL_HALF_BIAS_NORMAL_NV = 0x853A;
        public const Int32 GL_HALF_BIT_ATI = 0x00000008;
        public const Int32 GL_HALF_FLOAT_ARB = 0x140B;
        public const Int32 GL_HALF_FLOAT_NV = 0x140B;
        public const Int32 GL_HI_BIAS_NV = 0x8714;
        public const Int32 GL_HI_SCALE_NV = 0x870E;
        public const Int32 GL_HILO_NV = 0x86F4;
        public const Int32 GL_HILO16_NV = 0x86F8;
        public const Int32 GL_HILO8_NV = 0x885E;
        public const Int32 GL_HINT_BIT = 0x00008000;
        public const Int32 GL_HISTOGRAM = 0x8024;
        public const Int32 GL_HISTOGRAM_ALPHA_SIZE = 0x802B;
        public const Int32 GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B;
        public const Int32 GL_HISTOGRAM_BLUE_SIZE = 0x802A;
        public const Int32 GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A;
        public const Int32 GL_HISTOGRAM_EXT = 0x8024;
        public const Int32 GL_HISTOGRAM_FORMAT = 0x8027;
        public const Int32 GL_HISTOGRAM_FORMAT_EXT = 0x8027;
        public const Int32 GL_HISTOGRAM_GREEN_SIZE = 0x8029;
        public const Int32 GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029;
        public const Int32 GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C;
        public const Int32 GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C;
        public const Int32 GL_HISTOGRAM_RED_SIZE = 0x8028;
        public const Int32 GL_HISTOGRAM_RED_SIZE_EXT = 0x8028;
        public const Int32 GL_HISTOGRAM_SINK = 0x802D;
        public const Int32 GL_HISTOGRAM_SINK_EXT = 0x802D;
        public const Int32 GL_HISTOGRAM_WIDTH = 0x8026;
        public const Int32 GL_HISTOGRAM_WIDTH_EXT = 0x8026;
        public const Int32 GL_IDENTITY_NV = 0x862A;
        public const Int32 GL_IGNORE_BORDER_HP = 0x8150;
        public const Int32 GL_IMAGE_CUBIC_WEIGHT_HP = 0x815E;
        public const Int32 GL_IMAGE_MAG_FILTER_HP = 0x815C;
        public const Int32 GL_IMAGE_MIN_FILTER_HP = 0x815D;
        public const Int32 GL_IMAGE_ROTATE_ANGLE_HP = 0x8159;
        public const Int32 GL_IMAGE_ROTATE_ORIGIN_X_HP = 0x815A;
        public const Int32 GL_IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B;
        public const Int32 GL_IMAGE_SCALE_X_HP = 0x8155;
        public const Int32 GL_IMAGE_SCALE_Y_HP = 0x8156;
        public const Int32 GL_IMAGE_TRANSFORM_2D_HP = 0x8161;
        public const Int32 GL_IMAGE_TRANSLATE_X_HP = 0x8157;
        public const Int32 GL_IMAGE_TRANSLATE_Y_HP = 0x8158;
        public const Int32 GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B;
        public const Int32 GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A;
        public const Int32 GL_INCR = 0x1E02;
        public const Int32 GL_INCR_WRAP = 0x8507;
        public const Int32 GL_INCR_WRAP_EXT = 0x8507;
        public const Int32 GL_INDEX_ARRAY = 0x8077;
        public const Int32 GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
        public const Int32 GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899;
        public const Int32 GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
        public const Int32 GL_INDEX_ARRAY_EXT = 0x8077;
        public const Int32 GL_INDEX_ARRAY_LIST_IBM = 103073;
        public const Int32 GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083;
        public const Int32 GL_INDEX_ARRAY_POINTER = 0x8091;
        public const Int32 GL_INDEX_ARRAY_POINTER_EXT = 0x8091;
        public const Int32 GL_INDEX_ARRAY_STRIDE = 0x8086;
        public const Int32 GL_INDEX_ARRAY_STRIDE_EXT = 0x8086;
        public const Int32 GL_INDEX_ARRAY_TYPE = 0x8085;
        public const Int32 GL_INDEX_ARRAY_TYPE_EXT = 0x8085;
        public const Int32 GL_INDEX_BIT_PGI = 0x00080000;
        public const Int32 GL_INDEX_BITS = 0x0D51;
        public const Int32 GL_INDEX_CLEAR_VALUE = 0x0C20;
        public const Int32 GL_INDEX_LOGIC_OP = 0x0BF1;
        public const Int32 GL_INDEX_MATERIAL_EXT = 0x81B8;
        public const Int32 GL_INDEX_MATERIAL_FACE_EXT = 0x81BA;
        public const Int32 GL_INDEX_MATERIAL_PARAMETER_EXT = 0x81B9;
        public const Int32 GL_INDEX_MODE = 0x0C30;
        public const Int32 GL_INDEX_OFFSET = 0x0D13;
        public const Int32 GL_INDEX_SHIFT = 0x0D12;
        public const Int32 GL_INDEX_TEST_EXT = 0x81B5;
        public const Int32 GL_INDEX_TEST_FUNC_EXT = 0x81B6;
        public const Int32 GL_INDEX_TEST_REF_EXT = 0x81B7;
        public const Int32 GL_INDEX_WRITEMASK = 0x0C21;
        public const Int32 GL_INFO_LOG_LENGTH = 0x8B84;
        public const Int32 GL_INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180;
        public const Int32 GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181;
        public const Int32 GL_INT = 0x1404;
        public const Int32 GL_INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE;
        public const Int32 GL_INT_SAMPLER_1D_EXT = 0x8DC9;
        public const Int32 GL_INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF;
        public const Int32 GL_INT_SAMPLER_2D_EXT = 0x8DCA;
        public const Int32 GL_INT_SAMPLER_2D_RECT_EXT = 0x8DCD;
        public const Int32 GL_INT_SAMPLER_3D_EXT = 0x8DCB;
        public const Int32 GL_INT_SAMPLER_BUFFER_EXT = 0x8DD0;
        public const Int32 GL_INT_SAMPLER_CUBE_EXT = 0x8DCC;
        public const Int32 GL_INT_VEC2 = 0x8B53;
        public const Int32 GL_INT_VEC2_ARB = 0x8B53;
        public const Int32 GL_INT_VEC3 = 0x8B54;
        public const Int32 GL_INT_VEC3_ARB = 0x8B54;
        public const Int32 GL_INT_VEC4 = 0x8B55;
        public const Int32 GL_INT_VEC4_ARB = 0x8B55;
        public const Int32 GL_INTENSITY = 0x8049;
        public const Int32 GL_INTENSITY_EXT = 0x8049;
        public const Int32 GL_INTENSITY_FLOAT16_ATI = 0x881D;
        public const Int32 GL_INTENSITY_FLOAT32_ATI = 0x8817;
        public const Int32 GL_INTENSITY12 = 0x804C;
        public const Int32 GL_INTENSITY12_EXT = 0x804C;
        public const Int32 GL_INTENSITY16 = 0x804D;
        public const Int32 GL_INTENSITY16_EXT = 0x804D;
        public const Int32 GL_INTENSITY16F_ARB = 0x881D;
        public const Int32 GL_INTENSITY16I_EXT = 0x8D8B;
        public const Int32 GL_INTENSITY16UI_EXT = 0x8D79;
        public const Int32 GL_INTENSITY32F_ARB = 0x8817;
        public const Int32 GL_INTENSITY32I_EXT = 0x8D85;
        public const Int32 GL_INTENSITY32UI_EXT = 0x8D73;
        public const Int32 GL_INTENSITY4 = 0x804A;
        public const Int32 GL_INTENSITY4_EXT = 0x804A;
        public const Int32 GL_INTENSITY8 = 0x804B;
        public const Int32 GL_INTENSITY8_EXT = 0x804B;
        public const Int32 GL_INTENSITY8I_EXT = 0x8D91;
        public const Int32 GL_INTENSITY8UI_EXT = 0x8D7F;
        public const Int32 GL_INTERLACE_OML = 0x8980;
        public const Int32 GL_INTERLACE_READ_INGR = 0x8568;
        public const Int32 GL_INTERLACE_READ_OML = 0x8981;
        public const Int32 GL_INTERLACE_SGIX = 0x8094;
        public const Int32 GL_INTERLEAVED_ATTRIBS_NV = 0x8C8C;
        public const Int32 GL_INTERPOLATE = 0x8575;
        public const Int32 GL_INTERPOLATE_ARB = 0x8575;
        public const Int32 GL_INTERPOLATE_EXT = 0x8575;
        public const Int32 GL_INVALID_ENUM = 0x0500;
        public const Int32 GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506;
        public const Int32 GL_INVALID_OPERATION = 0x0502;
        public const Int32 GL_INVALID_VALUE = 0x0501;
        public const Int32 GL_INVARIANT_DATATYPE_EXT = 0x87EB;
        public const Int32 GL_INVARIANT_EXT = 0x87C2;
        public const Int32 GL_INVARIANT_VALUE_EXT = 0x87EA;
        public const Int32 GL_INVERSE_NV = 0x862B;
        public const Int32 GL_INVERSE_TRANSPOSE_NV = 0x862D;
        public const Int32 GL_INVERT = 0x150A;
        public const Int32 GL_INVERTED_SCREEN_W_REND = 0x8491;
        public const Int32 GL_IR_INSTRUMENT1_SGIX = 0x817F;
        public const Int32 GL_IUI_N3F_V2F_EXT = 0x81AF;
        public const Int32 GL_IUI_N3F_V3F_EXT = 0x81B0;
        public const Int32 GL_IUI_V2F_EXT = 0x81AD;
        public const Int32 GL_IUI_V3F_EXT = 0x81AE;
        public const Int32 GL_KEEP = 0x1E00;
        public const Int32 GL_LEFT = 0x0406;
        public const Int32 GL_LEQUAL = 0x0203;
        public const Int32 GL_LERP_ATI = 0x8969;
        public const Int32 GL_LESS = 0x0201;
        public const Int32 GL_LIGHT_ENV_MODE_SGIX = 0x8407;
        public const Int32 GL_LIGHT_MODEL_AMBIENT = 0x0B53;
        public const Int32 GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
        public const Int32 GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
        public const Int32 GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
        public const Int32 GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0;
        public const Int32 GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
        public const Int32 GL_LIGHT0 = 0x4000;
        public const Int32 GL_LIGHT1 = 0x4001;
        public const Int32 GL_LIGHT2 = 0x4002;
        public const Int32 GL_LIGHT3 = 0x4003;
        public const Int32 GL_LIGHT4 = 0x4004;
        public const Int32 GL_LIGHT5 = 0x4005;
        public const Int32 GL_LIGHT6 = 0x4006;
        public const Int32 GL_LIGHT7 = 0x4007;
        public const Int32 GL_LIGHTING = 0x0B50;
        public const Int32 GL_LIGHTING_BIT = 0x00000040;
        public const Int32 GL_LINE = 0x1B01;
        public const Int32 GL_LINE_BIT = 0x00000004;
        public const Int32 GL_LINE_LOOP = 0x0002;
        public const Int32 GL_LINE_RESET_TOKEN = 0x0707;
        public const Int32 GL_LINE_SMOOTH = 0x0B20;
        public const Int32 GL_LINE_SMOOTH_HINT = 0x0C52;
        public const Int32 GL_LINE_STIPPLE = 0x0B24;
        public const Int32 GL_LINE_STIPPLE_PATTERN = 0x0B25;
        public const Int32 GL_LINE_STIPPLE_REPEAT = 0x0B26;
        public const Int32 GL_LINE_STRIP = 0x0003;
        public const Int32 GL_LINE_STRIP_ADJACENCY_EXT = 0x000B;
        public const Int32 GL_LINE_TOKEN = 0x0702;
        public const Int32 GL_LINE_WIDTH = 0x0B21;
        public const Int32 GL_LINE_WIDTH_GRANULARITY = 0x0B23;
        public const Int32 GL_LINE_WIDTH_RANGE = 0x0B22;
        public const Int32 GL_LINEAR = 0x2601;
        public const Int32 GL_LINEAR_ATTENUATION = 0x1208;
        public const Int32 GL_LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170;
        public const Int32 GL_LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F;
        public const Int32 GL_LINEAR_DETAIL_ALPHA_SGIS = 0x8098;
        public const Int32 GL_LINEAR_DETAIL_COLOR_SGIS = 0x8099;
        public const Int32 GL_LINEAR_DETAIL_SGIS = 0x8097;
        public const Int32 GL_LINEAR_MIPMAP_LINEAR = 0x2703;
        public const Int32 GL_LINEAR_MIPMAP_NEAREST = 0x2701;
        public const Int32 GL_LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE;
        public const Int32 GL_LINEAR_SHARPEN_COLOR_SGIS = 0x80AF;
        public const Int32 GL_LINEAR_SHARPEN_SGIS = 0x80AD;
        public const Int32 GL_LINES = 0x0001;
        public const Int32 GL_LINES_ADJACENCY_EXT = 0x000A;
        public const Int32 GL_LINK_STATUS = 0x8B82;
        public const Int32 GL_LIST_BASE = 0x0B32;
        public const Int32 GL_LIST_BIT = 0x00020000;
        public const Int32 GL_LIST_INDEX = 0x0B33;
        public const Int32 GL_LIST_MODE = 0x0B30;
        public const Int32 GL_LIST_PRIORITY_SGIX = 0x8182;
        public const Int32 GL_LO_BIAS_NV = 0x8715;
        public const Int32 GL_LO_SCALE_NV = 0x870F;
        public const Int32 GL_LOAD = 0x0101;
        public const Int32 GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED;
        public const Int32 GL_LOCAL_CONSTANT_EXT = 0x87C3;
        public const Int32 GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC;
        public const Int32 GL_LOCAL_EXT = 0x87C4;
        public const Int32 GL_LOGIC_OP = 0x0BF1;
        public const Int32 GL_LOGIC_OP_MODE = 0x0BF0;
        public const Int32 GL_LOWER_LEFT = 0x8CA1;
        public const Int32 GL_LUMINANCE = 0x1909;
        public const Int32 GL_LUMINANCE_ALPHA = 0x190A;
        public const Int32 GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F;
        public const Int32 GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819;
        public const Int32 GL_LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D;
        public const Int32 GL_LUMINANCE_ALPHA16F_ARB = 0x881F;
        public const Int32 GL_LUMINANCE_ALPHA16I_EXT = 0x8D8D;
        public const Int32 GL_LUMINANCE_ALPHA16UI_EXT = 0x8D7B;
        public const Int32 GL_LUMINANCE_ALPHA32F_ARB = 0x8819;
        public const Int32 GL_LUMINANCE_ALPHA32I_EXT = 0x8D87;
        public const Int32 GL_LUMINANCE_ALPHA32UI_EXT = 0x8D75;
        public const Int32 GL_LUMINANCE_ALPHA8I_EXT = 0x8D93;
        public const Int32 GL_LUMINANCE_ALPHA8UI_EXT = 0x8D81;
        public const Int32 GL_LUMINANCE_FLOAT16_ATI = 0x881E;
        public const Int32 GL_LUMINANCE_FLOAT32_ATI = 0x8818;
        public const Int32 GL_LUMINANCE_INTEGER_EXT = 0x8D9C;
        public const Int32 GL_LUMINANCE12 = 0x8041;
        public const Int32 GL_LUMINANCE12_ALPHA12 = 0x8047;
        public const Int32 GL_LUMINANCE12_ALPHA12_EXT = 0x8047;
        public const Int32 GL_LUMINANCE12_ALPHA4 = 0x8046;
        public const Int32 GL_LUMINANCE12_ALPHA4_EXT = 0x8046;
        public const Int32 GL_LUMINANCE12_EXT = 0x8041;
        public const Int32 GL_LUMINANCE16 = 0x8042;
        public const Int32 GL_LUMINANCE16_ALPHA16 = 0x8048;
        public const Int32 GL_LUMINANCE16_ALPHA16_EXT = 0x8048;
        public const Int32 GL_LUMINANCE16_EXT = 0x8042;
        public const Int32 GL_LUMINANCE16F_ARB = 0x881E;
        public const Int32 GL_LUMINANCE16I_EXT = 0x8D8C;
        public const Int32 GL_LUMINANCE16UI_EXT = 0x8D7A;
        public const Int32 GL_LUMINANCE32F_ARB = 0x8818;
        public const Int32 GL_LUMINANCE32I_EXT = 0x8D86;
        public const Int32 GL_LUMINANCE32UI_EXT = 0x8D74;
        public const Int32 GL_LUMINANCE4 = 0x803F;
        public const Int32 GL_LUMINANCE4_ALPHA4 = 0x8043;
        public const Int32 GL_LUMINANCE4_ALPHA4_EXT = 0x8043;
        public const Int32 GL_LUMINANCE4_EXT = 0x803F;
        public const Int32 GL_LUMINANCE6_ALPHA2 = 0x8044;
        public const Int32 GL_LUMINANCE6_ALPHA2_EXT = 0x8044;
        public const Int32 GL_LUMINANCE8 = 0x8040;
        public const Int32 GL_LUMINANCE8_ALPHA8 = 0x8045;
        public const Int32 GL_LUMINANCE8_ALPHA8_EXT = 0x8045;
        public const Int32 GL_LUMINANCE8_EXT = 0x8040;
        public const Int32 GL_LUMINANCE8I_EXT = 0x8D92;
        public const Int32 GL_LUMINANCE8UI_EXT = 0x8D80;
        public const Int32 GL_MAD_ATI = 0x8968;
        public const Int32 GL_MAGNITUDE_BIAS_NV = 0x8718;
        public const Int32 GL_MAGNITUDE_SCALE_NV = 0x8712;
        public const Int32 GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3;
        public const Int32 GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4;
        public const Int32 GL_MAP_COLOR = 0x0D10;
        public const Int32 GL_MAP_STENCIL = 0x0D11;
        public const Int32 GL_MAP_TESSELLATION_NV = 0x86C2;
        public const Int32 GL_MAP1_BINORMAL_EXT = 0x8446;
        public const Int32 GL_MAP1_COLOR_4 = 0x0D90;
        public const Int32 GL_MAP1_GRID_DOMAIN = 0x0DD0;
        public const Int32 GL_MAP1_GRID_SEGMENTS = 0x0DD1;
        public const Int32 GL_MAP1_INDEX = 0x0D91;
        public const Int32 GL_MAP1_NORMAL = 0x0D92;
        public const Int32 GL_MAP1_TANGENT_EXT = 0x8444;
        public const Int32 GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
        public const Int32 GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
        public const Int32 GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
        public const Int32 GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
        public const Int32 GL_MAP1_VERTEX_3 = 0x0D97;
        public const Int32 GL_MAP1_VERTEX_4 = 0x0D98;
        public const Int32 GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660;
        public const Int32 GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661;
        public const Int32 GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A;
        public const Int32 GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B;
        public const Int32 GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C;
        public const Int32 GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D;
        public const Int32 GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E;
        public const Int32 GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F;
        public const Int32 GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662;
        public const Int32 GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663;
        public const Int32 GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664;
        public const Int32 GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665;
        public const Int32 GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666;
        public const Int32 GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667;
        public const Int32 GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668;
        public const Int32 GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669;
        public const Int32 GL_MAP2_BINORMAL_EXT = 0x8447;
        public const Int32 GL_MAP2_COLOR_4 = 0x0DB0;
        public const Int32 GL_MAP2_GRID_DOMAIN = 0x0DD2;
        public const Int32 GL_MAP2_GRID_SEGMENTS = 0x0DD3;
        public const Int32 GL_MAP2_INDEX = 0x0DB1;
        public const Int32 GL_MAP2_NORMAL = 0x0DB2;
        public const Int32 GL_MAP2_TANGENT_EXT = 0x8445;
        public const Int32 GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
        public const Int32 GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
        public const Int32 GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
        public const Int32 GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
        public const Int32 GL_MAP2_VERTEX_3 = 0x0DB7;
        public const Int32 GL_MAP2_VERTEX_4 = 0x0DB8;
        public const Int32 GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670;
        public const Int32 GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671;
        public const Int32 GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A;
        public const Int32 GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B;
        public const Int32 GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C;
        public const Int32 GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D;
        public const Int32 GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E;
        public const Int32 GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F;
        public const Int32 GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672;
        public const Int32 GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673;
        public const Int32 GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674;
        public const Int32 GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675;
        public const Int32 GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676;
        public const Int32 GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677;
        public const Int32 GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678;
        public const Int32 GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679;
        public const Int32 GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
        public const Int32 GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
        public const Int32 GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
        public const Int32 GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
        public const Int32 GL_MAT_EMISSION_BIT_PGI = 0x00800000;
        public const Int32 GL_MAT_SHININESS_BIT_PGI = 0x02000000;
        public const Int32 GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
        public const Int32 GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
        public const Int32 GL_MATRIX_EXT = 0x87C0;
        public const Int32 GL_MATRIX_INDEX_ARRAY_ARB = 0x8844;
        public const Int32 GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849;
        public const Int32 GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846;
        public const Int32 GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848;
        public const Int32 GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847;
        public const Int32 GL_MATRIX_MODE = 0x0BA0;
        public const Int32 GL_MATRIX_PALETTE_ARB = 0x8840;
        public const Int32 GL_MATRIX0_ARB = 0x88C0;
        public const Int32 GL_MATRIX0_NV = 0x8630;
        public const Int32 GL_MATRIX1_ARB = 0x88C1;
        public const Int32 GL_MATRIX1_NV = 0x8631;
        public const Int32 GL_MATRIX10_ARB = 0x88CA;
        public const Int32 GL_MATRIX11_ARB = 0x88CB;
        public const Int32 GL_MATRIX12_ARB = 0x88CC;
        public const Int32 GL_MATRIX13_ARB = 0x88CD;
        public const Int32 GL_MATRIX14_ARB = 0x88CE;
        public const Int32 GL_MATRIX15_ARB = 0x88CF;
        public const Int32 GL_MATRIX16_ARB = 0x88D0;
        public const Int32 GL_MATRIX17_ARB = 0x88D1;
        public const Int32 GL_MATRIX18_ARB = 0x88D2;
        public const Int32 GL_MATRIX19_ARB = 0x88D3;
        public const Int32 GL_MATRIX2_ARB = 0x88C2;
        public const Int32 GL_MATRIX2_NV = 0x8632;
        public const Int32 GL_MATRIX20_ARB = 0x88D4;
        public const Int32 GL_MATRIX21_ARB = 0x88D5;
        public const Int32 GL_MATRIX22_ARB = 0x88D6;
        public const Int32 GL_MATRIX23_ARB = 0x88D7;
        public const Int32 GL_MATRIX24_ARB = 0x88D8;
        public const Int32 GL_MATRIX25_ARB = 0x88D9;
        public const Int32 GL_MATRIX26_ARB = 0x88DA;
        public const Int32 GL_MATRIX27_ARB = 0x88DB;
        public const Int32 GL_MATRIX28_ARB = 0x88DC;
        public const Int32 GL_MATRIX29_ARB = 0x88DD;
        public const Int32 GL_MATRIX3_ARB = 0x88C3;
        public const Int32 GL_MATRIX3_NV = 0x8633;
        public const Int32 GL_MATRIX30_ARB = 0x88DE;
        public const Int32 GL_MATRIX31_ARB = 0x88DF;
        public const Int32 GL_MATRIX4_ARB = 0x88C4;
        public const Int32 GL_MATRIX4_NV = 0x8634;
        public const Int32 GL_MATRIX5_ARB = 0x88C5;
        public const Int32 GL_MATRIX5_NV = 0x8635;
        public const Int32 GL_MATRIX6_ARB = 0x88C6;
        public const Int32 GL_MATRIX6_NV = 0x8636;
        public const Int32 GL_MATRIX7_ARB = 0x88C7;
        public const Int32 GL_MATRIX7_NV = 0x8637;
        public const Int32 GL_MATRIX8_ARB = 0x88C8;
        public const Int32 GL_MATRIX9_ARB = 0x88C9;
        public const Int32 GL_MAX = 0x8008;
        public const Int32 GL_MAX_3D_TEXTURE_SIZE = 0x8073;
        public const Int32 GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
        public const Int32 GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138;
        public const Int32 GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405;
        public const Int32 GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF;
        public const Int32 GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
        public const Int32 GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
        public const Int32 GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
        public const Int32 GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
        public const Int32 GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
        public const Int32 GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED;
        public const Int32 GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
        public const Int32 GL_MAX_CLIP_PLANES = 0x0D32;
        public const Int32 GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177;
        public const Int32 GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178;
        public const Int32 GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF;
        public const Int32 GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3;
        public const Int32 GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
        public const Int32 GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
        public const Int32 GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D;
        public const Int32 GL_MAX_CONVOLUTION_HEIGHT = 0x801B;
        public const Int32 GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B;
        public const Int32 GL_MAX_CONVOLUTION_WIDTH = 0x801A;
        public const Int32 GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A;
        public const Int32 GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
        public const Int32 GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C;
        public const Int32 GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C;
        public const Int32 GL_MAX_DEFORMATION_ORDER_SGIX = 0x8197;
        public const Int32 GL_MAX_DRAW_BUFFERS = 0x8824;
        public const Int32 GL_MAX_DRAW_BUFFERS_ARB = 0x8824;
        public const Int32 GL_MAX_DRAW_BUFFERS_ATI = 0x8824;
        public const Int32 GL_MAX_ELEMENTS_INDICES = 0x80E9;
        public const Int32 GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9;
        public const Int32 GL_MAX_ELEMENTS_VERTICES = 0x80E8;
        public const Int32 GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8;
        public const Int32 GL_MAX_EVAL_ORDER = 0x0D30;
        public const Int32 GL_MAX_EXT = 0x8008;
        public const Int32 GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C;
        public const Int32 GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3;
        public const Int32 GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404;
        public const Int32 GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868;
        public const Int32 GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
        public const Int32 GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49;
        public const Int32 GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D;
        public const Int32 GL_MAX_GENERAL_COMBINERS_NV = 0x854D;
        public const Int32 GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4;
        public const Int32 GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0;
        public const Int32 GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29;
        public const Int32 GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1;
        public const Int32 GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF;
        public const Int32 GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD;
        public const Int32 GL_MAX_LIGHTS = 0x0D31;
        public const Int32 GL_MAX_LIST_NESTING = 0x0B31;
        public const Int32 GL_MAX_MAP_TESSELLATION_NV = 0x86D6;
        public const Int32 GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841;
        public const Int32 GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
        public const Int32 GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11;
        public const Int32 GL_MAX_NAME_STACK_DEPTH = 0x0D37;
        public const Int32 GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA;
        public const Int32 GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD;
        public const Int32 GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC;
        public const Int32 GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE;
        public const Int32 GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB;
        public const Int32 GL_MAX_PALETTE_MATRICES_ARB = 0x8842;
        public const Int32 GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
        public const Int32 GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337;
        public const Int32 GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1;
        public const Int32 GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1;
        public const Int32 GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B;
        public const Int32 GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908;
        public const Int32 GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD;
        public const Int32 GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5;
        public const Int32 GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5;
        public const Int32 GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4;
        public const Int32 GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5;
        public const Int32 GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6;
        public const Int32 GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6;
        public const Int32 GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1;
        public const Int32 GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4;
        public const Int32 GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8;
        public const Int32 GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7;
        public const Int32 GL_MAX_PROGRAM_MATRICES_ARB = 0x862F;
        public const Int32 GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E;
        public const Int32 GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3;
        public const Int32 GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E;
        public const Int32 GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF;
        public const Int32 GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3;
        public const Int32 GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB;
        public const Int32 GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7;
        public const Int32 GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810;
        public const Int32 GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F;
        public const Int32 GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27;
        public const Int32 GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0;
        public const Int32 GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1;
        public const Int32 GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9;
        public const Int32 GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909;
        public const Int32 GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5;
        public const Int32 GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D;
        public const Int32 GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C;
        public const Int32 GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905;
        public const Int32 GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28;
        public const Int32 GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
        public const Int32 GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7;
        public const Int32 GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8;
        public const Int32 GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8;
        public const Int32 GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8;
        public const Int32 GL_MAX_SAMPLES_EXT = 0x8D57;
        public const Int32 GL_MAX_SHININESS_NV = 0x8504;
        public const Int32 GL_MAX_SPOT_EXPONENT_NV = 0x8505;
        public const Int32 GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B;
        public const Int32 GL_MAX_TEXTURE_COORDS = 0x8871;
        public const Int32 GL_MAX_TEXTURE_COORDS_ARB = 0x8871;
        public const Int32 GL_MAX_TEXTURE_COORDS_NV = 0x8871;
        public const Int32 GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
        public const Int32 GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872;
        public const Int32 GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872;
        public const Int32 GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
        public const Int32 GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD;
        public const Int32 GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
        public const Int32 GL_MAX_TEXTURE_SIZE = 0x0D33;
        public const Int32 GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
        public const Int32 GL_MAX_TEXTURE_UNITS = 0x84E2;
        public const Int32 GL_MAX_TEXTURE_UNITS_ARB = 0x84E2;
        public const Int32 GL_MAX_TRACK_MATRICES_NV = 0x862F;
        public const Int32 GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E;
        public const Int32 GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_ATTRIBS_NV = 0x8C8A;
        public const Int32 GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B;
        public const Int32 GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80;
        public const Int32 GL_MAX_VARYING_COMPONENTS_EXT = 0x8B4B;
        public const Int32 GL_MAX_VARYING_FLOATS = 0x8B4B;
        public const Int32 GL_MAX_VARYING_FLOATS_ARB = 0x8B4B;
        public const Int32 GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520;
        public const Int32 GL_MAX_VERTEX_ATTRIBS = 0x8869;
        public const Int32 GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869;
        public const Int32 GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2;
        public const Int32 GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
        public const Int32 GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5;
        public const Int32 GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7;
        public const Int32 GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8;
        public const Int32 GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9;
        public const Int32 GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6;
        public const Int32 GL_MAX_VERTEX_STREAMS_ATI = 0x876B;
        public const Int32 GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
        public const Int32 GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C;
        public const Int32 GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
        public const Int32 GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A;
        public const Int32 GL_MAX_VERTEX_UNITS_ARB = 0x86A4;
        public const Int32 GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE;
        public const Int32 GL_MAX_VIEWPORT_DIMS = 0x0D3A;
        public const Int32 GL_MIN = 0x8007;
        public const Int32 GL_MIN_EXT = 0x8007;
        public const Int32 GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904;
        public const Int32 GL_MINMAX = 0x802E;
        public const Int32 GL_MINMAX_EXT = 0x802E;
        public const Int32 GL_MINMAX_FORMAT = 0x802F;
        public const Int32 GL_MINMAX_FORMAT_EXT = 0x802F;
        public const Int32 GL_MINMAX_SINK = 0x8030;
        public const Int32 GL_MINMAX_SINK_EXT = 0x8030;
        public const Int32 GL_MIRROR_CLAMP_ATI = 0x8742;
        public const Int32 GL_MIRROR_CLAMP_EXT = 0x8742;
        public const Int32 GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912;
        public const Int32 GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743;
        public const Int32 GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743;
        public const Int32 GL_MIRRORED_REPEAT = 0x8370;
        public const Int32 GL_MIRRORED_REPEAT_ARB = 0x8370;
        public const Int32 GL_MIRRORED_REPEAT_IBM = 0x8370;
        public const Int32 GL_MODELVIEW = 0x1700;
        public const Int32 GL_MODELVIEW_MATRIX = 0x0BA6;
        public const Int32 GL_MODELVIEW_PROJECTION_NV = 0x8629;
        public const Int32 GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
        public const Int32 GL_MODELVIEW0_ARB = 0x1700;
        public const Int32 GL_MODELVIEW0_EXT = GL_MODELVIEW;
        public const Int32 GL_MODELVIEW0_MATRIX_EXT = GL_MODELVIEW_MATRIX;
        public const Int32 GL_MODELVIEW0_STACK_DEPTH_EXT = GL_MODELVIEW_STACK_DEPTH;
        public const Int32 GL_MODELVIEW1_ARB = 0x850A;
        public const Int32 GL_MODELVIEW1_EXT = 0x850A;
        public const Int32 GL_MODELVIEW1_MATRIX_EXT = 0x8506;
        public const Int32 GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502;
        public const Int32 GL_MODELVIEW10_ARB = 0x872A;
        public const Int32 GL_MODELVIEW11_ARB = 0x872B;
        public const Int32 GL_MODELVIEW12_ARB = 0x872C;
        public const Int32 GL_MODELVIEW13_ARB = 0x872D;
        public const Int32 GL_MODELVIEW14_ARB = 0x872E;
        public const Int32 GL_MODELVIEW15_ARB = 0x872F;
        public const Int32 GL_MODELVIEW16_ARB = 0x8730;
        public const Int32 GL_MODELVIEW17_ARB = 0x8731;
        public const Int32 GL_MODELVIEW18_ARB = 0x8732;
        public const Int32 GL_MODELVIEW19_ARB = 0x8733;
        public const Int32 GL_MODELVIEW2_ARB = 0x8722;
        public const Int32 GL_MODELVIEW20_ARB = 0x8734;
        public const Int32 GL_MODELVIEW21_ARB = 0x8735;
        public const Int32 GL_MODELVIEW22_ARB = 0x8736;
        public const Int32 GL_MODELVIEW23_ARB = 0x8737;
        public const Int32 GL_MODELVIEW24_ARB = 0x8738;
        public const Int32 GL_MODELVIEW25_ARB = 0x8739;
        public const Int32 GL_MODELVIEW26_ARB = 0x873A;
        public const Int32 GL_MODELVIEW27_ARB = 0x873B;
        public const Int32 GL_MODELVIEW28_ARB = 0x873C;
        public const Int32 GL_MODELVIEW29_ARB = 0x873D;
        public const Int32 GL_MODELVIEW3_ARB = 0x8723;
        public const Int32 GL_MODELVIEW30_ARB = 0x873E;
        public const Int32 GL_MODELVIEW31_ARB = 0x873F;
        public const Int32 GL_MODELVIEW4_ARB = 0x8724;
        public const Int32 GL_MODELVIEW5_ARB = 0x8725;
        public const Int32 GL_MODELVIEW6_ARB = 0x8726;
        public const Int32 GL_MODELVIEW7_ARB = 0x8727;
        public const Int32 GL_MODELVIEW8_ARB = 0x8728;
        public const Int32 GL_MODELVIEW9_ARB = 0x8729;
        public const Int32 GL_MODULATE = 0x2100;
        public const Int32 GL_MODULATE_ADD_ATI = 0x8744;
        public const Int32 GL_MODULATE_SIGNED_ADD_ATI = 0x8745;
        public const Int32 GL_MODULATE_SUBTRACT_ATI = 0x8746;
        public const Int32 GL_MOV_ATI = 0x8961;
        public const Int32 GL_MUL_ATI = 0x8964;
        public const Int32 GL_MULT = 0x0103;
        public const Int32 GL_MULTISAMPLE = 0x809D;
        public const Int32 GL_MULTISAMPLE_3DFX = 0x86B2;
        public const Int32 GL_MULTISAMPLE_ARB = 0x809D;
        public const Int32 GL_MULTISAMPLE_BIT = 0x20000000;
        public const Int32 GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
        public const Int32 GL_MULTISAMPLE_BIT_ARB = 0x20000000;
        public const Int32 GL_MULTISAMPLE_BIT_EXT = 0x20000000;
        public const Int32 GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12;
        public const Int32 GL_MULTISAMPLE_EXT = 0x809D;
        public const Int32 GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
        public const Int32 GL_MULTISAMPLE_SGIS = 0x809D;
        public const Int32 GL_MVP_MATRIX_EXT = 0x87E3;
        public const Int32 GL_N3F_V3F = 0x2A25;
        public const Int32 GL_NAME_STACK_DEPTH = 0x0D70;
        public const Int32 GL_NAND = 0x150E;
        public const Int32 GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
        public const Int32 GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
        public const Int32 GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202;
        public const Int32 GL_NEAREST = 0x2600;
        public const Int32 GL_NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E;
        public const Int32 GL_NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D;
        public const Int32 GL_NEAREST_MIPMAP_LINEAR = 0x2702;
        public const Int32 GL_NEAREST_MIPMAP_NEAREST = 0x2700;
        public const Int32 GL_NEGATE_BIT_ATI = 0x00000004;
        public const Int32 GL_NEGATIVE_ONE_EXT = 0x87DF;
        public const Int32 GL_NEGATIVE_W_EXT = 0x87DC;
        public const Int32 GL_NEGATIVE_X_EXT = 0x87D9;
        public const Int32 GL_NEGATIVE_Y_EXT = 0x87DA;
        public const Int32 GL_NEGATIVE_Z_EXT = 0x87DB;
        public const Int32 GL_NEVER = 0x0200;
        public const Int32 GL_NICEST = 0x1102;
        public const Int32 GL_NO_ERROR = 0;
        public const Int32 GL_NONE = 0;
        public const Int32 GL_NOOP = 0x1505;
        public const Int32 GL_NOR = 0x1508;
        public const Int32 GL_NORMAL_ARRAY = 0x8075;
        public const Int32 GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
        public const Int32 GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897;
        public const Int32 GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
        public const Int32 GL_NORMAL_ARRAY_EXT = 0x8075;
        public const Int32 GL_NORMAL_ARRAY_LIST_IBM = 103071;
        public const Int32 GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;
        public const Int32 GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6;
        public const Int32 GL_NORMAL_ARRAY_POINTER = 0x808F;
        public const Int32 GL_NORMAL_ARRAY_POINTER_EXT = 0x808F;
        public const Int32 GL_NORMAL_ARRAY_STRIDE = 0x807F;
        public const Int32 GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F;
        public const Int32 GL_NORMAL_ARRAY_TYPE = 0x807E;
        public const Int32 GL_NORMAL_ARRAY_TYPE_EXT = 0x807E;
        public const Int32 GL_NORMAL_BIT_PGI = 0x08000000;
        public const Int32 GL_NORMAL_MAP = 0x8511;
        public const Int32 GL_NORMAL_MAP_ARB = 0x8511;
        public const Int32 GL_NORMAL_MAP_EXT = 0x8511;
        public const Int32 GL_NORMAL_MAP_NV = 0x8511;
        public const Int32 GL_NORMALIZE = 0x0BA1;
        public const Int32 GL_NORMALIZED_RANGE_EXT = 0x87E0;
        public const Int32 GL_NOTEQUAL = 0x0205;
        public const Int32 GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
        public const Int32 GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2;
        public const Int32 GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896F;
        public const Int32 GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896E;
        public const Int32 GL_NUM_GENERAL_COMBINERS_NV = 0x854E;
        public const Int32 GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973;
        public const Int32 GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971;
        public const Int32 GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972;
        public const Int32 GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974;
        public const Int32 GL_NUM_PASSES_ATI = 0x8970;
        public const Int32 GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A;
        public const Int32 GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89;
        public const Int32 GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87;
        public const Int32 GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86;
        public const Int32 GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85;
        public const Int32 GL_OBJECT_BUFFER_SIZE_ATI = 0x8764;
        public const Int32 GL_OBJECT_BUFFER_USAGE_ATI = 0x8765;
        public const Int32 GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81;
        public const Int32 GL_OBJECT_DELETE_STATUS_ARB = 0x8B80;
        public const Int32 GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3;
        public const Int32 GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1;
        public const Int32 GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84;
        public const Int32 GL_OBJECT_LINE_SGIS = 0x81F7;
        public const Int32 GL_OBJECT_LINEAR = 0x2401;
        public const Int32 GL_OBJECT_LINK_STATUS_ARB = 0x8B82;
        public const Int32 GL_OBJECT_PLANE = 0x2501;
        public const Int32 GL_OBJECT_POINT_SGIS = 0x81F5;
        public const Int32 GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88;
        public const Int32 GL_OBJECT_SUBTYPE_ARB = 0x8B4F;
        public const Int32 GL_OBJECT_TYPE_ARB = 0x8B4E;
        public const Int32 GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83;
        public const Int32 GL_OCCLUSION_TEST_HP = 0x8165;
        public const Int32 GL_OCCLUSION_TEST_RESULT_HP = 0x8166;
        public const Int32 GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856;
        public const Int32 GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857;
        public const Int32 GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854;
        public const Int32 GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855;
        public const Int32 GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850;
        public const Int32 GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851;
        public const Int32 GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852;
        public const Int32 GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853;
        public const Int32 GL_OFFSET_TEXTURE_2D_BIAS_NV = GL_OFFSET_TEXTURE_BIAS_NV;
        public const Int32 GL_OFFSET_TEXTURE_2D_MATRIX_NV = GL_OFFSET_TEXTURE_MATRIX_NV;
        public const Int32 GL_OFFSET_TEXTURE_2D_NV = 0x86E8;
        public const Int32 GL_OFFSET_TEXTURE_2D_SCALE_NV = GL_OFFSET_TEXTURE_SCALE_NV;
        public const Int32 GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3;
        public const Int32 GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1;
        public const Int32 GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C;
        public const Int32 GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D;
        public const Int32 GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2;
        public const Int32 GL_ONE = 1;
        public const Int32 GL_ONE_EXT = 0x87DE;
        public const Int32 GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
        public const Int32 GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
        public const Int32 GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
        public const Int32 GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
        public const Int32 GL_ONE_MINUS_DST_ALPHA = 0x0305;
        public const Int32 GL_ONE_MINUS_DST_COLOR = 0x0307;
        public const Int32 GL_ONE_MINUS_SRC_ALPHA = 0x0303;
        public const Int32 GL_ONE_MINUS_SRC_COLOR = 0x0301;
        public const Int32 GL_OP_ADD_EXT = 0x8787;
        public const Int32 GL_OP_CLAMP_EXT = 0x878E;
        public const Int32 GL_OP_CROSS_PRODUCT_EXT = 0x8797;
        public const Int32 GL_OP_DOT3_EXT = 0x8784;
        public const Int32 GL_OP_DOT4_EXT = 0x8785;
        public const Int32 GL_OP_EXP_BASE_2_EXT = 0x8791;
        public const Int32 GL_OP_FLOOR_EXT = 0x878F;
        public const Int32 GL_OP_FRAC_EXT = 0x8789;
        public const Int32 GL_OP_INDEX_EXT = 0x8782;
        public const Int32 GL_OP_LOG_BASE_2_EXT = 0x8792;
        public const Int32 GL_OP_MADD_EXT = 0x8788;
        public const Int32 GL_OP_MAX_EXT = 0x878A;
        public const Int32 GL_OP_MIN_EXT = 0x878B;
        public const Int32 GL_OP_MOV_EXT = 0x8799;
        public const Int32 GL_OP_MUL_EXT = 0x8786;
        public const Int32 GL_OP_MULTIPLY_MATRIX_EXT = 0x8798;
        public const Int32 GL_OP_NEGATE_EXT = 0x8783;
        public const Int32 GL_OP_POWER_EXT = 0x8793;
        public const Int32 GL_OP_RECIP_EXT = 0x8794;
        public const Int32 GL_OP_RECIP_SQRT_EXT = 0x8795;
        public const Int32 GL_OP_ROUND_EXT = 0x8790;
        public const Int32 GL_OP_SET_GE_EXT = 0x878C;
        public const Int32 GL_OP_SET_LT_EXT = 0x878D;
        public const Int32 GL_OP_SUB_EXT = 0x8796;
        public const Int32 GL_OPERAND0_ALPHA = 0x8598;
        public const Int32 GL_OPERAND0_ALPHA_ARB = 0x8598;
        public const Int32 GL_OPERAND0_ALPHA_EXT = 0x8598;
        public const Int32 GL_OPERAND0_RGB = 0x8590;
        public const Int32 GL_OPERAND0_RGB_ARB = 0x8590;
        public const Int32 GL_OPERAND0_RGB_EXT = 0x8590;
        public const Int32 GL_OPERAND1_ALPHA = 0x8599;
        public const Int32 GL_OPERAND1_ALPHA_ARB = 0x8599;
        public const Int32 GL_OPERAND1_ALPHA_EXT = 0x8599;
        public const Int32 GL_OPERAND1_RGB = 0x8591;
        public const Int32 GL_OPERAND1_RGB_ARB = 0x8591;
        public const Int32 GL_OPERAND1_RGB_EXT = 0x8591;
        public const Int32 GL_OPERAND2_ALPHA = 0x859A;
        public const Int32 GL_OPERAND2_ALPHA_ARB = 0x859A;
        public const Int32 GL_OPERAND2_ALPHA_EXT = 0x859A;
        public const Int32 GL_OPERAND2_RGB = 0x8592;
        public const Int32 GL_OPERAND2_RGB_ARB = 0x8592;
        public const Int32 GL_OPERAND2_RGB_EXT = 0x8592;
        public const Int32 GL_OPERAND3_ALPHA_NV = 0x859B;
        public const Int32 GL_OPERAND3_RGB_NV = 0x8593;
        public const Int32 GL_OR = 0x1507;
        public const Int32 GL_OR_INVERTED = 0x150D;
        public const Int32 GL_OR_REVERSE = 0x150B;
        public const Int32 GL_ORDER = 0x0A01;
        public const Int32 GL_OUT_OF_MEMORY = 0x0505;
        public const Int32 GL_OUTPUT_COLOR0_EXT = 0x879B;
        public const Int32 GL_OUTPUT_COLOR1_EXT = 0x879C;
        public const Int32 GL_OUTPUT_FOG_EXT = 0x87BD;
        public const Int32 GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D;
        public const Int32 GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E;
        public const Int32 GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7;
        public const Int32 GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8;
        public const Int32 GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9;
        public const Int32 GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA;
        public const Int32 GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB;
        public const Int32 GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC;
        public const Int32 GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD;
        public const Int32 GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE;
        public const Int32 GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF;
        public const Int32 GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0;
        public const Int32 GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F;
        public const Int32 GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1;
        public const Int32 GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2;
        public const Int32 GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3;
        public const Int32 GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4;
        public const Int32 GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5;
        public const Int32 GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6;
        public const Int32 GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7;
        public const Int32 GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8;
        public const Int32 GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9;
        public const Int32 GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA;
        public const Int32 GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0;
        public const Int32 GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB;
        public const Int32 GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC;
        public const Int32 GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1;
        public const Int32 GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2;
        public const Int32 GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3;
        public const Int32 GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4;
        public const Int32 GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5;
        public const Int32 GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6;
        public const Int32 GL_OUTPUT_VERTEX_EXT = 0x879A;
        public const Int32 GL_PACK_ALIGNMENT = 0x0D05;
        public const Int32 GL_PACK_CMYK_HINT_EXT = 0x800E;
        public const Int32 GL_PACK_IMAGE_DEPTH_SGIS = 0x8131;
        public const Int32 GL_PACK_IMAGE_HEIGHT = 0x806C;
        public const Int32 GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
        public const Int32 GL_PACK_INVERT_MESA = 0x8758;
        public const Int32 GL_PACK_LSB_FIRST = 0x0D01;
        public const Int32 GL_PACK_RESAMPLE_OML = 0x8984;
        public const Int32 GL_PACK_RESAMPLE_SGIX = 0x842C;
        public const Int32 GL_PACK_ROW_LENGTH = 0x0D02;
        public const Int32 GL_PACK_SKIP_IMAGES = 0x806B;
        public const Int32 GL_PACK_SKIP_IMAGES_EXT = 0x806B;
        public const Int32 GL_PACK_SKIP_PIXELS = 0x0D04;
        public const Int32 GL_PACK_SKIP_ROWS = 0x0D03;
        public const Int32 GL_PACK_SKIP_VOLUMES_SGIS = 0x8130;
        public const Int32 GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0;
        public const Int32 GL_PACK_SWAP_BYTES = 0x0D00;
        public const Int32 GL_PARALLEL_ARRAYS_INTEL = 0x83F4;
        public const Int32 GL_PASS_THROUGH_NV = 0x86E6;
        public const Int32 GL_PASS_THROUGH_TOKEN = 0x0700;
        public const Int32 GL_PER_STAGE_CONSTANTS_NV = 0x8535;
        public const Int32 GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
        public const Int32 GL_PERTURB_EXT = 0x85AE;
        public const Int32 GL_PHONG_HINT_WIN = 0x80EB;
        public const Int32 GL_PHONG_WIN = 0x80EA;
        public const Int32 GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867;
        public const Int32 GL_PIXEL_COUNT_NV = 0x8866;
        public const Int32 GL_PIXEL_COUNTER_BITS_NV = 0x8864;
        public const Int32 GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333;
        public const Int32 GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355;
        public const Int32 GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354;
        public const Int32 GL_PIXEL_GROUP_COLOR_SGIS = 0x8356;
        public const Int32 GL_PIXEL_MAG_FILTER_EXT = 0x8331;
        public const Int32 GL_PIXEL_MAP_A_TO_A = 0x0C79;
        public const Int32 GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
        public const Int32 GL_PIXEL_MAP_B_TO_B = 0x0C78;
        public const Int32 GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
        public const Int32 GL_PIXEL_MAP_G_TO_G = 0x0C77;
        public const Int32 GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
        public const Int32 GL_PIXEL_MAP_I_TO_A = 0x0C75;
        public const Int32 GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
        public const Int32 GL_PIXEL_MAP_I_TO_B = 0x0C74;
        public const Int32 GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
        public const Int32 GL_PIXEL_MAP_I_TO_G = 0x0C73;
        public const Int32 GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
        public const Int32 GL_PIXEL_MAP_I_TO_I = 0x0C70;
        public const Int32 GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
        public const Int32 GL_PIXEL_MAP_I_TO_R = 0x0C72;
        public const Int32 GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
        public const Int32 GL_PIXEL_MAP_R_TO_R = 0x0C76;
        public const Int32 GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
        public const Int32 GL_PIXEL_MAP_S_TO_S = 0x0C71;
        public const Int32 GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
        public const Int32 GL_PIXEL_MIN_FILTER_EXT = 0x8332;
        public const Int32 GL_PIXEL_MODE_BIT = 0x00000020;
        public const Int32 GL_PIXEL_PACK_BUFFER = 0x88EB;
        public const Int32 GL_PIXEL_PACK_BUFFER_ARB = 0x88EB;
        public const Int32 GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
        public const Int32 GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED;
        public const Int32 GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED;
        public const Int32 GL_PIXEL_PACK_BUFFER_EXT = 0x88EB;
        public const Int32 GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3;
        public const Int32 GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4;
        public const Int32 GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2;
        public const Int32 GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = 0x8189;
        public const Int32 GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = 0x818A;
        public const Int32 GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = 0x8188;
        public const Int32 GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = 0x8187;
        public const Int32 GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B;
        public const Int32 GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = 0x8184;
        public const Int32 GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = 0x8186;
        public const Int32 GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = 0x8185;
        public const Int32 GL_PIXEL_TEX_GEN_SGIX = 0x8139;
        public const Int32 GL_PIXEL_TEXTURE_SGIS = 0x8353;
        public const Int32 GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E;
        public const Int32 GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F;
        public const Int32 GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145;
        public const Int32 GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144;
        public const Int32 GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143;
        public const Int32 GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142;
        public const Int32 GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141;
        public const Int32 GL_PIXEL_TILE_WIDTH_SGIX = 0x8140;
        public const Int32 GL_PIXEL_TRANSFORM_2D_EXT = 0x8330;
        public const Int32 GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338;
        public const Int32 GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336;
        public const Int32 GL_PIXEL_UNPACK_BUFFER = 0x88EC;
        public const Int32 GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC;
        public const Int32 GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
        public const Int32 GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF;
        public const Int32 GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF;
        public const Int32 GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC;
        public const Int32 GL_PN_TRIANGLES_ATI = 0x87F0;
        public const Int32 GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3;
        public const Int32 GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7;
        public const Int32 GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8;
        public const Int32 GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2;
        public const Int32 GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6;
        public const Int32 GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5;
        public const Int32 GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4;
        public const Int32 GL_POINT = 0x1B00;
        public const Int32 GL_POINT_BIT = 0x00000002;
        public const Int32 GL_POINT_DISTANCE_ATTENUATION = 0x8129;
        public const Int32 GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129;
        public const Int32 GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
        public const Int32 GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128;
        public const Int32 GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128;
        public const Int32 GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128;
        public const Int32 GL_POINT_SIZE = 0x0B11;
        public const Int32 GL_POINT_SIZE_GRANULARITY = 0x0B13;
        public const Int32 GL_POINT_SIZE_MAX = 0x8127;
        public const Int32 GL_POINT_SIZE_MAX_ARB = 0x8127;
        public const Int32 GL_POINT_SIZE_MAX_EXT = 0x8127;
        public const Int32 GL_POINT_SIZE_MAX_SGIS = 0x8127;
        public const Int32 GL_POINT_SIZE_MIN = 0x8126;
        public const Int32 GL_POINT_SIZE_MIN_ARB = 0x8126;
        public const Int32 GL_POINT_SIZE_MIN_EXT = 0x8126;
        public const Int32 GL_POINT_SIZE_MIN_SGIS = 0x8126;
        public const Int32 GL_POINT_SIZE_RANGE = 0x0B12;
        public const Int32 GL_POINT_SMOOTH = 0x0B10;
        public const Int32 GL_POINT_SMOOTH_HINT = 0x0C51;
        public const Int32 GL_POINT_SPRITE = 0x8861;
        public const Int32 GL_POINT_SPRITE_ARB = 0x8861;
        public const Int32 GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
        public const Int32 GL_POINT_SPRITE_NV = 0x8861;
        public const Int32 GL_POINT_SPRITE_R_MODE_NV = 0x8863;
        public const Int32 GL_POINT_TOKEN = 0x0701;
        public const Int32 GL_POINTS = 0x0000;
        public const Int32 GL_POLYGON = 0x0009;
        public const Int32 GL_POLYGON_BIT = 0x00000008;
        public const Int32 GL_POLYGON_MODE = 0x0B40;
        public const Int32 GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
        public const Int32 GL_POLYGON_OFFSET_EXT = 0x8037;
        public const Int32 GL_POLYGON_OFFSET_FACTOR = 0x8038;
        public const Int32 GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038;
        public const Int32 GL_POLYGON_OFFSET_FILL = 0x8037;
        public const Int32 GL_POLYGON_OFFSET_LINE = 0x2A02;
        public const Int32 GL_POLYGON_OFFSET_POINT = 0x2A01;
        public const Int32 GL_POLYGON_OFFSET_UNITS = 0x2A00;
        public const Int32 GL_POLYGON_SMOOTH = 0x0B41;
        public const Int32 GL_POLYGON_SMOOTH_HINT = 0x0C53;
        public const Int32 GL_POLYGON_STIPPLE = 0x0B42;
        public const Int32 GL_POLYGON_STIPPLE_BIT = 0x00000010;
        public const Int32 GL_POLYGON_TOKEN = 0x0703;
        public const Int32 GL_POSITION = 0x1203;
        public const Int32 GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
        public const Int32 GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
        public const Int32 GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
        public const Int32 GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
        public const Int32 GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
        public const Int32 GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
        public const Int32 GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
        public const Int32 GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
        public const Int32 GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
        public const Int32 GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
        public const Int32 GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
        public const Int32 GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
        public const Int32 GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
        public const Int32 GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
        public const Int32 GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
        public const Int32 GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
        public const Int32 GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
        public const Int32 GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
        public const Int32 GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
        public const Int32 GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
        public const Int32 GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
        public const Int32 GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
        public const Int32 GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
        public const Int32 GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
        public const Int32 GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
        public const Int32 GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
        public const Int32 GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
        public const Int32 GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
        public const Int32 GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
        public const Int32 GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
        public const Int32 GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
        public const Int32 GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
        public const Int32 GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
        public const Int32 GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
        public const Int32 GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
        public const Int32 GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
        public const Int32 GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162;
        public const Int32 GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
        public const Int32 GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
        public const Int32 GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
        public const Int32 GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
        public const Int32 GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
        public const Int32 GL_PRESERVE_ATI = 0x8762;
        public const Int32 GL_PREVIOUS = 0x8578;
        public const Int32 GL_PREVIOUS_ARB = 0x8578;
        public const Int32 GL_PREVIOUS_EXT = 0x8578;
        public const Int32 GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4;
        public const Int32 GL_PRIMARY_COLOR = 0x8577;
        public const Int32 GL_PRIMARY_COLOR_ARB = 0x8577;
        public const Int32 GL_PRIMARY_COLOR_EXT = 0x8577;
        public const Int32 GL_PRIMARY_COLOR_NV = 0x852C;
        public const Int32 GL_PRIMITIVE_ID_NV = 0x8C7C;
        public const Int32 GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559;
        public const Int32 GL_PRIMITIVE_RESTART_NV = 0x8558;
        public const Int32 GL_PRIMITIVES_GENERATED_NV = 0x8C87;
        public const Int32 GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0;
        public const Int32 GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805;
        public const Int32 GL_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906;
        public const Int32 GL_PROGRAM_ATTRIBS_ARB = 0x88AC;
        public const Int32 GL_PROGRAM_BINDING_ARB = 0x8677;
        public const Int32 GL_PROGRAM_ERROR_POSITION_ARB = 0x864B;
        public const Int32 GL_PROGRAM_ERROR_POSITION_NV = 0x864B;
        public const Int32 GL_PROGRAM_ERROR_STRING_ARB = 0x8874;
        public const Int32 GL_PROGRAM_ERROR_STRING_NV = 0x8874;
        public const Int32 GL_PROGRAM_FORMAT_ARB = 0x8876;
        public const Int32 GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875;
        public const Int32 GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0;
        public const Int32 GL_PROGRAM_LENGTH_ARB = 0x8627;
        public const Int32 GL_PROGRAM_LENGTH_NV = 0x8627;
        public const Int32 GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2;
        public const Int32 GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808;
        public const Int32 GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE;
        public const Int32 GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2;
        public const Int32 GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA;
        public const Int32 GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6;
        public const Int32 GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A;
        public const Int32 GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809;
        public const Int32 GL_PROGRAM_OBJECT_ARB = 0x8B40;
        public const Int32 GL_PROGRAM_PARAMETER_NV = 0x8644;
        public const Int32 GL_PROGRAM_PARAMETERS_ARB = 0x88A8;
        public const Int32 GL_PROGRAM_POINT_SIZE_EXT = 0x8642;
        public const Int32 GL_PROGRAM_RESIDENT_NV = 0x8647;
        public const Int32 GL_PROGRAM_RESULT_COMPONENTS_NV = 0x8907;
        public const Int32 GL_PROGRAM_STRING_ARB = 0x8628;
        public const Int32 GL_PROGRAM_STRING_NV = 0x8628;
        public const Int32 GL_PROGRAM_TARGET_NV = 0x8646;
        public const Int32 GL_PROGRAM_TEMPORARIES_ARB = 0x88A4;
        public const Int32 GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807;
        public const Int32 GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806;
        public const Int32 GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6;
        public const Int32 GL_PROJECTION = 0x1701;
        public const Int32 GL_PROJECTION_MATRIX = 0x0BA7;
        public const Int32 GL_PROJECTION_STACK_DEPTH = 0x0BA4;
        public const Int32 GL_PROXY_COLOR_TABLE = 0x80D3;
        public const Int32 GL_PROXY_COLOR_TABLE_SGI = 0x80D3;
        public const Int32 GL_PROXY_HISTOGRAM = 0x8025;
        public const Int32 GL_PROXY_HISTOGRAM_EXT = 0x8025;
        public const Int32 GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
        public const Int32 GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5;
        public const Int32 GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
        public const Int32 GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4;
        public const Int32 GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163;
        public const Int32 GL_PROXY_TEXTURE_1D = 0x8063;
        public const Int32 GL_PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19;
        public const Int32 GL_PROXY_TEXTURE_1D_EXT = 0x8063;
        public const Int32 GL_PROXY_TEXTURE_1D_STACK_MESAX = 0x875B;
        public const Int32 GL_PROXY_TEXTURE_2D = 0x8064;
        public const Int32 GL_PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B;
        public const Int32 GL_PROXY_TEXTURE_2D_EXT = 0x8064;
        public const Int32 GL_PROXY_TEXTURE_2D_STACK_MESAX = 0x875C;
        public const Int32 GL_PROXY_TEXTURE_3D = 0x8070;
        public const Int32 GL_PROXY_TEXTURE_3D_EXT = 0x8070;
        public const Int32 GL_PROXY_TEXTURE_4D_SGIS = 0x8135;
        public const Int32 GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD;
        public const Int32 GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
        public const Int32 GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B;
        public const Int32 GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B;
        public const Int32 GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7;
        public const Int32 GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7;
        public const Int32 GL_Q = 0x2003;
        public const Int32 GL_QUAD_ALPHA4_SGIS = 0x811E;
        public const Int32 GL_QUAD_ALPHA8_SGIS = 0x811F;
        public const Int32 GL_QUAD_INTENSITY4_SGIS = 0x8122;
        public const Int32 GL_QUAD_INTENSITY8_SGIS = 0x8123;
        public const Int32 GL_QUAD_LUMINANCE4_SGIS = 0x8120;
        public const Int32 GL_QUAD_LUMINANCE8_SGIS = 0x8121;
        public const Int32 GL_QUAD_MESH_SUN = 0x8614;
        public const Int32 GL_QUAD_STRIP = 0x0008;
        public const Int32 GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125;
        public const Int32 GL_QUADRATIC_ATTENUATION = 0x1209;
        public const Int32 GL_QUADS = 0x0007;
        public const Int32 GL_QUARTER_BIT_ATI = 0x00000010;
        public const Int32 GL_QUERY_COUNTER_BITS = 0x8864;
        public const Int32 GL_QUERY_COUNTER_BITS_ARB = 0x8864;
        public const Int32 GL_QUERY_RESULT = 0x8866;
        public const Int32 GL_QUERY_RESULT_ARB = 0x8866;
        public const Int32 GL_QUERY_RESULT_AVAILABLE = 0x8867;
        public const Int32 GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867;
        public const Int32 GL_R = 0x2002;
        public const Int32 GL_R11F_G11F_B10F_EXT = 0x8C3A;
        public const Int32 GL_R1UI_C3F_V3F_SUN = 0x85C6;
        public const Int32 GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8;
        public const Int32 GL_R1UI_C4UB_V3F_SUN = 0x85C5;
        public const Int32 GL_R1UI_N3F_V3F_SUN = 0x85C7;
        public const Int32 GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB;
        public const Int32 GL_R1UI_T2F_N3F_V3F_SUN = 0x85CA;
        public const Int32 GL_R1UI_T2F_V3F_SUN = 0x85C9;
        public const Int32 GL_R1UI_V3F_SUN = 0x85C4;
        public const Int32 GL_R3_G3_B2 = 0x2A10;
        public const Int32 GL_RASTER_POSITION_UNCLIPPED_IBM = 0x19262;
        public const Int32 GL_RASTERIZER_DISCARD_NV = 0x8C89;
        public const Int32 GL_READ_BUFFER = 0x0C02;
        public const Int32 GL_READ_FRAMEBUFFER_BINDING_EXT = GL_FRAMEBUFFER_BINDING_EXT;
        public const Int32 GL_READ_FRAMEBUFFER_EXT = 0x8CA8;
        public const Int32 GL_READ_ONLY = 0x88B8;
        public const Int32 GL_READ_ONLY_ARB = 0x88B8;
        public const Int32 GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B;
        public const Int32 GL_READ_PIXEL_DATA_RANGE_NV = 0x8879;
        public const Int32 GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D;
        public const Int32 GL_READ_WRITE = 0x88BA;
        public const Int32 GL_READ_WRITE_ARB = 0x88BA;
        public const Int32 GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
        public const Int32 GL_RED = 0x1903;
        public const Int32 GL_RED_BIAS = 0x0D15;
        public const Int32 GL_RED_BIT_ATI = 0x00000001;
        public const Int32 GL_RED_BITS = 0x0D52;
        public const Int32 GL_RED_INTEGER_EXT = 0x8D94;
        public const Int32 GL_RED_MAX_CLAMP_INGR = 0x8564;
        public const Int32 GL_RED_MIN_CLAMP_INGR = 0x8560;
        public const Int32 GL_RED_SCALE = 0x0D14;
        public const Int32 GL_REDUCE = 0x8016;
        public const Int32 GL_REDUCE_EXT = 0x8016;
        public const Int32 GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E;
        public const Int32 GL_REFERENCE_PLANE_SGIX = 0x817D;
        public const Int32 GL_REFLECTION_MAP = 0x8512;
        public const Int32 GL_REFLECTION_MAP_ARB = 0x8512;
        public const Int32 GL_REFLECTION_MAP_EXT = 0x8512;
        public const Int32 GL_REFLECTION_MAP_NV = 0x8512;
        public const Int32 GL_REG_0_ATI = 0x8921;
        public const Int32 GL_REG_1_ATI = 0x8922;
        public const Int32 GL_REG_10_ATI = 0x892B;
        public const Int32 GL_REG_11_ATI = 0x892C;
        public const Int32 GL_REG_12_ATI = 0x892D;
        public const Int32 GL_REG_13_ATI = 0x892E;
        public const Int32 GL_REG_14_ATI = 0x892F;
        public const Int32 GL_REG_15_ATI = 0x8930;
        public const Int32 GL_REG_16_ATI = 0x8931;
        public const Int32 GL_REG_17_ATI = 0x8932;
        public const Int32 GL_REG_18_ATI = 0x8933;
        public const Int32 GL_REG_19_ATI = 0x8934;
        public const Int32 GL_REG_2_ATI = 0x8923;
        public const Int32 GL_REG_20_ATI = 0x8935;
        public const Int32 GL_REG_21_ATI = 0x8936;
        public const Int32 GL_REG_22_ATI = 0x8937;
        public const Int32 GL_REG_23_ATI = 0x8938;
        public const Int32 GL_REG_24_ATI = 0x8939;
        public const Int32 GL_REG_25_ATI = 0x893A;
        public const Int32 GL_REG_26_ATI = 0x893B;
        public const Int32 GL_REG_27_ATI = 0x893C;
        public const Int32 GL_REG_28_ATI = 0x893D;
        public const Int32 GL_REG_29_ATI = 0x893E;
        public const Int32 GL_REG_3_ATI = 0x8924;
        public const Int32 GL_REG_30_ATI = 0x893F;
        public const Int32 GL_REG_31_ATI = 0x8940;
        public const Int32 GL_REG_4_ATI = 0x8925;
        public const Int32 GL_REG_5_ATI = 0x8926;
        public const Int32 GL_REG_6_ATI = 0x8927;
        public const Int32 GL_REG_7_ATI = 0x8928;
        public const Int32 GL_REG_8_ATI = 0x8929;
        public const Int32 GL_REG_9_ATI = 0x892A;
        public const Int32 GL_REGISTER_COMBINERS_NV = 0x8522;
        public const Int32 GL_RENDER = 0x1C00;
        public const Int32 GL_RENDER_MODE = 0x0C40;
        public const Int32 GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53;
        public const Int32 GL_RENDERBUFFER_BINDING_EXT = 0x8CA7;
        public const Int32 GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52;
        public const Int32 GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10;
        public const Int32 GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB;
        public const Int32 GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54;
        public const Int32 GL_RENDERBUFFER_EXT = 0x8D41;
        public const Int32 GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51;
        public const Int32 GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43;
        public const Int32 GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44;
        public const Int32 GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50;
        public const Int32 GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB;
        public const Int32 GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55;
        public const Int32 GL_RENDERBUFFER_WIDTH_EXT = 0x8D42;
        public const Int32 GL_RENDERER = 0x1F01;
        public const Int32 GL_REPEAT = 0x2901;
        public const Int32 GL_REPLACE = 0x1E01;
        public const Int32 GL_REPLACE_EXT = 0x8062;
        public const Int32 GL_REPLACE_MIDDLE_SUN = 0x0002;
        public const Int32 GL_REPLACE_OLDEST_SUN = 0x0003;
        public const Int32 GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3;
        public const Int32 GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2;
        public const Int32 GL_REPLACEMENT_CODE_ARRAY_SUN = 0x85C0;
        public const Int32 GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1;
        public const Int32 GL_REPLACEMENT_CODE_SUN = 0x81D8;
        public const Int32 GL_REPLICATE_BORDER = 0x8153;
        public const Int32 GL_REPLICATE_BORDER_HP = 0x8153;
        public const Int32 GL_RESAMPLE_AVERAGE_OML = 0x8988;
        public const Int32 GL_RESAMPLE_DECIMATE_OML = 0x8989;
        public const Int32 GL_RESAMPLE_DECIMATE_SGIX = 0x8430;
        public const Int32 GL_RESAMPLE_REPLICATE_OML = 0x8986;
        public const Int32 GL_RESAMPLE_REPLICATE_SGIX = 0x842E;
        public const Int32 GL_RESAMPLE_ZERO_FILL_OML = 0x8987;
        public const Int32 GL_RESAMPLE_ZERO_FILL_SGIX = 0x842F;
        public const Int32 GL_RESCALE_NORMAL = 0x803A;
        public const Int32 GL_RESCALE_NORMAL_EXT = 0x803A;
        public const Int32 GL_RESTART_SUN = 0x0001;
        public const Int32 GL_RETURN = 0x0102;
        public const Int32 GL_RGB = 0x1907;
        public const Int32 GL_RGB_FLOAT16_ATI = 0x881B;
        public const Int32 GL_RGB_FLOAT32_ATI = 0x8815;
        public const Int32 GL_RGB_INTEGER_EXT = 0x8D98;
        public const Int32 GL_RGB_S3TC = 0x83A0;
        public const Int32 GL_RGB_SCALE = 0x8573;
        public const Int32 GL_RGB_SCALE_ARB = 0x8573;
        public const Int32 GL_RGB_SCALE_EXT = 0x8573;
        public const Int32 GL_RGB10 = 0x8052;
        public const Int32 GL_RGB10_A2 = 0x8059;
        public const Int32 GL_RGB10_A2_EXT = 0x8059;
        public const Int32 GL_RGB10_EXT = 0x8052;
        public const Int32 GL_RGB12 = 0x8053;
        public const Int32 GL_RGB12_EXT = 0x8053;
        public const Int32 GL_RGB16 = 0x8054;
        public const Int32 GL_RGB16_EXT = 0x8054;
        public const Int32 GL_RGB16F_ARB = 0x881B;
        public const Int32 GL_RGB16I_EXT = 0x8D89;
        public const Int32 GL_RGB16UI_EXT = 0x8D77;
        public const Int32 GL_RGB2_EXT = 0x804E;
        public const Int32 GL_RGB32F_ARB = 0x8815;
        public const Int32 GL_RGB32I_EXT = 0x8D83;
        public const Int32 GL_RGB32UI_EXT = 0x8D71;
        public const Int32 GL_RGB4 = 0x804F;
        public const Int32 GL_RGB4_EXT = 0x804F;
        public const Int32 GL_RGB4_S3TC = 0x83A1;
        public const Int32 GL_RGB5 = 0x8050;
        public const Int32 GL_RGB5_A1 = 0x8057;
        public const Int32 GL_RGB5_A1_EXT = 0x8057;
        public const Int32 GL_RGB5_EXT = 0x8050;
        public const Int32 GL_RGB8 = 0x8051;
        public const Int32 GL_RGB8_EXT = 0x8051;
        public const Int32 GL_RGB8I_EXT = 0x8D8F;
        public const Int32 GL_RGB8UI_EXT = 0x8D7D;
        public const Int32 GL_RGB9_E5_EXT = 0x8C3D;
        public const Int32 GL_RGBA = 0x1908;
        public const Int32 GL_RGBA_FLOAT_MODE_ARB = 0x8820;
        public const Int32 GL_RGBA_FLOAT16_ATI = 0x881A;
        public const Int32 GL_RGBA_FLOAT32_ATI = 0x8814;
        public const Int32 GL_RGBA_INTEGER_EXT = 0x8D99;
        public const Int32 GL_RGBA_INTEGER_MODE_EXT = 0x8D9E;
        public const Int32 GL_RGBA_MODE = 0x0C31;
        public const Int32 GL_RGBA_S3TC = 0x83A2;
        public const Int32 GL_RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C;
        public const Int32 GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9;
        public const Int32 GL_RGBA12 = 0x805A;
        public const Int32 GL_RGBA12_EXT = 0x805A;
        public const Int32 GL_RGBA16 = 0x805B;
        public const Int32 GL_RGBA16_EXT = 0x805B;
        public const Int32 GL_RGBA16F_ARB = 0x881A;
        public const Int32 GL_RGBA16I_EXT = 0x8D88;
        public const Int32 GL_RGBA16UI_EXT = 0x8D76;
        public const Int32 GL_RGBA2 = 0x8055;
        public const Int32 GL_RGBA2_EXT = 0x8055;
        public const Int32 GL_RGBA32F_ARB = 0x8814;
        public const Int32 GL_RGBA32I_EXT = 0x8D82;
        public const Int32 GL_RGBA32UI_EXT = 0x8D70;
        public const Int32 GL_RGBA4 = 0x8056;
        public const Int32 GL_RGBA4_EXT = 0x8056;
        public const Int32 GL_RGBA4_S3TC = 0x83A3;
        public const Int32 GL_RGBA8 = 0x8058;
        public const Int32 GL_RGBA8_EXT = 0x8058;
        public const Int32 GL_RGBA8I_EXT = 0x8D8E;
        public const Int32 GL_RGBA8UI_EXT = 0x8D7C;
        public const Int32 GL_RIGHT = 0x0407;
        public const Int32 GL_S = 0x2000;
        public const Int32 GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
        public const Int32 GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E;
        public const Int32 GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E;
        public const Int32 GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
        public const Int32 GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
        public const Int32 GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F;
        public const Int32 GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F;
        public const Int32 GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
        public const Int32 GL_SAMPLE_BUFFERS = 0x80A8;
        public const Int32 GL_SAMPLE_BUFFERS_3DFX = 0x86B3;
        public const Int32 GL_SAMPLE_BUFFERS_ARB = 0x80A8;
        public const Int32 GL_SAMPLE_BUFFERS_EXT = 0x80A8;
        public const Int32 GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
        public const Int32 GL_SAMPLE_COVERAGE = 0x80A0;
        public const Int32 GL_SAMPLE_COVERAGE_ARB = 0x80A0;
        public const Int32 GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
        public const Int32 GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB;
        public const Int32 GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
        public const Int32 GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA;
        public const Int32 GL_SAMPLE_MASK_EXT = 0x80A0;
        public const Int32 GL_SAMPLE_MASK_INVERT_EXT = 0x80AB;
        public const Int32 GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
        public const Int32 GL_SAMPLE_MASK_SGIS = 0x80A0;
        public const Int32 GL_SAMPLE_MASK_VALUE_EXT = 0x80AA;
        public const Int32 GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
        public const Int32 GL_SAMPLE_PATTERN_EXT = 0x80AC;
        public const Int32 GL_SAMPLE_PATTERN_SGIS = 0x80AC;
        public const Int32 GL_SAMPLER_1D = 0x8B5D;
        public const Int32 GL_SAMPLER_1D_ARB = 0x8B5D;
        public const Int32 GL_SAMPLER_1D_ARRAY_EXT = 0x8DC0;
        public const Int32 GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3;
        public const Int32 GL_SAMPLER_1D_SHADOW = 0x8B61;
        public const Int32 GL_SAMPLER_1D_SHADOW_ARB = 0x8B61;
        public const Int32 GL_SAMPLER_2D = 0x8B5E;
        public const Int32 GL_SAMPLER_2D_ARB = 0x8B5E;
        public const Int32 GL_SAMPLER_2D_ARRAY_EXT = 0x8DC1;
        public const Int32 GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4;
        public const Int32 GL_SAMPLER_2D_RECT_ARB = 0x8B63;
        public const Int32 GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64;
        public const Int32 GL_SAMPLER_2D_SHADOW = 0x8B62;
        public const Int32 GL_SAMPLER_2D_SHADOW_ARB = 0x8B62;
        public const Int32 GL_SAMPLER_3D = 0x8B5F;
        public const Int32 GL_SAMPLER_3D_ARB = 0x8B5F;
        public const Int32 GL_SAMPLER_BUFFER_EXT = 0x8DC2;
        public const Int32 GL_SAMPLER_CUBE = 0x8B60;
        public const Int32 GL_SAMPLER_CUBE_ARB = 0x8B60;
        public const Int32 GL_SAMPLER_CUBE_SHADOW_EXT = 0x8DC5;
        public const Int32 GL_SAMPLES = 0x80A9;
        public const Int32 GL_SAMPLES_3DFX = 0x86B4;
        public const Int32 GL_SAMPLES_ARB = 0x80A9;
        public const Int32 GL_SAMPLES_EXT = 0x80A9;
        public const Int32 GL_SAMPLES_PASSED = 0x8914;
        public const Int32 GL_SAMPLES_PASSED_ARB = 0x8914;
        public const Int32 GL_SAMPLES_SGIS = 0x80A9;
        public const Int32 GL_SATURATE_BIT_ATI = 0x00000040;
        public const Int32 GL_SCALAR_EXT = 0x87BE;
        public const Int32 GL_SCALE_BY_FOUR_NV = 0x853F;
        public const Int32 GL_SCALE_BY_ONE_HALF_NV = 0x8540;
        public const Int32 GL_SCALE_BY_TWO_NV = 0x853E;
        public const Int32 GL_SCALEBIAS_HINT_SGIX = 0x8322;
        public const Int32 GL_SCISSOR_BIT = 0x00080000;
        public const Int32 GL_SCISSOR_BOX = 0x0C10;
        public const Int32 GL_SCISSOR_TEST = 0x0C11;
        public const Int32 GL_SCREEN_COORDINATES_REND = 0x8490;
        public const Int32 GL_SECONDARY_COLOR_ARRAY = 0x845E;
        public const Int32 GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
        public const Int32 GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C;
        public const Int32 GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E;
        public const Int32 GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;
        public const Int32 GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;
        public const Int32 GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
        public const Int32 GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D;
        public const Int32 GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
        public const Int32 GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A;
        public const Int32 GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
        public const Int32 GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C;
        public const Int32 GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
        public const Int32 GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B;
        public const Int32 GL_SECONDARY_COLOR_NV = 0x852D;
        public const Int32 GL_SECONDARY_INTERPOLATOR_ATI = 0x896D;
        public const Int32 GL_SELECT = 0x1C02;
        public const Int32 GL_SELECTION_BUFFER_POINTER = 0x0DF3;
        public const Int32 GL_SELECTION_BUFFER_SIZE = 0x0DF4;
        public const Int32 GL_SEPARABLE_2D = 0x8012;
        public const Int32 GL_SEPARABLE_2D_EXT = 0x8012;
        public const Int32 GL_SEPARATE_ATTRIBS_NV = 0x8C8D;
        public const Int32 GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
        public const Int32 GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA;
        public const Int32 GL_SET = 0x150F;
        public const Int32 GL_SGI_color_matrix = 1;
        public const Int32 GL_SGI_color_table = 1;
        public const Int32 GL_SGI_texture_color_table = 1;
        public const Int32 GL_SGIS_detail_texture = 1;
        public const Int32 GL_SGIS_fog_function = 1;
        public const Int32 GL_SGIS_generate_mipmap = 1;
        public const Int32 GL_SGIS_multisample = 1;
        public const Int32 GL_SGIS_pixel_texture = 1;
        public const Int32 GL_SGIS_point_line_texgen = 1;
        public const Int32 GL_SGIS_point_parameters = 1;
        public const Int32 GL_SGIS_sharpen_texture = 1;
        public const Int32 GL_SGIS_texture_border_clamp = 1;
        public const Int32 GL_SGIS_texture_edge_clamp = 1;
        public const Int32 GL_SGIS_texture_filter4 = 1;
        public const Int32 GL_SGIS_texture_lod = 1;
        public const Int32 GL_SGIS_texture_select = 1;
        public const Int32 GL_SGIS_texture4D = 1;
        public const Int32 GL_SGIX_async = 1;
        public const Int32 GL_SGIX_async_histogram = 1;
        public const Int32 GL_SGIX_async_pixel = 1;
        public const Int32 GL_SGIX_blend_alpha_minmax = 1;
        public const Int32 GL_SGIX_calligraphic_fragment = 1;
        public const Int32 GL_SGIX_clipmap = 1;
        public const Int32 GL_SGIX_convolution_accuracy = 1;
        public const Int32 GL_SGIX_depth_texture = 1;
        public const Int32 GL_SGIX_flush_raster = 1;
        public const Int32 GL_SGIX_fog_offset = 1;
        public const Int32 GL_SGIX_fragment_lighting = 1;
        public const Int32 GL_SGIX_framezoom = 1;
        public const Int32 GL_SGIX_icc_texture = 1;
        public const Int32 GL_SGIX_impact_pixel_texture = 1;
        public const Int32 GL_SGIX_instruments = 1;
        public const Int32 GL_SGIX_interlace = 1;
        public const Int32 GL_SGIX_ir_instrument1 = 1;
        public const Int32 GL_SGIX_list_priority = 1;
        public const Int32 GL_SGIX_pixel_texture = 1;
        public const Int32 GL_SGIX_pixel_tiles = 1;
        public const Int32 GL_SGIX_polynomial_ffd = 1;
        public const Int32 GL_SGIX_reference_plane = 1;
        public const Int32 GL_SGIX_resample = 1;
        public const Int32 GL_SGIX_scalebias_hint = 1;
        public const Int32 GL_SGIX_shadow = 1;
        public const Int32 GL_SGIX_shadow_ambient = 1;
        public const Int32 GL_SGIX_sprite = 1;
        public const Int32 GL_SGIX_subsample = 1;
        public const Int32 GL_SGIX_tag_sample_buffer = 1;
        public const Int32 GL_SGIX_texture_add_env = 1;
        public const Int32 GL_SGIX_texture_coordinate_clamp = 1;
        public const Int32 GL_SGIX_texture_lod_bias = 1;
        public const Int32 GL_SGIX_texture_multi_buffer = 1;
        public const Int32 GL_SGIX_texture_scale_bias = 1;
        public const Int32 GL_SGIX_vertex_preclip = 1;
        public const Int32 GL_SGIX_ycrcb = 1;
        public const Int32 GL_SHADE_MODEL = 0x0B54;
        public const Int32 GL_SHADER_CONSISTENT_NV = 0x86DD;
        public const Int32 GL_SHADER_OBJECT_ARB = 0x8B48;
        public const Int32 GL_SHADER_OPERATION_NV = 0x86DF;
        public const Int32 GL_SHADER_SOURCE_LENGTH = 0x8B88;
        public const Int32 GL_SHADER_TYPE = 0x8B4F;
        public const Int32 GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
        public const Int32 GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C;
        public const Int32 GL_SHADOW_AMBIENT_SGIX = 0x80BF;
        public const Int32 GL_SHADOW_ATTENUATION_EXT = 0x834E;
        public const Int32 GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
        public const Int32 GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0;
        public const Int32 GL_SHININESS = 0x1601;
        public const Int32 GL_SHORT = 0x1402;
        public const Int32 GL_SIGNED_ALPHA_NV = 0x8705;
        public const Int32 GL_SIGNED_ALPHA8_NV = 0x8706;
        public const Int32 GL_SIGNED_HILO_NV = 0x86F9;
        public const Int32 GL_SIGNED_HILO16_NV = 0x86FA;
        public const Int32 GL_SIGNED_HILO8_NV = 0x885F;
        public const Int32 GL_SIGNED_IDENTITY_NV = 0x853C;
        public const Int32 GL_SIGNED_INTENSITY_NV = 0x8707;
        public const Int32 GL_SIGNED_INTENSITY8_NV = 0x8708;
        public const Int32 GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703;
        public const Int32 GL_SIGNED_LUMINANCE_NV = 0x8701;
        public const Int32 GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704;
        public const Int32 GL_SIGNED_LUMINANCE8_NV = 0x8702;
        public const Int32 GL_SIGNED_NEGATE_NV = 0x853D;
        public const Int32 GL_SIGNED_RGB_NV = 0x86FE;
        public const Int32 GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C;
        public const Int32 GL_SIGNED_RGB8_NV = 0x86FF;
        public const Int32 GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D;
        public const Int32 GL_SIGNED_RGBA_NV = 0x86FB;
        public const Int32 GL_SIGNED_RGBA8_NV = 0x86FC;
        public const Int32 GL_SINGLE_COLOR = 0x81F9;
        public const Int32 GL_SINGLE_COLOR_EXT = 0x81F9;
        public const Int32 GL_SLICE_ACCUM_SUN = 0x85CC;
        public const Int32 GL_SLUMINANCE = 0x8C46;
        public const Int32 GL_SLUMINANCE_ALPHA = 0x8C44;
        public const Int32 GL_SLUMINANCE_ALPHA_EXT = 0x8C44;
        public const Int32 GL_SLUMINANCE_EXT = 0x8C46;
        public const Int32 GL_SLUMINANCE8 = 0x8C47;
        public const Int32 GL_SLUMINANCE8_ALPHA8 = 0x8C45;
        public const Int32 GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45;
        public const Int32 GL_SLUMINANCE8_EXT = 0x8C47;
        public const Int32 GL_SMOOTH = 0x1D01;
        public const Int32 GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
        public const Int32 GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
        public const Int32 GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
        public const Int32 GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
        public const Int32 GL_SOURCE0_ALPHA = 0x8588;
        public const Int32 GL_SOURCE0_ALPHA_ARB = 0x8588;
        public const Int32 GL_SOURCE0_ALPHA_EXT = 0x8588;
        public const Int32 GL_SOURCE0_RGB = 0x8580;
        public const Int32 GL_SOURCE0_RGB_ARB = 0x8580;
        public const Int32 GL_SOURCE0_RGB_EXT = 0x8580;
        public const Int32 GL_SOURCE1_ALPHA = 0x8589;
        public const Int32 GL_SOURCE1_ALPHA_ARB = 0x8589;
        public const Int32 GL_SOURCE1_ALPHA_EXT = 0x8589;
        public const Int32 GL_SOURCE1_RGB = 0x8581;
        public const Int32 GL_SOURCE1_RGB_ARB = 0x8581;
        public const Int32 GL_SOURCE1_RGB_EXT = 0x8581;
        public const Int32 GL_SOURCE2_ALPHA = 0x858A;
        public const Int32 GL_SOURCE2_ALPHA_ARB = 0x858A;
        public const Int32 GL_SOURCE2_ALPHA_EXT = 0x858A;
        public const Int32 GL_SOURCE2_RGB = 0x8582;
        public const Int32 GL_SOURCE2_RGB_ARB = 0x8582;
        public const Int32 GL_SOURCE2_RGB_EXT = 0x8582;
        public const Int32 GL_SOURCE3_ALPHA_NV = 0x858B;
        public const Int32 GL_SOURCE3_RGB_NV = 0x8583;
        public const Int32 GL_SPARE0_NV = 0x852E;
        public const Int32 GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532;
        public const Int32 GL_SPARE1_NV = 0x852F;
        public const Int32 GL_SPECULAR = 0x1202;
        public const Int32 GL_SPHERE_MAP = 0x2402;
        public const Int32 GL_SPOT_CUTOFF = 0x1206;
        public const Int32 GL_SPOT_DIRECTION = 0x1204;
        public const Int32 GL_SPOT_EXPONENT = 0x1205;
        public const Int32 GL_SPRITE_AXIAL_SGIX = 0x814C;
        public const Int32 GL_SPRITE_AXIS_SGIX = 0x814A;
        public const Int32 GL_SPRITE_EYE_ALIGNED_SGIX = 0x814E;
        public const Int32 GL_SPRITE_MODE_SGIX = 0x8149;
        public const Int32 GL_SPRITE_OBJECT_ALIGNED_SGIX = 0x814D;
        public const Int32 GL_SPRITE_SGIX = 0x8148;
        public const Int32 GL_SPRITE_TRANSLATION_SGIX = 0x814B;
        public const Int32 GL_SRC_ALPHA = 0x0302;
        public const Int32 GL_SRC_ALPHA_SATURATE = 0x0308;
        public const Int32 GL_SRC_COLOR = 0x0300;
        public const Int32 GL_SRC0_ALPHA = GL_SOURCE0_ALPHA;
        public const Int32 GL_SRC0_RGB = GL_SOURCE0_RGB;
        public const Int32 GL_SRC1_ALPHA = GL_SOURCE1_ALPHA;
        public const Int32 GL_SRC1_RGB = GL_SOURCE1_RGB;
        public const Int32 GL_SRC2_ALPHA = GL_SOURCE2_ALPHA;
        public const Int32 GL_SRC2_RGB = GL_SOURCE2_RGB;
        public const Int32 GL_SRGB = 0x8C40;
        public const Int32 GL_SRGB_ALPHA = 0x8C42;
        public const Int32 GL_SRGB_ALPHA_EXT = 0x8C42;
        public const Int32 GL_SRGB_EXT = 0x8C40;
        public const Int32 GL_SRGB8 = 0x8C41;
        public const Int32 GL_SRGB8_ALPHA8 = 0x8C43;
        public const Int32 GL_SRGB8_ALPHA8_EXT = 0x8C43;
        public const Int32 GL_SRGB8_EXT = 0x8C41;
        public const Int32 GL_STACK_OVERFLOW = 0x0503;
        public const Int32 GL_STACK_UNDERFLOW = 0x0504;
        public const Int32 GL_STATIC_ATI = 0x8760;
        public const Int32 GL_STATIC_COPY = 0x88E6;
        public const Int32 GL_STATIC_COPY_ARB = 0x88E6;
        public const Int32 GL_STATIC_DRAW = 0x88E4;
        public const Int32 GL_STATIC_DRAW_ARB = 0x88E4;
        public const Int32 GL_STATIC_READ = 0x88E5;
        public const Int32 GL_STATIC_READ_ARB = 0x88E5;
        public const Int32 GL_STENCIL = 0x1802;
        public const Int32 GL_STENCIL_ATTACHMENT_EXT = 0x8D20;
        public const Int32 GL_STENCIL_BACK_FAIL = 0x8801;
        public const Int32 GL_STENCIL_BACK_FAIL_ATI = 0x8801;
        public const Int32 GL_STENCIL_BACK_FUNC = 0x8800;
        public const Int32 GL_STENCIL_BACK_FUNC_ATI = 0x8800;
        public const Int32 GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
        public const Int32 GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802;
        public const Int32 GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
        public const Int32 GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803;
        public const Int32 GL_STENCIL_BACK_REF = 0x8CA3;
        public const Int32 GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
        public const Int32 GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
        public const Int32 GL_STENCIL_BITS = 0x0D57;
        public const Int32 GL_STENCIL_BUFFER_BIT = 0x00000400;
        public const Int32 GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3;
        public const Int32 GL_STENCIL_CLEAR_VALUE = 0x0B91;
        public const Int32 GL_STENCIL_FAIL = 0x0B94;
        public const Int32 GL_STENCIL_FUNC = 0x0B92;
        public const Int32 GL_STENCIL_INDEX = 0x1901;
        public const Int32 GL_STENCIL_INDEX1_EXT = 0x8D46;
        public const Int32 GL_STENCIL_INDEX16_EXT = 0x8D49;
        public const Int32 GL_STENCIL_INDEX4_EXT = 0x8D47;
        public const Int32 GL_STENCIL_INDEX8_EXT = 0x8D48;
        public const Int32 GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
        public const Int32 GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
        public const Int32 GL_STENCIL_REF = 0x0B97;
        public const Int32 GL_STENCIL_TAG_BITS_EXT = 0x88F2;
        public const Int32 GL_STENCIL_TEST = 0x0B90;
        public const Int32 GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910;
        public const Int32 GL_STENCIL_VALUE_MASK = 0x0B93;
        public const Int32 GL_STENCIL_WRITEMASK = 0x0B98;
        public const Int32 GL_STEREO = 0x0C33;
        public const Int32 GL_STORAGE_CACHED_APPLE = 0x85BE;
        public const Int32 GL_STORAGE_SHARED_APPLE = 0x85BF;
        public const Int32 GL_STREAM_COPY = 0x88E2;
        public const Int32 GL_STREAM_COPY_ARB = 0x88E2;
        public const Int32 GL_STREAM_DRAW = 0x88E0;
        public const Int32 GL_STREAM_DRAW_ARB = 0x88E0;
        public const Int32 GL_STREAM_READ = 0x88E1;
        public const Int32 GL_STREAM_READ_ARB = 0x88E1;
        public const Int32 GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
        public const Int32 GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
        public const Int32 GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
        public const Int32 GL_SUB_ATI = 0x8965;
        public const Int32 GL_SUBPIXEL_BITS = 0x0D50;
        public const Int32 GL_SUBTRACT = 0x84E7;
        public const Int32 GL_SUBTRACT_ARB = 0x84E7;
        public const Int32 GL_SWIZZLE_STQ_ATI = 0x8977;
        public const Int32 GL_SWIZZLE_STQ_DQ_ATI = 0x8979;
        public const Int32 GL_SWIZZLE_STR_ATI = 0x8976;
        public const Int32 GL_SWIZZLE_STR_DR_ATI = 0x8978;
        public const Int32 GL_SWIZZLE_STRQ_ATI = 0x897A;
        public const Int32 GL_SWIZZLE_STRQ_DQ_ATI = 0x897B;
        public const Int32 GL_T = 0x2001;
        public const Int32 GL_T2F_C3F_V3F = 0x2A2A;
        public const Int32 GL_T2F_C4F_N3F_V3F = 0x2A2C;
        public const Int32 GL_T2F_C4UB_V3F = 0x2A29;
        public const Int32 GL_T2F_IUI_N3F_V2F_EXT = 0x81B3;
        public const Int32 GL_T2F_IUI_N3F_V3F_EXT = 0x81B4;
        public const Int32 GL_T2F_IUI_V2F_EXT = 0x81B1;
        public const Int32 GL_T2F_IUI_V3F_EXT = 0x81B2;
        public const Int32 GL_T2F_N3F_V3F = 0x2A2B;
        public const Int32 GL_T2F_V3F = 0x2A27;
        public const Int32 GL_T4F_C4F_N3F_V4F = 0x2A2D;
        public const Int32 GL_T4F_V4F = 0x2A28;
        public const Int32 GL_TABLE_TOO_LARGE = 0x8031;
        public const Int32 GL_TABLE_TOO_LARGE_EXT = 0x8031;
        public const Int32 GL_TANGENT_ARRAY_EXT = 0x8439;
        public const Int32 GL_TANGENT_ARRAY_POINTER_EXT = 0x8442;
        public const Int32 GL_TANGENT_ARRAY_STRIDE_EXT = 0x843F;
        public const Int32 GL_TANGENT_ARRAY_TYPE_EXT = 0x843E;
        public const Int32 GL_TEXCOORD1_BIT_PGI = 0x10000000;
        public const Int32 GL_TEXCOORD2_BIT_PGI = 0x20000000;
        public const Int32 GL_TEXCOORD3_BIT_PGI = 0x40000000;
        public const Int32 GL_TEXCOORD4_BIT_PGI = unchecked((Int32)0x80000000);
        public const Int32 GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200;
        public const Int32 GL_TEXTURE = 0x1702;
        public const Int32 GL_TEXTURE_1D = 0x0DE0;
        public const Int32 GL_TEXTURE_1D_ARRAY_EXT = 0x8C18;
        public const Int32 GL_TEXTURE_1D_BINDING_EXT = 0x8068;
        public const Int32 GL_TEXTURE_1D_STACK_BINDING_MESAX = 0x875D;
        public const Int32 GL_TEXTURE_1D_STACK_MESAX = 0x8759;
        public const Int32 GL_TEXTURE_2D = 0x0DE1;
        public const Int32 GL_TEXTURE_2D_ARRAY_EXT = 0x8C1A;
        public const Int32 GL_TEXTURE_2D_BINDING_EXT = 0x8069;
        public const Int32 GL_TEXTURE_2D_STACK_BINDING_MESAX = 0x875E;
        public const Int32 GL_TEXTURE_2D_STACK_MESAX = 0x875A;
        public const Int32 GL_TEXTURE_3D = 0x806F;
        public const Int32 GL_TEXTURE_3D_BINDING_EXT = 0x806A;
        public const Int32 GL_TEXTURE_3D_EXT = 0x806F;
        public const Int32 GL_TEXTURE_4D_BINDING_SGIS = 0x814F;
        public const Int32 GL_TEXTURE_4D_SGIS = 0x8134;
        public const Int32 GL_TEXTURE_4DSIZE_SGIS = 0x8136;
        public const Int32 GL_TEXTURE_ALPHA_SIZE = 0x805F;
        public const Int32 GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F;
        public const Int32 GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13;
        public const Int32 GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F;
        public const Int32 GL_TEXTURE_BASE_LEVEL = 0x813C;
        public const Int32 GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C;
        public const Int32 GL_TEXTURE_BINDING_1D = 0x8068;
        public const Int32 GL_TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C;
        public const Int32 GL_TEXTURE_BINDING_2D = 0x8069;
        public const Int32 GL_TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D;
        public const Int32 GL_TEXTURE_BINDING_3D = 0x806A;
        public const Int32 GL_TEXTURE_BINDING_BUFFER_EXT = 0x8C2C;
        public const Int32 GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
        public const Int32 GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514;
        public const Int32 GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514;
        public const Int32 GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6;
        public const Int32 GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6;
        public const Int32 GL_TEXTURE_BIT = 0x00040000;
        public const Int32 GL_TEXTURE_BLUE_SIZE = 0x805E;
        public const Int32 GL_TEXTURE_BLUE_SIZE_EXT = 0x805E;
        public const Int32 GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12;
        public const Int32 GL_TEXTURE_BORDER = 0x1005;
        public const Int32 GL_TEXTURE_BORDER_COLOR = 0x1004;
        public const Int32 GL_TEXTURE_BORDER_VALUES_NV = 0x871A;
        public const Int32 GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D;
        public const Int32 GL_TEXTURE_BUFFER_EXT = 0x8C2A;
        public const Int32 GL_TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E;
        public const Int32 GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171;
        public const Int32 GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176;
        public const Int32 GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172;
        public const Int32 GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175;
        public const Int32 GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173;
        public const Int32 GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174;
        public const Int32 GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
        public const Int32 GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF;
        public const Int32 GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF;
        public const Int32 GL_TEXTURE_COMPARE_FUNC = 0x884D;
        public const Int32 GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D;
        public const Int32 GL_TEXTURE_COMPARE_MODE = 0x884C;
        public const Int32 GL_TEXTURE_COMPARE_MODE_ARB = 0x884C;
        public const Int32 GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
        public const Int32 GL_TEXTURE_COMPARE_SGIX = 0x819A;
        public const Int32 GL_TEXTURE_COMPONENTS = 0x1003;
        public const Int32 GL_TEXTURE_COMPRESSED = 0x86A1;
        public const Int32 GL_TEXTURE_COMPRESSED_ARB = 0x86A1;
        public const Int32 GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
        public const Int32 GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0;
        public const Int32 GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
        public const Int32 GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
        public const Int32 GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6;
        public const Int32 GL_TEXTURE_COORD_ARRAY = 0x8078;
        public const Int32 GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
        public const Int32 GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A;
        public const Int32 GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
        public const Int32 GL_TEXTURE_COORD_ARRAY_EXT = 0x8078;
        public const Int32 GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074;
        public const Int32 GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;
        public const Int32 GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8;
        public const Int32 GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
        public const Int32 GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092;
        public const Int32 GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
        public const Int32 GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088;
        public const Int32 GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
        public const Int32 GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A;
        public const Int32 GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
        public const Int32 GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089;
        public const Int32 GL_TEXTURE_COORD_NV = 0x8C79;
        public const Int32 GL_TEXTURE_CUBE_MAP = 0x8513;
        public const Int32 GL_TEXTURE_CUBE_MAP_ARB = 0x8513;
        public const Int32 GL_TEXTURE_CUBE_MAP_EXT = 0x8513;
        public const Int32 GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        public const Int32 GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516;
        public const Int32 GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516;
        public const Int32 GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        public const Int32 GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518;
        public const Int32 GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518;
        public const Int32 GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
        public const Int32 GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A;
        public const Int32 GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A;
        public const Int32 GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        public const Int32 GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515;
        public const Int32 GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515;
        public const Int32 GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        public const Int32 GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517;
        public const Int32 GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517;
        public const Int32 GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        public const Int32 GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519;
        public const Int32 GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519;
        public const Int32 GL_TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001;
        public const Int32 GL_TEXTURE_DEFORMATION_SGIX = 0x8195;
        public const Int32 GL_TEXTURE_DEPTH = 0x8071;
        public const Int32 GL_TEXTURE_DEPTH_EXT = 0x8071;
        public const Int32 GL_TEXTURE_DEPTH_SIZE = 0x884A;
        public const Int32 GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A;
        public const Int32 GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16;
        public const Int32 GL_TEXTURE_DS_SIZE_NV = 0x871D;
        public const Int32 GL_TEXTURE_DT_SIZE_NV = 0x871E;
        public const Int32 GL_TEXTURE_ENV = 0x2300;
        public const Int32 GL_TEXTURE_ENV_BIAS_SGIX = 0x80BE;
        public const Int32 GL_TEXTURE_ENV_COLOR = 0x2201;
        public const Int32 GL_TEXTURE_ENV_MODE = 0x2200;
        public const Int32 GL_TEXTURE_FILTER_CONTROL = 0x8500;
        public const Int32 GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500;
        public const Int32 GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147;
        public const Int32 GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C;
        public const Int32 GL_TEXTURE_GEN_MODE = 0x2500;
        public const Int32 GL_TEXTURE_GEN_Q = 0x0C63;
        public const Int32 GL_TEXTURE_GEN_R = 0x0C62;
        public const Int32 GL_TEXTURE_GEN_S = 0x0C60;
        public const Int32 GL_TEXTURE_GEN_T = 0x0C61;
        public const Int32 GL_TEXTURE_GEQUAL_R_SGIX = 0x819D;
        public const Int32 GL_TEXTURE_GREEN_SIZE = 0x805D;
        public const Int32 GL_TEXTURE_GREEN_SIZE_EXT = 0x805D;
        public const Int32 GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11;
        public const Int32 GL_TEXTURE_HEIGHT = 0x1001;
        public const Int32 GL_TEXTURE_HI_SIZE_NV = 0x871B;
        public const Int32 GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED;
        public const Int32 GL_TEXTURE_INTENSITY_SIZE = 0x8061;
        public const Int32 GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061;
        public const Int32 GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15;
        public const Int32 GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
        public const Int32 GL_TEXTURE_LEQUAL_R_SGIX = 0x819C;
        public const Int32 GL_TEXTURE_LIGHT_EXT = 0x8350;
        public const Int32 GL_TEXTURE_LIGHTING_MODE_HP = 0x8167;
        public const Int32 GL_TEXTURE_LO_SIZE_NV = 0x871C;
        public const Int32 GL_TEXTURE_LOD_BIAS = 0x8501;
        public const Int32 GL_TEXTURE_LOD_BIAS_EXT = 0x8501;
        public const Int32 GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190;
        public const Int32 GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E;
        public const Int32 GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F;
        public const Int32 GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
        public const Int32 GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060;
        public const Int32 GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14;
        public const Int32 GL_TEXTURE_MAG_FILTER = 0x2800;
        public const Int32 GL_TEXTURE_MAG_SIZE_NV = 0x871F;
        public const Int32 GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351;
        public const Int32 GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;
        public const Int32 GL_TEXTURE_MATRIX = 0x0BA8;
        public const Int32 GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
        public const Int32 GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
        public const Int32 GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
        public const Int32 GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
        public const Int32 GL_TEXTURE_MAX_LEVEL = 0x813D;
        public const Int32 GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D;
        public const Int32 GL_TEXTURE_MAX_LOD = 0x813B;
        public const Int32 GL_TEXTURE_MAX_LOD_SGIS = 0x813B;
        public const Int32 GL_TEXTURE_MIN_FILTER = 0x2801;
        public const Int32 GL_TEXTURE_MIN_LOD = 0x813A;
        public const Int32 GL_TEXTURE_MIN_LOD_SGIS = 0x813A;
        public const Int32 GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
        public const Int32 GL_TEXTURE_NORMAL_EXT = 0x85AF;
        public const Int32 GL_TEXTURE_POST_SPECULAR_HP = 0x8168;
        public const Int32 GL_TEXTURE_PRE_SPECULAR_HP = 0x8169;
        public const Int32 GL_TEXTURE_PRIORITY = 0x8066;
        public const Int32 GL_TEXTURE_PRIORITY_EXT = 0x8066;
        public const Int32 GL_TEXTURE_RECTANGLE_ARB = 0x84F5;
        public const Int32 GL_TEXTURE_RECTANGLE_NV = 0x84F5;
        public const Int32 GL_TEXTURE_RED_SIZE = 0x805C;
        public const Int32 GL_TEXTURE_RED_SIZE_EXT = 0x805C;
        public const Int32 GL_TEXTURE_RED_TYPE_ARB = 0x8C10;
        public const Int32 GL_TEXTURE_RESIDENT = 0x8067;
        public const Int32 GL_TEXTURE_RESIDENT_EXT = 0x8067;
        public const Int32 GL_TEXTURE_SHADER_NV = 0x86DE;
        public const Int32 GL_TEXTURE_SHARED_SIZE_EXT = 0x8C3F;
        public const Int32 GL_TEXTURE_STACK_DEPTH = 0x0BA5;
        public const Int32 GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1;
        public const Int32 GL_TEXTURE_TOO_LARGE_EXT = 0x8065;
        public const Int32 GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F;
        public const Int32 GL_TEXTURE_WIDTH = 0x1000;
        public const Int32 GL_TEXTURE_WRAP_Q_SGIS = 0x8137;
        public const Int32 GL_TEXTURE_WRAP_R = 0x8072;
        public const Int32 GL_TEXTURE_WRAP_R_EXT = 0x8072;
        public const Int32 GL_TEXTURE_WRAP_S = 0x2802;
        public const Int32 GL_TEXTURE_WRAP_T = 0x2803;
        public const Int32 GL_TEXTURE0 = 0x84C0;
        public const Int32 GL_TEXTURE0_ARB = 0x84C0;
        public const Int32 GL_TEXTURE1 = 0x84C1;
        public const Int32 GL_TEXTURE1_ARB = 0x84C1;
        public const Int32 GL_TEXTURE10 = 0x84CA;
        public const Int32 GL_TEXTURE10_ARB = 0x84CA;
        public const Int32 GL_TEXTURE11 = 0x84CB;
        public const Int32 GL_TEXTURE11_ARB = 0x84CB;
        public const Int32 GL_TEXTURE12 = 0x84CC;
        public const Int32 GL_TEXTURE12_ARB = 0x84CC;
        public const Int32 GL_TEXTURE13 = 0x84CD;
        public const Int32 GL_TEXTURE13_ARB = 0x84CD;
        public const Int32 GL_TEXTURE14 = 0x84CE;
        public const Int32 GL_TEXTURE14_ARB = 0x84CE;
        public const Int32 GL_TEXTURE15 = 0x84CF;
        public const Int32 GL_TEXTURE15_ARB = 0x84CF;
        public const Int32 GL_TEXTURE16 = 0x84D0;
        public const Int32 GL_TEXTURE16_ARB = 0x84D0;
        public const Int32 GL_TEXTURE17 = 0x84D1;
        public const Int32 GL_TEXTURE17_ARB = 0x84D1;
        public const Int32 GL_TEXTURE18 = 0x84D2;
        public const Int32 GL_TEXTURE18_ARB = 0x84D2;
        public const Int32 GL_TEXTURE19 = 0x84D3;
        public const Int32 GL_TEXTURE19_ARB = 0x84D3;
        public const Int32 GL_TEXTURE2 = 0x84C2;
        public const Int32 GL_TEXTURE2_ARB = 0x84C2;
        public const Int32 GL_TEXTURE20 = 0x84D4;
        public const Int32 GL_TEXTURE20_ARB = 0x84D4;
        public const Int32 GL_TEXTURE21 = 0x84D5;
        public const Int32 GL_TEXTURE21_ARB = 0x84D5;
        public const Int32 GL_TEXTURE22 = 0x84D6;
        public const Int32 GL_TEXTURE22_ARB = 0x84D6;
        public const Int32 GL_TEXTURE23 = 0x84D7;
        public const Int32 GL_TEXTURE23_ARB = 0x84D7;
        public const Int32 GL_TEXTURE24 = 0x84D8;
        public const Int32 GL_TEXTURE24_ARB = 0x84D8;
        public const Int32 GL_TEXTURE25 = 0x84D9;
        public const Int32 GL_TEXTURE25_ARB = 0x84D9;
        public const Int32 GL_TEXTURE26 = 0x84DA;
        public const Int32 GL_TEXTURE26_ARB = 0x84DA;
        public const Int32 GL_TEXTURE27 = 0x84DB;
        public const Int32 GL_TEXTURE27_ARB = 0x84DB;
        public const Int32 GL_TEXTURE28 = 0x84DC;
        public const Int32 GL_TEXTURE28_ARB = 0x84DC;
        public const Int32 GL_TEXTURE29 = 0x84DD;
        public const Int32 GL_TEXTURE29_ARB = 0x84DD;
        public const Int32 GL_TEXTURE3 = 0x84C3;
        public const Int32 GL_TEXTURE3_ARB = 0x84C3;
        public const Int32 GL_TEXTURE30 = 0x84DE;
        public const Int32 GL_TEXTURE30_ARB = 0x84DE;
        public const Int32 GL_TEXTURE31 = 0x84DF;
        public const Int32 GL_TEXTURE31_ARB = 0x84DF;
        public const Int32 GL_TEXTURE4 = 0x84C4;
        public const Int32 GL_TEXTURE4_ARB = 0x84C4;
        public const Int32 GL_TEXTURE5 = 0x84C5;
        public const Int32 GL_TEXTURE5_ARB = 0x84C5;
        public const Int32 GL_TEXTURE6 = 0x84C6;
        public const Int32 GL_TEXTURE6_ARB = 0x84C6;
        public const Int32 GL_TEXTURE7 = 0x84C7;
        public const Int32 GL_TEXTURE7_ARB = 0x84C7;
        public const Int32 GL_TEXTURE8 = 0x84C8;
        public const Int32 GL_TEXTURE8_ARB = 0x84C8;
        public const Int32 GL_TEXTURE9 = 0x84C9;
        public const Int32 GL_TEXTURE9_ARB = 0x84C9;
        public const Int32 GL_TIME_ELAPSED_EXT = 0x88BF;
        public const Int32 GL_TRACK_MATRIX_NV = 0x8648;
        public const Int32 GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649;
        public const Int32 GL_TRANSFORM_BIT = 0x00001000;
        public const Int32 GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E;
        public const Int32 GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F;
        public const Int32 GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F;
        public const Int32 GL_TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E;
        public const Int32 GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85;
        public const Int32 GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84;
        public const Int32 GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88;
        public const Int32 GL_TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86;
        public const Int32 GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83;
        public const Int32 GL_TRANSFORM_HINT_APPLE = 0x85B1;
        public const Int32 GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
        public const Int32 GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6;
        public const Int32 GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7;
        public const Int32 GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
        public const Int32 GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3;
        public const Int32 GL_TRANSPOSE_NV = 0x862C;
        public const Int32 GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
        public const Int32 GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4;
        public const Int32 GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
        public const Int32 GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5;
        public const Int32 GL_TRIANGLE_FAN = 0x0006;
        public const Int32 GL_TRIANGLE_LIST_SUN = 0x81D7;
        public const Int32 GL_TRIANGLE_MESH_SUN = 0x8615;
        public const Int32 GL_TRIANGLE_STRIP = 0x0005;
        public const Int32 GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D;
        public const Int32 GL_TRIANGLES = 0x0004;
        public const Int32 GL_TRIANGLES_ADJACENCY_EXT = 0x000C;
        public const Int32 GL_TRUE = 1;
        public const Int32 GL_TYPE_RGBA_FLOAT_ATI = 0x8820;
        public const Int32 GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEF;
        public const Int32 GL_UNIFORM_BUFFER_EXT = 0x8DEE;
        public const Int32 GL_UNPACK_ALIGNMENT = 0x0CF5;
        public const Int32 GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2;
        public const Int32 GL_UNPACK_CMYK_HINT_EXT = 0x800F;
        public const Int32 GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5;
        public const Int32 GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133;
        public const Int32 GL_UNPACK_IMAGE_HEIGHT = 0x806E;
        public const Int32 GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
        public const Int32 GL_UNPACK_LSB_FIRST = 0x0CF1;
        public const Int32 GL_UNPACK_RESAMPLE_OML = 0x8985;
        public const Int32 GL_UNPACK_RESAMPLE_SGIX = 0x842D;
        public const Int32 GL_UNPACK_ROW_LENGTH = 0x0CF2;
        public const Int32 GL_UNPACK_SKIP_IMAGES = 0x806D;
        public const Int32 GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
        public const Int32 GL_UNPACK_SKIP_PIXELS = 0x0CF4;
        public const Int32 GL_UNPACK_SKIP_ROWS = 0x0CF3;
        public const Int32 GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132;
        public const Int32 GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1;
        public const Int32 GL_UNPACK_SWAP_BYTES = 0x0CF0;
        public const Int32 GL_UNSIGNED_BYTE = 0x1401;
        public const Int32 GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
        public const Int32 GL_UNSIGNED_BYTE_2_3_3_REV_EXT = 0x8362;
        public const Int32 GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
        public const Int32 GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
        public const Int32 GL_UNSIGNED_IDENTITY_NV = 0x8536;
        public const Int32 GL_UNSIGNED_INT = 0x1405;
        public const Int32 GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
        public const Int32 GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
        public const Int32 GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B;
        public const Int32 GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
        public const Int32 GL_UNSIGNED_INT_2_10_10_10_REV_EXT = 0x8368;
        public const Int32 GL_UNSIGNED_INT_24_8_EXT = 0x84FA;
        public const Int32 GL_UNSIGNED_INT_24_8_NV = 0x84FA;
        public const Int32 GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E;
        public const Int32 GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
        public const Int32 GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
        public const Int32 GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
        public const Int32 GL_UNSIGNED_INT_8_8_8_8_REV_EXT = 0x8367;
        public const Int32 GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB;
        public const Int32 GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA;
        public const Int32 GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6;
        public const Int32 GL_UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1;
        public const Int32 GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7;
        public const Int32 GL_UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2;
        public const Int32 GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5;
        public const Int32 GL_UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3;
        public const Int32 GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8;
        public const Int32 GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4;
        public const Int32 GL_UNSIGNED_INT_VEC2_EXT = 0x8DC6;
        public const Int32 GL_UNSIGNED_INT_VEC3_EXT = 0x8DC7;
        public const Int32 GL_UNSIGNED_INT_VEC4_EXT = 0x8DC8;
        public const Int32 GL_UNSIGNED_INVERT_NV = 0x8537;
        public const Int32 GL_UNSIGNED_NORMALIZED_ARB = 0x8C17;
        public const Int32 GL_UNSIGNED_SHORT = 0x1403;
        public const Int32 GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
        public const Int32 GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = 0x8366;
        public const Int32 GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
        public const Int32 GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
        public const Int32 GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
        public const Int32 GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = 0x8365;
        public const Int32 GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
        public const Int32 GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
        public const Int32 GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
        public const Int32 GL_UNSIGNED_SHORT_5_6_5_EXT = 0x8363;
        public const Int32 GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
        public const Int32 GL_UNSIGNED_SHORT_5_6_5_REV_EXT = 0x8364;
        public const Int32 GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
        public const Int32 GL_UNSIGNED_SHORT_8_8_MESA = 0x85BA;
        public const Int32 GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
        public const Int32 GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB;
        public const Int32 GL_UPPER_LEFT = 0x8CA2;
        public const Int32 GL_V2F = 0x2A20;
        public const Int32 GL_V3F = 0x2A21;
        public const Int32 GL_VALIDATE_STATUS = 0x8B83;
        public const Int32 GL_VARIABLE_A_NV = 0x8523;
        public const Int32 GL_VARIABLE_B_NV = 0x8524;
        public const Int32 GL_VARIABLE_C_NV = 0x8525;
        public const Int32 GL_VARIABLE_D_NV = 0x8526;
        public const Int32 GL_VARIABLE_E_NV = 0x8527;
        public const Int32 GL_VARIABLE_F_NV = 0x8528;
        public const Int32 GL_VARIABLE_G_NV = 0x8529;
        public const Int32 GL_VARIANT_ARRAY_EXT = 0x87E8;
        public const Int32 GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9;
        public const Int32 GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6;
        public const Int32 GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7;
        public const Int32 GL_VARIANT_DATATYPE_EXT = 0x87E5;
        public const Int32 GL_VARIANT_EXT = 0x87C1;
        public const Int32 GL_VARIANT_VALUE_EXT = 0x87E4;
        public const Int32 GL_VECTOR_EXT = 0x87BF;
        public const Int32 GL_VENDOR = 0x1F00;
        public const Int32 GL_VERSION = 0x1F02;
        public const Int32 GL_VERSION_1_1 = 1;
        public const Int32 GL_VERSION_1_2 = 1;
        public const Int32 GL_VERSION_1_3 = 1;
        public const Int32 GL_VERSION_1_4 = 1;
        public const Int32 GL_VERSION_1_5 = 1;
        public const Int32 GL_VERTEX_ARRAY = 0x8074;
        public const Int32 GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5;
        public const Int32 GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
        public const Int32 GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896;
        public const Int32 GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
        public const Int32 GL_VERTEX_ARRAY_EXT = 0x8074;
        public const Int32 GL_VERTEX_ARRAY_LIST_IBM = 103070;
        public const Int32 GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;
        public const Int32 GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5;
        public const Int32 GL_VERTEX_ARRAY_POINTER = 0x808E;
        public const Int32 GL_VERTEX_ARRAY_POINTER_EXT = 0x808E;
        public const Int32 GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D;
        public const Int32 GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E;
        public const Int32 GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E;
        public const Int32 GL_VERTEX_ARRAY_RANGE_NV = 0x851D;
        public const Int32 GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521;
        public const Int32 GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521;
        public const Int32 GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F;
        public const Int32 GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533;
        public const Int32 GL_VERTEX_ARRAY_SIZE = 0x807A;
        public const Int32 GL_VERTEX_ARRAY_SIZE_EXT = 0x807A;
        public const Int32 GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
        public const Int32 GL_VERTEX_ARRAY_STRIDE = 0x807C;
        public const Int32 GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C;
        public const Int32 GL_VERTEX_ARRAY_TYPE = 0x807B;
        public const Int32 GL_VERTEX_ARRAY_TYPE_EXT = 0x807B;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY15_NV = 0x865F;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658;
        public const Int32 GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659;
        public const Int32 GL_VERTEX_BLEND_ARB = 0x86A7;
        public const Int32 GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
        public const Int32 GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
        public const Int32 GL_VERTEX_ID_NV = 0x8C7B;
        public const Int32 GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
        public const Int32 GL_VERTEX_PRECLIP_SGIX = 0x83EE;
        public const Int32 GL_VERTEX_PROGRAM_ARB = 0x8620;
        public const Int32 GL_VERTEX_PROGRAM_BINDING_NV = 0x864A;
        public const Int32 GL_VERTEX_PROGRAM_NV = 0x8620;
        public const Int32 GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2;
        public const Int32 GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
        public const Int32 GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642;
        public const Int32 GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642;
        public const Int32 GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
        public const Int32 GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643;
        public const Int32 GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643;
        public const Int32 GL_VERTEX_SHADER = 0x8B31;
        public const Int32 GL_VERTEX_SHADER_ARB = 0x8B31;
        public const Int32 GL_VERTEX_SHADER_BINDING_EXT = 0x8781;
        public const Int32 GL_VERTEX_SHADER_EXT = 0x8780;
        public const Int32 GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF;
        public const Int32 GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1;
        public const Int32 GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2;
        public const Int32 GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3;
        public const Int32 GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4;
        public const Int32 GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0;
        public const Int32 GL_VERTEX_SOURCE_ATI = 0x8774;
        public const Int32 GL_VERTEX_STATE_PROGRAM_NV = 0x8621;
        public const Int32 GL_VERTEX_STREAM0_ATI = 0x876C;
        public const Int32 GL_VERTEX_STREAM1_ATI = 0x876D;
        public const Int32 GL_VERTEX_STREAM2_ATI = 0x876E;
        public const Int32 GL_VERTEX_STREAM3_ATI = 0x876F;
        public const Int32 GL_VERTEX_STREAM4_ATI = 0x8770;
        public const Int32 GL_VERTEX_STREAM5_ATI = 0x8771;
        public const Int32 GL_VERTEX_STREAM6_ATI = 0x8772;
        public const Int32 GL_VERTEX_STREAM7_ATI = 0x8773;
        public const Int32 GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C;
        public const Int32 GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510;
        public const Int32 GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D;
        public const Int32 GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F;
        public const Int32 GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E;
        public const Int32 GL_VERTEX_WEIGHTING_EXT = 0x8509;
        public const Int32 GL_VERTEX23_BIT_PGI = 0x00000004;
        public const Int32 GL_VERTEX4_BIT_PGI = 0x00000008;
        public const Int32 GL_VIBRANCE_BIAS_NV = 0x8719;
        public const Int32 GL_VIBRANCE_SCALE_NV = 0x8713;
        public const Int32 GL_VIEWPORT = 0x0BA2;
        public const Int32 GL_VIEWPORT_BIT = 0x00000800;
        public const Int32 GL_W_EXT = 0x87D8;
        public const Int32 GL_WEIGHT_ARRAY_ARB = 0x86AD;
        public const Int32 GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
        public const Int32 GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E;
        public const Int32 GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC;
        public const Int32 GL_WEIGHT_ARRAY_SIZE_ARB = 0x86AB;
        public const Int32 GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA;
        public const Int32 GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9;
        public const Int32 GL_WEIGHT_SUM_UNITY_ARB = 0x86A6;
        public const Int32 GL_WIDE_LINE_HINT_PGI = 0x1A222;
        public const Int32 GL_WRAP_BORDER_SUN = 0x81D4;
        public const Int32 GL_WRITE_ONLY = 0x88B9;
        public const Int32 GL_WRITE_ONLY_ARB = 0x88B9;
        public const Int32 GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A;
        public const Int32 GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878;
        public const Int32 GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C;
        public const Int32 GL_X_EXT = 0x87D5;
        public const Int32 GL_XOR = 0x1506;
        public const Int32 GL_Y_EXT = 0x87D6;
        public const Int32 GL_YCBCR_422_APPLE = 0x85B9;
        public const Int32 GL_YCBCR_MESA = 0x8757;
        public const Int32 GL_YCRCB_422_SGIX = 0x81BB;
        public const Int32 GL_YCRCB_444_SGIX = 0x81BC;
        public const Int32 GL_YCRCB_SGIX = 0x8318;
        public const Int32 GL_YCRCBA_SGIX = 0x8319;
        public const Int32 GL_Z_EXT = 0x87D7;
        public const Int32 GL_ZERO = 0;
        public const Int32 GL_ZERO_EXT = 0x87DD;
        public const Int32 GL_ZOOM_X = 0x0D16;
        public const Int32 GL_ZOOM_Y = 0x0D17;
        #endregion
        #region OpenGL functions
        public static void glAccum(GLenum op, GLfloat value)
        {
            Delegates.glAccum(op, value);
        }
        public static void glActiveStencilFaceEXT(GLenum face)
        {
            Delegates.glActiveStencilFaceEXT(face);
        }
        public static void glActiveTexture(GLenum texture)
        {
            Delegates.glActiveTexture(texture);
        }
        public static void glActiveTextureARB(GLenum texture)
        {
            Delegates.glActiveTextureARB(texture);
        }
        public static void glActiveVaryingNV(GLuint program, string name)
        {
            Delegates.glActiveVaryingNV(program, name);
        }
        public static void glAlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
        {
            Delegates.glAlphaFragmentOp1ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
        }
        public static void glAlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
        {
            Delegates.glAlphaFragmentOp2ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        }
        public static void glAlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
        {
            Delegates.glAlphaFragmentOp3ATI(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        }
        public static void glAlphaFunc(GLenum func, GLclampf @ref)
        {
            Delegates.glAlphaFunc(func, @ref);
        }
        public static void glApplyTextureEXT(GLenum mode)
        {
            Delegates.glApplyTextureEXT(mode);
        }
        public static GLboolean glAreProgramsResidentNV(GLsizei n, GLuint[] programs, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreProgramsResidentNV(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                return retval;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean glAreProgramsResidentNV(GLsizei n, GLuint[] programs, [In, Out()] System.IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            residences = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreProgramsResidentNV(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                residences = (System.IntPtr)h1.Target;
                return retval;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean glAreProgramsResidentNV(GLsizei n, System.IntPtr programs, out GLboolean residences)
        {
            residences = default(GLboolean);
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreProgramsResidentNV(n, programs, h0.AddrOfPinnedObject());
                residences = (GLboolean)h0.Target;
                return retval;
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLboolean glAreProgramsResidentNV(GLsizei n, GLuint[] programs, out GLboolean residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            residences = default(GLboolean);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreProgramsResidentNV(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                residences = (GLboolean)h1.Target;
                return retval;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean glAreProgramsResidentNV(GLsizei n, ref GLuint programs, out GLboolean residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            residences = default(GLboolean);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreProgramsResidentNV(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                residences = (GLboolean)h1.Target;
                return retval;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean glAreProgramsResidentNV(GLsizei n, ref GLuint programs, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreProgramsResidentNV(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                return retval;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean glAreProgramsResidentNV(GLsizei n, ref GLuint programs, [In, Out()] System.IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            residences = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreProgramsResidentNV(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                residences = (System.IntPtr)h1.Target;
                return retval;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean glAreProgramsResidentNV(GLsizei n, System.IntPtr programs, [In, Out()] System.IntPtr residences)
        {
            return Delegates.glAreProgramsResidentNV(n, programs, residences);
        }
        public static GLboolean glAreProgramsResidentNV(GLsizei n, System.IntPtr programs, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreProgramsResidentNV(n, programs, h0.AddrOfPinnedObject());
                return retval;
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLboolean glAreTexturesResident(GLsizei n, GLuint[] textures, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreTexturesResident(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                return retval;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean glAreTexturesResident(GLsizei n, System.IntPtr textures, [In, Out()] System.IntPtr residences)
        {
            return Delegates.glAreTexturesResident(n, textures, residences);
        }
        public static GLboolean glAreTexturesResident(GLsizei n, System.IntPtr textures, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreTexturesResident(n, textures, h0.AddrOfPinnedObject());
                return retval;
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLboolean glAreTexturesResident(GLsizei n, GLuint[] textures, out GLboolean residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            residences = default(GLboolean);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreTexturesResident(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                residences = (GLboolean)h1.Target;
                return retval;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean glAreTexturesResident(GLsizei n, ref GLuint textures, out GLboolean residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            residences = default(GLboolean);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreTexturesResident(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                residences = (GLboolean)h1.Target;
                return retval;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean glAreTexturesResident(GLsizei n, ref GLuint textures, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreTexturesResident(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                return retval;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean glAreTexturesResident(GLsizei n, ref GLuint textures, [In, Out()] System.IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            residences = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreTexturesResident(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                residences = (System.IntPtr)h1.Target;
                return retval;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean glAreTexturesResident(GLsizei n, System.IntPtr textures, out GLboolean residences)
        {
            residences = default(GLboolean);
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreTexturesResident(n, textures, h0.AddrOfPinnedObject());
                residences = (GLboolean)h0.Target;
                return retval;
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLboolean glAreTexturesResident(GLsizei n, GLuint[] textures, [In, Out()] System.IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            residences = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreTexturesResident(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                residences = (System.IntPtr)h1.Target;
                return retval;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean glAreTexturesResidentEXT(GLsizei n, GLuint[] textures, out GLboolean residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            residences = default(GLboolean);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreTexturesResidentEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                residences = (GLboolean)h1.Target;
                return retval;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean glAreTexturesResidentEXT(GLsizei n, GLuint[] textures, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreTexturesResidentEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                return retval;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean glAreTexturesResidentEXT(GLsizei n, ref GLuint textures, [In, Out()] System.IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            residences = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreTexturesResidentEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                residences = (System.IntPtr)h1.Target;
                return retval;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean glAreTexturesResidentEXT(GLsizei n, ref GLuint textures, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreTexturesResidentEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                return retval;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean glAreTexturesResidentEXT(GLsizei n, System.IntPtr textures, [In, Out()] System.IntPtr residences)
        {
            return Delegates.glAreTexturesResidentEXT(n, textures, residences);
        }
        public static GLboolean glAreTexturesResidentEXT(GLsizei n, GLuint[] textures, [In, Out()] System.IntPtr residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            residences = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreTexturesResidentEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                residences = (System.IntPtr)h1.Target;
                return retval;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean glAreTexturesResidentEXT(GLsizei n, System.IntPtr textures, GLboolean[] residences)
        {
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreTexturesResidentEXT(n, textures, h0.AddrOfPinnedObject());
                return retval;
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLboolean glAreTexturesResidentEXT(GLsizei n, ref GLuint textures, out GLboolean residences)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            residences = default(GLboolean);
            GCHandle h1 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreTexturesResidentEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                residences = (GLboolean)h1.Target;
                return retval;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLboolean glAreTexturesResidentEXT(GLsizei n, System.IntPtr textures, out GLboolean residences)
        {
            residences = default(GLboolean);
            GCHandle h0 = GCHandle.Alloc(residences, GCHandleType.Pinned);
            try
            {
                GLboolean retval;
                retval = Delegates.glAreTexturesResidentEXT(n, textures, h0.AddrOfPinnedObject());
                residences = (GLboolean)h0.Target;
                return retval;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glArrayElement(GLint i)
        {
            Delegates.glArrayElement(i);
        }
        public static void glArrayElementEXT(GLint i)
        {
            Delegates.glArrayElementEXT(i);
        }
        public static void glArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
        {
            Delegates.glArrayObjectATI(array, size, type, stride, buffer, offset);
        }
        public static void glAsyncMarkerSGIX(GLuint marker)
        {
            Delegates.glAsyncMarkerSGIX(marker);
        }
        public static void glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj)
        {
            Delegates.glAttachObjectARB(containerObj, obj);
        }
        public static void glAttachShader(GLuint program, GLuint shader)
        {
            Delegates.glAttachShader(program, shader);
        }
        public static void glBegin(GLenum mode)
        {
            Delegates.glBegin(mode);
        }
        public static void glBeginFragmentShaderATI()
        {
            Delegates.glBeginFragmentShaderATI();
        }
        public static void glBeginOcclusionQueryNV(GLuint id)
        {
            Delegates.glBeginOcclusionQueryNV(id);
        }
        public static void glBeginQuery(GLenum target, GLuint id)
        {
            Delegates.glBeginQuery(target, id);
        }
        public static void glBeginQueryARB(GLenum target, GLuint id)
        {
            Delegates.glBeginQueryARB(target, id);
        }
        public static void glBeginTransformFeedbackNV(GLenum primitiveMode)
        {
            Delegates.glBeginTransformFeedbackNV(primitiveMode);
        }
        public static void glBeginVertexShaderEXT()
        {
            Delegates.glBeginVertexShaderEXT();
        }
        public static void glBindAttribLocation(GLuint program, GLuint index, string name)
        {
            Delegates.glBindAttribLocation(program, index, name);
        }
        public static void glBindAttribLocationARB(GLhandleARB programObj, GLuint index, string name)
        {
            Delegates.glBindAttribLocationARB(programObj, index, name);
        }
        public static void glBindBuffer(GLenum target, GLuint buffer)
        {
            Delegates.glBindBuffer(target, buffer);
        }
        public static void glBindBufferARB(GLenum target, GLuint buffer)
        {
            Delegates.glBindBufferARB(target, buffer);
        }
        public static void glBindBufferBaseNV(GLenum target, GLuint index, GLuint buffer)
        {
            Delegates.glBindBufferBaseNV(target, index, buffer);
        }
        public static void glBindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset)
        {
            Delegates.glBindBufferOffsetNV(target, index, buffer, offset);
        }
        public static void glBindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
        {
            Delegates.glBindBufferRangeNV(target, index, buffer, offset, size);
        }
        public static void glBindFragDataLocationEXT(GLuint program, GLuint color, string name)
        {
            Delegates.glBindFragDataLocationEXT(program, color, name);
        }
        public static void glBindFragmentShaderATI(GLuint id)
        {
            Delegates.glBindFragmentShaderATI(id);
        }
        public static void glBindFramebufferEXT(GLenum target, GLuint framebuffer)
        {
            Delegates.glBindFramebufferEXT(target, framebuffer);
        }
        public static GLuint glBindLightParameterEXT(GLenum light, GLenum value)
        {
            return Delegates.glBindLightParameterEXT(light, value);
        }
        public static GLuint glBindMaterialParameterEXT(GLenum face, GLenum value)
        {
            return Delegates.glBindMaterialParameterEXT(face, value);
        }
        public static GLuint glBindParameterEXT(GLenum value)
        {
            return Delegates.glBindParameterEXT(value);
        }
        public static void glBindProgramARB(GLenum target, GLuint program)
        {
            Delegates.glBindProgramARB(target, program);
        }
        public static void glBindProgramNV(GLenum target, GLuint id)
        {
            Delegates.glBindProgramNV(target, id);
        }
        public static void glBindRenderbufferEXT(GLenum target, GLuint renderbuffer)
        {
            Delegates.glBindRenderbufferEXT(target, renderbuffer);
        }
        public static GLuint glBindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value)
        {
            return Delegates.glBindTexGenParameterEXT(unit, coord, value);
        }
        public static void glBindTexture(GLenum target, GLuint texture)
        {
            Delegates.glBindTexture(target, texture);
        }
        public static void glBindTextureEXT(GLenum target, GLuint texture)
        {
            Delegates.glBindTextureEXT(target, texture);
        }
        public static GLuint glBindTextureUnitParameterEXT(GLenum unit, GLenum value)
        {
            return Delegates.glBindTextureUnitParameterEXT(unit, value);
        }
        public static void glBindVertexArrayAPPLE(GLuint array)
        {
            Delegates.glBindVertexArrayAPPLE(array);
        }
        public static void glBindVertexShaderEXT(GLuint id)
        {
            Delegates.glBindVertexShaderEXT(id);
        }
        public static void glBinormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz)
        {
            Delegates.glBinormal3bEXT(bx, by, bz);
        }
        public static void glBinormal3bvEXT(ref GLbyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3bvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glBinormal3bvEXT(System.IntPtr v)
        {
            Delegates.glBinormal3bvEXT(v);
        }
        public static void glBinormal3bvEXT(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3bvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glBinormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz)
        {
            Delegates.glBinormal3dEXT(bx, by, bz);
        }
        public static void glBinormal3dvEXT(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3dvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glBinormal3dvEXT(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3dvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glBinormal3dvEXT(System.IntPtr v)
        {
            Delegates.glBinormal3dvEXT(v);
        }
        public static void glBinormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz)
        {
            Delegates.glBinormal3fEXT(bx, by, bz);
        }
        public static void glBinormal3fvEXT(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3fvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glBinormal3fvEXT(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3fvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glBinormal3fvEXT(System.IntPtr v)
        {
            Delegates.glBinormal3fvEXT(v);
        }
        public static void glBinormal3iEXT(GLint bx, GLint by, GLint bz)
        {
            Delegates.glBinormal3iEXT(bx, by, bz);
        }
        public static void glBinormal3ivEXT(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3ivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glBinormal3ivEXT(System.IntPtr v)
        {
            Delegates.glBinormal3ivEXT(v);
        }
        public static void glBinormal3ivEXT(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3ivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glBinormal3sEXT(GLshort bx, GLshort by, GLshort bz)
        {
            Delegates.glBinormal3sEXT(bx, by, bz);
        }
        public static void glBinormal3svEXT(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3svEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glBinormal3svEXT(System.IntPtr v)
        {
            Delegates.glBinormal3svEXT(v);
        }
        public static void glBinormal3svEXT(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormal3svEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glBinormalPointerEXT(GLenum type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glBinormalPointerEXT(type, stride, pointer);
        }
        public static void glBinormalPointerEXT(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glBinormalPointerEXT(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, GLubyte[] bitmap)
        {
            GCHandle h0 = GCHandle.Alloc(bitmap, GCHandleType.Pinned);
            try
            {
                Delegates.glBitmap(width, height, xorig, yorig, xmove, ymove, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, System.IntPtr bitmap)
        {
            Delegates.glBitmap(width, height, xorig, yorig, xmove, ymove, bitmap);
        }
        public static void glBitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, ref GLubyte bitmap)
        {
            GCHandle h0 = GCHandle.Alloc(bitmap, GCHandleType.Pinned);
            try
            {
                Delegates.glBitmap(width, height, xorig, yorig, xmove, ymove, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
        {
            Delegates.glBlendColor(red, green, blue, alpha);
        }
        public static void glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
        {
            Delegates.glBlendColorEXT(red, green, blue, alpha);
        }
        public static void glBlendEquation(GLenum mode)
        {
            Delegates.glBlendEquation(mode);
        }
        public static void glBlendEquationEXT(GLenum mode)
        {
            Delegates.glBlendEquationEXT(mode);
        }
        public static void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
        {
            Delegates.glBlendEquationSeparate(modeRGB, modeAlpha);
        }
        public static void glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha)
        {
            Delegates.glBlendEquationSeparateEXT(modeRGB, modeAlpha);
        }
        public static void glBlendFunc(GLenum sfactor, GLenum dfactor)
        {
            Delegates.glBlendFunc(sfactor, dfactor);
        }
        public static void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
        {
            Delegates.glBlendFuncSeparate(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        public static void glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
        {
            Delegates.glBlendFuncSeparateEXT(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        public static void glBlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
        {
            Delegates.glBlendFuncSeparateINGR(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
        }
        public static void glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
        {
            Delegates.glBlitFramebufferEXT(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
        }
        public static void glBufferData(GLenum target, GLsizeiptr size, object data, GLenum usage)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferData(target, size, h0.AddrOfPinnedObject(), usage);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glBufferData(GLenum target, GLsizeiptr size, System.IntPtr data, GLenum usage)
        {
            Delegates.glBufferData(target, size, data, usage);
        }
        public static void glBufferDataARB(GLenum target, GLsizeiptrARB size, object data, GLenum usage)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferDataARB(target, size, h0.AddrOfPinnedObject(), usage);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glBufferDataARB(GLenum target, GLsizeiptrARB size, System.IntPtr data, GLenum usage)
        {
            Delegates.glBufferDataARB(target, size, data, usage);
        }
        public static void glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param)
        {
            Delegates.glBufferParameteriAPPLE(target, pname, param);
        }
        public static void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, System.IntPtr data)
        {
            Delegates.glBufferSubData(target, offset, size, data);
        }
        public static void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferSubData(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glBufferSubDataARB(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, System.IntPtr data)
        {
            Delegates.glBufferSubDataARB(target, offset, size, data);
        }
        public static void glCallList(GLuint list)
        {
            Delegates.glCallList(list);
        }
        public static void glCallLists(GLsizei n, GLenum type, object lists)
        {
            GCHandle h0 = GCHandle.Alloc(lists, GCHandleType.Pinned);
            try
            {
                Delegates.glCallLists(n, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCallLists(GLsizei n, GLenum type, System.IntPtr lists)
        {
            Delegates.glCallLists(n, type, lists);
        }
        public static GLenum glCheckFramebufferStatusEXT(GLenum target)
        {
            return Delegates.glCheckFramebufferStatusEXT(target);
        }
        public static void glClampColorARB(GLenum target, GLenum clamp)
        {
            Delegates.glClampColorARB(target, clamp);
        }
        public static void glClear(GLbitfield mask)
        {
            Delegates.glClear(mask);
        }
        public static void glClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
        {
            Delegates.glClearAccum(red, green, blue, alpha);
        }
        public static void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
        {
            Delegates.glClearColor(red, green, blue, alpha);
        }
        public static void glClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha)
        {
            Delegates.glClearColorIiEXT(red, green, blue, alpha);
        }
        public static void glClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha)
        {
            Delegates.glClearColorIuiEXT(red, green, blue, alpha);
        }
        public static void glClearDepth(GLclampd depth)
        {
            Delegates.glClearDepth(depth);
        }
        public static void glClearDepthdNV(GLdouble depth)
        {
            Delegates.glClearDepthdNV(depth);
        }
        public static void glClearIndex(GLfloat c)
        {
            Delegates.glClearIndex(c);
        }
        public static void glClearStencil(GLint s)
        {
            Delegates.glClearStencil(s);
        }
        public static void glClientActiveTexture(GLenum texture)
        {
            Delegates.glClientActiveTexture(texture);
        }
        public static void glClientActiveTextureARB(GLenum texture)
        {
            Delegates.glClientActiveTextureARB(texture);
        }
        public static void glClientActiveVertexStreamATI(GLenum stream)
        {
            Delegates.glClientActiveVertexStreamATI(stream);
        }
        public static void glClipPlane(GLenum plane, System.IntPtr equation)
        {
            Delegates.glClipPlane(plane, equation);
        }
        public static void glClipPlane(GLenum plane, GLdouble[] equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                Delegates.glClipPlane(plane, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glClipPlane(GLenum plane, ref GLdouble equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                Delegates.glClipPlane(plane, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3b(GLbyte red, GLbyte green, GLbyte blue)
        {
            Delegates.glColor3b(red, green, blue);
        }
        public static void glColor3bv(ref GLbyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3bv(System.IntPtr v)
        {
            Delegates.glColor3bv(v);
        }
        public static void glColor3d(GLdouble red, GLdouble green, GLdouble blue)
        {
            Delegates.glColor3d(red, green, blue);
        }
        public static void glColor3dv(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3dv(System.IntPtr v)
        {
            Delegates.glColor3dv(v);
        }
        public static void glColor3f(GLfloat red, GLfloat green, GLfloat blue)
        {
            Delegates.glColor3f(red, green, blue);
        }
        public static void glColor3fv(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3fv(System.IntPtr v)
        {
            Delegates.glColor3fv(v);
        }
        public static void glColor3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glColor3fVertex3fSUN(r, g, b, x, y, z);
        }
        public static void glColor3fVertex3fvSUN(ref GLfloat c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor3fVertex3fvSUN(System.IntPtr c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fVertex3fvSUN(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3fVertex3fvSUN(ref GLfloat c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor3fVertex3fvSUN(ref GLfloat c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3fVertex3fvSUN(GLfloat[] c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor3fVertex3fvSUN(GLfloat[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3fVertex3fvSUN(GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor3fVertex3fvSUN(System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3fVertex3fvSUN(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3fVertex3fvSUN(System.IntPtr c, System.IntPtr v)
        {
            Delegates.glColor3fVertex3fvSUN(c, v);
        }
        public static void glColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
        {
            Delegates.glColor3hNV(red, green, blue);
        }
        public static void glColor3hvNV(System.IntPtr v)
        {
            Delegates.glColor3hvNV(v);
        }
        public static void glColor3hvNV(ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3i(GLint red, GLint green, GLint blue)
        {
            Delegates.glColor3i(red, green, blue);
        }
        public static void glColor3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3iv(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3iv(System.IntPtr v)
        {
            Delegates.glColor3iv(v);
        }
        public static void glColor3s(GLshort red, GLshort green, GLshort blue)
        {
            Delegates.glColor3s(red, green, blue);
        }
        public static void glColor3sv(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3sv(System.IntPtr v)
        {
            Delegates.glColor3sv(v);
        }
        public static void glColor3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3ub(GLubyte red, GLubyte green, GLubyte blue)
        {
            Delegates.glColor3ub(red, green, blue);
        }
        public static void glColor3ubv(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3ubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3ubv(ref GLubyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3ubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3ubv(System.IntPtr v)
        {
            Delegates.glColor3ubv(v);
        }
        public static void glColor3ui(GLuint red, GLuint green, GLuint blue)
        {
            Delegates.glColor3ui(red, green, blue);
        }
        public static void glColor3uiv(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3uiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3uiv(System.IntPtr v)
        {
            Delegates.glColor3uiv(v);
        }
        public static void glColor3uiv(ref GLuint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3uiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3us(GLushort red, GLushort green, GLushort blue)
        {
            Delegates.glColor3us(red, green, blue);
        }
        public static void glColor3usv(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3usv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor3usv(System.IntPtr v)
        {
            Delegates.glColor3usv(v);
        }
        public static void glColor3usv(ref GLushort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor3usv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)
        {
            Delegates.glColor4b(red, green, blue, alpha);
        }
        public static void glColor4bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4bv(ref GLbyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4bv(System.IntPtr v)
        {
            Delegates.glColor4bv(v);
        }
        public static void glColor4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)
        {
            Delegates.glColor4d(red, green, blue, alpha);
        }
        public static void glColor4dv(System.IntPtr v)
        {
            Delegates.glColor4dv(v);
        }
        public static void glColor4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4dv(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
        {
            Delegates.glColor4f(red, green, blue, alpha);
        }
        public static void glColor4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glColor4fNormal3fVertex3fSUN(r, g, b, a, nx, ny, nz, x, y, z);
        }
        public static void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(ref GLfloat c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(ref GLfloat c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(ref GLfloat c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(System.IntPtr c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(System.IntPtr c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(ref GLfloat c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(System.IntPtr c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            Delegates.glColor4fNormal3fVertex3fvSUN(c, n, v);
        }
        public static void glColor4fNormal3fVertex3fvSUN(System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(System.IntPtr c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(ref GLfloat c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(ref GLfloat c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(System.IntPtr c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(ref GLfloat c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(ref GLfloat c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4fNormal3fVertex3fvSUN(ref GLfloat c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glColor4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4fv(System.IntPtr v)
        {
            Delegates.glColor4fv(v);
        }
        public static void glColor4fv(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)
        {
            Delegates.glColor4hNV(red, green, blue, alpha);
        }
        public static void glColor4hvNV(System.IntPtr v)
        {
            Delegates.glColor4hvNV(v);
        }
        public static void glColor4hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4hvNV(ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4i(GLint red, GLint green, GLint blue, GLint alpha)
        {
            Delegates.glColor4i(red, green, blue, alpha);
        }
        public static void glColor4iv(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4iv(System.IntPtr v)
        {
            Delegates.glColor4iv(v);
        }
        public static void glColor4s(GLshort red, GLshort green, GLshort blue, GLshort alpha)
        {
            Delegates.glColor4s(red, green, blue, alpha);
        }
        public static void glColor4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4sv(System.IntPtr v)
        {
            Delegates.glColor4sv(v);
        }
        public static void glColor4sv(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)
        {
            Delegates.glColor4ub(red, green, blue, alpha);
        }
        public static void glColor4ubv(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4ubv(ref GLubyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4ubv(System.IntPtr v)
        {
            Delegates.glColor4ubv(v);
        }
        public static void glColor4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)
        {
            Delegates.glColor4ubVertex2fSUN(r, g, b, a, x, y);
        }
        public static void glColor4ubVertex2fvSUN(ref GLubyte c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex2fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4ubVertex2fvSUN(System.IntPtr c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex2fvSUN(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4ubVertex2fvSUN(GLubyte[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex2fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4ubVertex2fvSUN(System.IntPtr c, System.IntPtr v)
        {
            Delegates.glColor4ubVertex2fvSUN(c, v);
        }
        public static void glColor4ubVertex2fvSUN(System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex2fvSUN(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4ubVertex2fvSUN(ref GLubyte c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex2fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4ubVertex2fvSUN(ref GLubyte c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex2fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4ubVertex2fvSUN(GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex2fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4ubVertex2fvSUN(GLubyte[] c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex2fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glColor4ubVertex3fSUN(r, g, b, a, x, y, z);
        }
        public static void glColor4ubVertex3fvSUN(GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4ubVertex3fvSUN(ref GLubyte c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4ubVertex3fvSUN(ref GLubyte c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4ubVertex3fvSUN(ref GLubyte c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4ubVertex3fvSUN(GLubyte[] c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glColor4ubVertex3fvSUN(System.IntPtr c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex3fvSUN(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4ubVertex3fvSUN(System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex3fvSUN(c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4ubVertex3fvSUN(System.IntPtr c, System.IntPtr v)
        {
            Delegates.glColor4ubVertex3fvSUN(c, v);
        }
        public static void glColor4ubVertex3fvSUN(GLubyte[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha)
        {
            Delegates.glColor4ui(red, green, blue, alpha);
        }
        public static void glColor4uiv(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4uiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4uiv(ref GLuint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4uiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4uiv(System.IntPtr v)
        {
            Delegates.glColor4uiv(v);
        }
        public static void glColor4us(GLushort red, GLushort green, GLushort blue, GLushort alpha)
        {
            Delegates.glColor4us(red, green, blue, alpha);
        }
        public static void glColor4usv(ref GLushort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4usv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4usv(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glColor4usv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColor4usv(System.IntPtr v)
        {
            Delegates.glColor4usv(v);
        }
        public static void glColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)
        {
            Delegates.glColorFragmentOp1ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
        }
        public static void glColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)
        {
            Delegates.glColorFragmentOp2ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
        }
        public static void glColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)
        {
            Delegates.glColorFragmentOp3ATI(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
        }
        public static void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
        {
            Delegates.glColorMask(red, green, blue, alpha);
        }
        public static void glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
        {
            Delegates.glColorMaskIndexedEXT(index, r, g, b, a);
        }
        public static void glColorMaterial(GLenum face, GLenum mode)
        {
            Delegates.glColorMaterial(face, mode);
        }
        public static void glColorPointer(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointer(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColorPointer(GLint size, GLenum type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glColorPointer(size, type, stride, pointer);
        }
        public static void glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, System.IntPtr pointer)
        {
            Delegates.glColorPointerEXT(size, type, stride, count, pointer);
        }
        public static void glColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glColorPointerEXT(size, type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColorPointerListIBM(GLint size, GLenum type, GLint stride, System.IntPtr pointer, GLint ptrstride)
        {
            Delegates.glColorPointerListIBM(size, type, stride, pointer, ptrstride);
        }
        public static void glColorPointervINTEL(GLint size, GLenum type, System.IntPtr pointer)
        {
            Delegates.glColorPointervINTEL(size, type, pointer);
        }
        public static void glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, System.IntPtr data)
        {
            Delegates.glColorSubTable(target, start, count, format, type, data);
        }
        public static void glColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glColorSubTable(target, start, count, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, System.IntPtr data)
        {
            Delegates.glColorSubTableEXT(target, start, count, format, type, data);
        }
        public static void glColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glColorSubTableEXT(target, start, count, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTable(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, System.IntPtr table)
        {
            Delegates.glColorTable(target, internalformat, width, format, type, table);
        }
        public static void glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableEXT(target, internalFormat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, System.IntPtr table)
        {
            Delegates.glColorTableEXT(target, internalFormat, width, format, type, table);
        }
        public static void glColorTableParameterfv(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glColorTableParameterfv(target, pname, @params);
        }
        public static void glColorTableParameterfv(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColorTableParameterfv(GLenum target, GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColorTableParameterfvSGI(GLenum target, GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameterfvSGI(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColorTableParameterfvSGI(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glColorTableParameterfvSGI(target, pname, @params);
        }
        public static void glColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameterfvSGI(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColorTableParameteriv(GLenum target, GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColorTableParameteriv(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glColorTableParameteriv(target, pname, @params);
        }
        public static void glColorTableParameteriv(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColorTableParameterivSGI(GLenum target, GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameterivSGI(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColorTableParameterivSGI(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableParameterivSGI(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColorTableParameterivSGI(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glColorTableParameterivSGI(target, pname, @params);
        }
        public static void glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glColorTableSGI(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, System.IntPtr table)
        {
            Delegates.glColorTableSGI(target, internalformat, width, format, type, table);
        }
        public static void glCombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
        {
            Delegates.glCombinerInputNV(stage, portion, variable, input, mapping, componentUsage);
        }
        public static void glCombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)
        {
            Delegates.glCombinerOutputNV(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
        }
        public static void glCombinerParameterfNV(GLenum pname, GLfloat param)
        {
            Delegates.glCombinerParameterfNV(pname, param);
        }
        public static void glCombinerParameterfvNV(GLenum pname, System.IntPtr @params)
        {
            Delegates.glCombinerParameterfvNV(pname, @params);
        }
        public static void glCombinerParameterfvNV(GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glCombinerParameterfvNV(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCombinerParameterfvNV(GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glCombinerParameterfvNV(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCombinerParameteriNV(GLenum pname, GLint param)
        {
            Delegates.glCombinerParameteriNV(pname, param);
        }
        public static void glCombinerParameterivNV(GLenum pname, System.IntPtr @params)
        {
            Delegates.glCombinerParameterivNV(pname, @params);
        }
        public static void glCombinerParameterivNV(GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glCombinerParameterivNV(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCombinerParameterivNV(GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glCombinerParameterivNV(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glCombinerStageParameterfvNV(stage, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCombinerStageParameterfvNV(GLenum stage, GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glCombinerStageParameterfvNV(stage, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCombinerStageParameterfvNV(GLenum stage, GLenum pname, System.IntPtr @params)
        {
            Delegates.glCombinerStageParameterfvNV(stage, pname, @params);
        }
        public static void glCompileShader(GLuint shader)
        {
            Delegates.glCompileShader(shader);
        }
        public static void glCompileShaderARB(GLhandleARB shaderObj)
        {
            Delegates.glCompileShaderARB(shaderObj);
        }
        public static void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexImage1D(target, level, internalformat, width, border, imageSize, data);
        }
        public static void glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, data);
        }
        public static void glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage1DARB(target, level, internalformat, width, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, data);
        }
        public static void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage2D(target, level, internalformat, width, height, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, data);
        }
        public static void glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage2DARB(target, level, internalformat, width, height, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexImage3D(target, level, internalformat, width, height, depth, border, imageSize, data);
        }
        public static void glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexImage3DARB(target, level, internalformat, width, height, depth, border, imageSize, data);
        }
        public static void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexSubImage1D(target, level, xoffset, width, format, imageSize, data);
        }
        public static void glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexSubImage1DARB(target, level, xoffset, width, format, imageSize, data);
        }
        public static void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        public static void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexSubImage2DARB(target, level, xoffset, yoffset, width, height, format, imageSize, data);
        }
        public static void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        public static void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, System.IntPtr data)
        {
            Delegates.glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
        }
        public static void glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glCompressedTexSubImage3DARB(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, System.IntPtr image)
        {
            Delegates.glConvolutionFilter1D(target, internalformat, width, format, type, image);
        }
        public static void glConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter1D(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, System.IntPtr image)
        {
            Delegates.glConvolutionFilter1DEXT(target, internalformat, width, format, type, image);
        }
        public static void glConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter1DEXT(target, internalformat, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter2D(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr image)
        {
            Delegates.glConvolutionFilter2D(target, internalformat, width, height, format, type, image);
        }
        public static void glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr image)
        {
            Delegates.glConvolutionFilter2DEXT(target, internalformat, width, height, format, type, image);
        }
        public static void glConvolutionParameterf(GLenum target, GLenum pname, GLfloat @params)
        {
            Delegates.glConvolutionParameterf(target, pname, @params);
        }
        public static void glConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat @params)
        {
            Delegates.glConvolutionParameterfEXT(target, pname, @params);
        }
        public static void glConvolutionParameterfv(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glConvolutionParameterfv(target, pname, @params);
        }
        public static void glConvolutionParameterfv(GLenum target, GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glConvolutionParameterfv(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glConvolutionParameterfvEXT(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glConvolutionParameterfvEXT(target, pname, @params);
        }
        public static void glConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glConvolutionParameterfvEXT(GLenum target, GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glConvolutionParameteri(GLenum target, GLenum pname, GLint @params)
        {
            Delegates.glConvolutionParameteri(target, pname, @params);
        }
        public static void glConvolutionParameteriEXT(GLenum target, GLenum pname, GLint @params)
        {
            Delegates.glConvolutionParameteriEXT(target, pname, @params);
        }
        public static void glConvolutionParameteriv(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glConvolutionParameteriv(GLenum target, GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glConvolutionParameteriv(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glConvolutionParameteriv(target, pname, @params);
        }
        public static void glConvolutionParameterivEXT(GLenum target, GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glConvolutionParameterivEXT(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glConvolutionParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glConvolutionParameterivEXT(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glConvolutionParameterivEXT(target, pname, @params);
        }
        public static void glCopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyColorSubTable(target, start, x, y, width);
        }
        public static void glCopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyColorSubTableEXT(target, start, x, y, width);
        }
        public static void glCopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyColorTable(target, internalformat, x, y, width);
        }
        public static void glCopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyColorTableSGI(target, internalformat, x, y, width);
        }
        public static void glCopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyConvolutionFilter1D(target, internalformat, x, y, width);
        }
        public static void glCopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyConvolutionFilter1DEXT(target, internalformat, x, y, width);
        }
        public static void glCopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyConvolutionFilter2D(target, internalformat, x, y, width, height);
        }
        public static void glCopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyConvolutionFilter2DEXT(target, internalformat, x, y, width, height);
        }
        public static void glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)
        {
            Delegates.glCopyPixels(x, y, width, height, type);
        }
        public static void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
        {
            Delegates.glCopyTexImage1D(target, level, internalformat, x, y, width, border);
        }
        public static void glCopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
        {
            Delegates.glCopyTexImage1DEXT(target, level, internalformat, x, y, width, border);
        }
        public static void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
        {
            Delegates.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border);
        }
        public static void glCopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
        {
            Delegates.glCopyTexImage2DEXT(target, level, internalformat, x, y, width, height, border);
        }
        public static void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyTexSubImage1D(target, level, xoffset, x, y, width);
        }
        public static void glCopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
        {
            Delegates.glCopyTexSubImage1DEXT(target, level, xoffset, x, y, width);
        }
        public static void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
        }
        public static void glCopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyTexSubImage2DEXT(target, level, xoffset, yoffset, x, y, width, height);
        }
        public static void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        public static void glCopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glCopyTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        }
        public static GLuint glCreateProgram()
        {
            return Delegates.glCreateProgram();
        }
        public static GLhandleARB glCreateProgramObjectARB()
        {
            return Delegates.glCreateProgramObjectARB();
        }
        public static GLuint glCreateShader(GLenum type)
        {
            return Delegates.glCreateShader(type);
        }
        public static GLhandleARB glCreateShaderObjectARB(GLenum shaderType)
        {
            return Delegates.glCreateShaderObjectARB(shaderType);
        }
        public static void glCullFace(GLenum mode)
        {
            Delegates.glCullFace(mode);
        }
        public static void glCullParameterdvEXT(GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glCullParameterdvEXT(pname, @params);
        }
        public static void glCullParameterdvEXT(GLenum pname, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glCullParameterdvEXT(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCullParameterdvEXT(GLenum pname, out GLdouble @params)
        {
            @params = default(GLdouble);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glCullParameterdvEXT(pname, h0.AddrOfPinnedObject());
                @params = (GLdouble)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCullParameterfvEXT(GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glCullParameterfvEXT(pname, @params);
        }
        public static void glCullParameterfvEXT(GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glCullParameterfvEXT(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCullParameterfvEXT(GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glCullParameterfvEXT(pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glCurrentPaletteMatrixARB(GLint index)
        {
            Delegates.glCurrentPaletteMatrixARB(index);
        }
        public static void glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, GLdouble[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, System.IntPtr points)
        {
            Delegates.glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        }
        public static void glDeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, ref GLdouble points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glDeformationMap3dSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, System.IntPtr points)
        {
            Delegates.glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
        }
        public static void glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, ref GLfloat points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glDeformationMap3fSGIX(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeformSGIX(GLbitfield mask)
        {
            Delegates.glDeformSGIX(mask);
        }
        public static void glDeleteAsyncMarkersSGIX(GLuint marker, GLsizei range)
        {
            Delegates.glDeleteAsyncMarkersSGIX(marker, range);
        }
        public static void glDeleteBuffers(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteBuffers(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteBuffers(GLsizei n, System.IntPtr buffers)
        {
            Delegates.glDeleteBuffers(n, buffers);
        }
        public static void glDeleteBuffers(GLsizei n, ref GLuint buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteBuffers(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteBuffersARB(GLsizei n, System.IntPtr buffers)
        {
            Delegates.glDeleteBuffersARB(n, buffers);
        }
        public static void glDeleteBuffersARB(GLsizei n, ref GLuint buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteBuffersARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteBuffersARB(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteBuffersARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteFencesAPPLE(GLsizei n, ref GLuint fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteFencesAPPLE(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteFencesAPPLE(GLsizei n, System.IntPtr fences)
        {
            Delegates.glDeleteFencesAPPLE(n, fences);
        }
        public static void glDeleteFencesAPPLE(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteFencesAPPLE(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteFencesNV(GLsizei n, ref GLuint fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteFencesNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteFencesNV(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteFencesNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteFencesNV(GLsizei n, System.IntPtr fences)
        {
            Delegates.glDeleteFencesNV(n, fences);
        }
        public static void glDeleteFragmentShaderATI(GLuint id)
        {
            Delegates.glDeleteFragmentShaderATI(id);
        }
        public static void glDeleteFramebuffersEXT(GLsizei n, GLuint[] framebuffers)
        {
            GCHandle h0 = GCHandle.Alloc(framebuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteFramebuffersEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteFramebuffersEXT(GLsizei n, ref GLuint framebuffers)
        {
            GCHandle h0 = GCHandle.Alloc(framebuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteFramebuffersEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteFramebuffersEXT(GLsizei n, System.IntPtr framebuffers)
        {
            Delegates.glDeleteFramebuffersEXT(n, framebuffers);
        }
        public static void glDeleteLists(GLuint list, GLsizei range)
        {
            Delegates.glDeleteLists(list, range);
        }
        public static void glDeleteObjectARB(GLhandleARB obj)
        {
            Delegates.glDeleteObjectARB(obj);
        }
        public static void glDeleteOcclusionQueriesNV(GLsizei n, System.IntPtr ids)
        {
            Delegates.glDeleteOcclusionQueriesNV(n, ids);
        }
        public static void glDeleteOcclusionQueriesNV(GLsizei n, ref GLuint ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteOcclusionQueriesNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteOcclusionQueriesNV(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteOcclusionQueriesNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteProgram(GLuint program)
        {
            Delegates.glDeleteProgram(program);
        }
        public static void glDeleteProgramsARB(GLsizei n, ref GLuint programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteProgramsARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteProgramsARB(GLsizei n, System.IntPtr programs)
        {
            Delegates.glDeleteProgramsARB(n, programs);
        }
        public static void glDeleteProgramsARB(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteProgramsARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteProgramsNV(GLsizei n, ref GLuint programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteProgramsNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteProgramsNV(GLsizei n, System.IntPtr programs)
        {
            Delegates.glDeleteProgramsNV(n, programs);
        }
        public static void glDeleteProgramsNV(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteProgramsNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteQueries(GLsizei n, ref GLuint ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteQueries(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteQueries(GLsizei n, System.IntPtr ids)
        {
            Delegates.glDeleteQueries(n, ids);
        }
        public static void glDeleteQueries(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteQueries(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteQueriesARB(GLsizei n, ref GLuint ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteQueriesARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteQueriesARB(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteQueriesARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteQueriesARB(GLsizei n, System.IntPtr ids)
        {
            Delegates.glDeleteQueriesARB(n, ids);
        }
        public static void glDeleteRenderbuffersEXT(GLsizei n, GLuint[] renderbuffers)
        {
            GCHandle h0 = GCHandle.Alloc(renderbuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteRenderbuffersEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteRenderbuffersEXT(GLsizei n, System.IntPtr renderbuffers)
        {
            Delegates.glDeleteRenderbuffersEXT(n, renderbuffers);
        }
        public static void glDeleteRenderbuffersEXT(GLsizei n, ref GLuint renderbuffers)
        {
            GCHandle h0 = GCHandle.Alloc(renderbuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteRenderbuffersEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteShader(GLuint shader)
        {
            Delegates.glDeleteShader(shader);
        }
        public static void glDeleteTextures(GLsizei n, ref GLuint textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteTextures(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteTextures(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteTextures(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteTextures(GLsizei n, System.IntPtr textures)
        {
            Delegates.glDeleteTextures(n, textures);
        }
        public static void glDeleteTexturesEXT(GLsizei n, ref GLuint textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteTexturesEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteTexturesEXT(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteTexturesEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteTexturesEXT(GLsizei n, System.IntPtr textures)
        {
            Delegates.glDeleteTexturesEXT(n, textures);
        }
        public static void glDeleteVertexArraysAPPLE(GLsizei n, ref GLuint arrays)
        {
            GCHandle h0 = GCHandle.Alloc(arrays, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteVertexArraysAPPLE(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteVertexArraysAPPLE(GLsizei n, System.IntPtr arrays)
        {
            Delegates.glDeleteVertexArraysAPPLE(n, arrays);
        }
        public static void glDeleteVertexArraysAPPLE(GLsizei n, GLuint[] arrays)
        {
            GCHandle h0 = GCHandle.Alloc(arrays, GCHandleType.Pinned);
            try
            {
                Delegates.glDeleteVertexArraysAPPLE(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDeleteVertexShaderEXT(GLuint id)
        {
            Delegates.glDeleteVertexShaderEXT(id);
        }
        public static void glDepthBoundsdNV(GLdouble zmin, GLdouble zmax)
        {
            Delegates.glDepthBoundsdNV(zmin, zmax);
        }
        public static void glDepthBoundsEXT(GLclampd zmin, GLclampd zmax)
        {
            Delegates.glDepthBoundsEXT(zmin, zmax);
        }
        public static void glDepthFunc(GLenum func)
        {
            Delegates.glDepthFunc(func);
        }
        public static void glDepthMask(GLboolean flag)
        {
            Delegates.glDepthMask(flag);
        }
        public static void glDepthRange(GLclampd near, GLclampd far)
        {
            Delegates.glDepthRange(near, far);
        }
        public static void glDepthRangedNV(GLdouble zNear, GLdouble zFar)
        {
            Delegates.glDepthRangedNV(zNear, zFar);
        }
        public static void glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj)
        {
            Delegates.glDetachObjectARB(containerObj, attachedObj);
        }
        public static void glDetachShader(GLuint program, GLuint shader)
        {
            Delegates.glDetachShader(program, shader);
        }
        public static void glDetailTexFuncSGIS(GLenum target, GLsizei n, System.IntPtr points)
        {
            Delegates.glDetailTexFuncSGIS(target, n, points);
        }
        public static void glDetailTexFuncSGIS(GLenum target, GLsizei n, ref GLfloat points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glDetailTexFuncSGIS(target, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDetailTexFuncSGIS(GLenum target, GLsizei n, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glDetailTexFuncSGIS(target, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDisable(GLenum cap)
        {
            Delegates.glDisable(cap);
        }
        public static void glDisableClientState(GLenum array)
        {
            Delegates.glDisableClientState(array);
        }
        public static void glDisableIndexedEXT(GLenum target, GLuint index)
        {
            Delegates.glDisableIndexedEXT(target, index);
        }
        public static void glDisableVariantClientStateEXT(GLuint id)
        {
            Delegates.glDisableVariantClientStateEXT(id);
        }
        public static void glDisableVertexAttribArray(GLuint index)
        {
            Delegates.glDisableVertexAttribArray(index);
        }
        public static void glDisableVertexAttribArrayARB(GLuint index)
        {
            Delegates.glDisableVertexAttribArrayARB(index);
        }
        public static void glDrawArrays(GLenum mode, GLint first, GLsizei count)
        {
            Delegates.glDrawArrays(mode, first, count);
        }
        public static void glDrawArraysEXT(GLenum mode, GLint first, GLsizei count)
        {
            Delegates.glDrawArraysEXT(mode, first, count);
        }
        public static void glDrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount)
        {
            Delegates.glDrawArraysInstancedEXT(mode, start, count, primcount);
        }
        public static void glDrawBuffer(GLenum mode)
        {
            Delegates.glDrawBuffer(mode);
        }
        public static void glDrawBuffers(GLsizei n, System.IntPtr bufs)
        {
            Delegates.glDrawBuffers(n, bufs);
        }
        public static void glDrawBuffers(GLsizei n, GLenum[] bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawBuffers(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDrawBuffers(GLsizei n, ref GLenum bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawBuffers(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDrawBuffersARB(GLsizei n, GLenum[] bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawBuffersARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDrawBuffersARB(GLsizei n, System.IntPtr bufs)
        {
            Delegates.glDrawBuffersARB(n, bufs);
        }
        public static void glDrawBuffersARB(GLsizei n, ref GLenum bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawBuffersARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDrawBuffersATI(GLsizei n, System.IntPtr bufs)
        {
            Delegates.glDrawBuffersATI(n, bufs);
        }
        public static void glDrawBuffersATI(GLsizei n, GLenum[] bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawBuffersATI(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDrawBuffersATI(GLsizei n, ref GLenum bufs)
        {
            GCHandle h0 = GCHandle.Alloc(bufs, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawBuffersATI(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count)
        {
            Delegates.glDrawElementArrayAPPLE(mode, first, count);
        }
        public static void glDrawElementArrayATI(GLenum mode, GLsizei count)
        {
            Delegates.glDrawElementArrayATI(mode, count);
        }
        public static void glDrawElements(GLenum mode, GLsizei count, GLenum type, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElements(mode, count, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDrawElements(GLenum mode, GLsizei count, GLenum type, System.IntPtr indices)
        {
            Delegates.glDrawElements(mode, count, type, indices);
        }
        public static void glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, System.IntPtr indices, GLsizei primcount)
        {
            Delegates.glDrawElementsInstancedEXT(mode, count, type, indices, primcount);
        }
        public static void glDrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawElementsInstancedEXT(mode, count, type, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width)
        {
            Delegates.glDrawMeshArraysSUN(mode, first, count, width);
        }
        public static void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawPixels(width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr pixels)
        {
            Delegates.glDrawPixels(width, height, format, type, pixels);
        }
        public static void glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)
        {
            Delegates.glDrawRangeElementArrayAPPLE(mode, start, end, first, count);
        }
        public static void glDrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count)
        {
            Delegates.glDrawRangeElementArrayATI(mode, start, end, count);
        }
        public static void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElements(mode, start, end, count, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, System.IntPtr indices)
        {
            Delegates.glDrawRangeElements(mode, start, end, count, type, indices);
        }
        public static void glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, object indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glDrawRangeElementsEXT(mode, start, end, count, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, System.IntPtr indices)
        {
            Delegates.glDrawRangeElementsEXT(mode, start, end, count, type, indices);
        }
        public static void glEdgeFlag(GLboolean flag)
        {
            Delegates.glEdgeFlag(flag);
        }
        public static void glEdgeFlagPointer(GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glEdgeFlagPointer(stride, pointer);
        }
        public static void glEdgeFlagPointer(GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagPointer(stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, ref GLboolean pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagPointerEXT(stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, System.IntPtr pointer)
        {
            Delegates.glEdgeFlagPointerEXT(stride, count, pointer);
        }
        public static void glEdgeFlagPointerEXT(GLsizei stride, GLsizei count, GLboolean[] pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagPointerEXT(stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glEdgeFlagPointerListIBM(GLint stride, ref GLboolean pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagPointerListIBM(stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glEdgeFlagPointerListIBM(GLint stride, GLboolean[] pointer, GLint ptrstride)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagPointerListIBM(stride, h0.AddrOfPinnedObject(), ptrstride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glEdgeFlagPointerListIBM(GLint stride, System.IntPtr pointer, GLint ptrstride)
        {
            Delegates.glEdgeFlagPointerListIBM(stride, pointer, ptrstride);
        }
        public static void glEdgeFlagv(ref GLboolean flag)
        {
            GCHandle h0 = GCHandle.Alloc(flag, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glEdgeFlagv(GLboolean[] flag)
        {
            GCHandle h0 = GCHandle.Alloc(flag, GCHandleType.Pinned);
            try
            {
                Delegates.glEdgeFlagv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glEdgeFlagv(System.IntPtr flag)
        {
            Delegates.glEdgeFlagv(flag);
        }
        public static void glElementPointerAPPLE(GLenum type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glElementPointerAPPLE(type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glElementPointerAPPLE(GLenum type, System.IntPtr pointer)
        {
            Delegates.glElementPointerAPPLE(type, pointer);
        }
        public static void glElementPointerATI(GLenum type, System.IntPtr pointer)
        {
            Delegates.glElementPointerATI(type, pointer);
        }
        public static void glElementPointerATI(GLenum type, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glElementPointerATI(type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glEnable(GLenum cap)
        {
            Delegates.glEnable(cap);
        }
        public static void glEnableClientState(GLenum array)
        {
            Delegates.glEnableClientState(array);
        }
        public static void glEnableIndexedEXT(GLenum target, GLuint index)
        {
            Delegates.glEnableIndexedEXT(target, index);
        }
        public static void glEnableVariantClientStateEXT(GLuint id)
        {
            Delegates.glEnableVariantClientStateEXT(id);
        }
        public static void glEnableVertexAttribArray(GLuint index)
        {
            Delegates.glEnableVertexAttribArray(index);
        }
        public static void glEnableVertexAttribArrayARB(GLuint index)
        {
            Delegates.glEnableVertexAttribArrayARB(index);
        }
        public static void glEnd()
        {
            Delegates.glEnd();
        }
        public static void glEndFragmentShaderATI()
        {
            Delegates.glEndFragmentShaderATI();
        }
        public static void glEndList()
        {
            Delegates.glEndList();
        }
        public static void glEndOcclusionQueryNV()
        {
            Delegates.glEndOcclusionQueryNV();
        }
        public static void glEndQuery(GLenum target)
        {
            Delegates.glEndQuery(target);
        }
        public static void glEndQueryARB(GLenum target)
        {
            Delegates.glEndQueryARB(target);
        }
        public static void glEndTransformFeedbackNV()
        {
            Delegates.glEndTransformFeedbackNV();
        }
        public static void glEndVertexShaderEXT()
        {
            Delegates.glEndVertexShaderEXT();
        }
        public static void glEvalCoord1d(GLdouble u)
        {
            Delegates.glEvalCoord1d(u);
        }
        public static void glEvalCoord1dv(GLdouble[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord1dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glEvalCoord1dv(ref GLdouble u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord1dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glEvalCoord1dv(System.IntPtr u)
        {
            Delegates.glEvalCoord1dv(u);
        }
        public static void glEvalCoord1f(GLfloat u)
        {
            Delegates.glEvalCoord1f(u);
        }
        public static void glEvalCoord1fv(System.IntPtr u)
        {
            Delegates.glEvalCoord1fv(u);
        }
        public static void glEvalCoord1fv(GLfloat[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord1fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glEvalCoord1fv(ref GLfloat u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord1fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glEvalCoord2d(GLdouble u, GLdouble v)
        {
            Delegates.glEvalCoord2d(u, v);
        }
        public static void glEvalCoord2dv(System.IntPtr u)
        {
            Delegates.glEvalCoord2dv(u);
        }
        public static void glEvalCoord2dv(ref GLdouble u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glEvalCoord2dv(GLdouble[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glEvalCoord2f(GLfloat u, GLfloat v)
        {
            Delegates.glEvalCoord2f(u, v);
        }
        public static void glEvalCoord2fv(ref GLfloat u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glEvalCoord2fv(GLfloat[] u)
        {
            GCHandle h0 = GCHandle.Alloc(u, GCHandleType.Pinned);
            try
            {
                Delegates.glEvalCoord2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glEvalCoord2fv(System.IntPtr u)
        {
            Delegates.glEvalCoord2fv(u);
        }
        public static void glEvalMapsNV(GLenum target, GLenum mode)
        {
            Delegates.glEvalMapsNV(target, mode);
        }
        public static void glEvalMesh1(GLenum mode, GLint i1, GLint i2)
        {
            Delegates.glEvalMesh1(mode, i1, i2);
        }
        public static void glEvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)
        {
            Delegates.glEvalMesh2(mode, i1, i2, j1, j2);
        }
        public static void glEvalPoint1(GLint i)
        {
            Delegates.glEvalPoint1(i);
        }
        public static void glEvalPoint2(GLint i, GLint j)
        {
            Delegates.glEvalPoint2(i, j);
        }
        public static void glExecuteProgramNV(GLenum target, GLuint id, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glExecuteProgramNV(target, id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glExecuteProgramNV(GLenum target, GLuint id, System.IntPtr @params)
        {
            Delegates.glExecuteProgramNV(target, id, @params);
        }
        public static void glExecuteProgramNV(GLenum target, GLuint id, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glExecuteProgramNV(target, id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glExtractComponentEXT(GLuint res, GLuint src, GLuint num)
        {
            Delegates.glExtractComponentEXT(res, src, num);
        }
        public static void glFeedbackBuffer(GLsizei size, GLenum type, [In, Out()] System.IntPtr buffer)
        {
            Delegates.glFeedbackBuffer(size, type, buffer);
        }
        public static void glFeedbackBuffer(GLsizei size, GLenum type, out GLfloat buffer)
        {
            buffer = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                Delegates.glFeedbackBuffer(size, type, h0.AddrOfPinnedObject());
                buffer = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFeedbackBuffer(GLsizei size, GLenum type, GLfloat[] buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                Delegates.glFeedbackBuffer(size, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)
        {
            Delegates.glFinalCombinerInputNV(variable, input, mapping, componentUsage);
        }
        public static void glFinish()
        {
            Delegates.glFinish();
        }
        public static GLint glFinishAsyncSGIX([In, Out()] System.IntPtr markerp)
        {
            return Delegates.glFinishAsyncSGIX(markerp);
        }
        public static GLint glFinishAsyncSGIX(GLuint[] markerp)
        {
            GCHandle h0 = GCHandle.Alloc(markerp, GCHandleType.Pinned);
            try
            {
                GLint retval;
                retval = Delegates.glFinishAsyncSGIX(h0.AddrOfPinnedObject());
                return retval;
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLint glFinishAsyncSGIX(out GLuint markerp)
        {
            markerp = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(markerp, GCHandleType.Pinned);
            try
            {
                GLint retval;
                retval = Delegates.glFinishAsyncSGIX(h0.AddrOfPinnedObject());
                markerp = (GLuint)h0.Target;
                return retval;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFinishFenceAPPLE(GLuint fence)
        {
            Delegates.glFinishFenceAPPLE(fence);
        }
        public static void glFinishFenceNV(GLuint fence)
        {
            Delegates.glFinishFenceNV(fence);
        }
        public static void glFinishObjectAPPLE(GLenum @object, GLint name)
        {
            Delegates.glFinishObjectAPPLE(@object, name);
        }
        public static void glFinishTextureSUNX()
        {
            Delegates.glFinishTextureSUNX();
        }
        public static void glFlush()
        {
            Delegates.glFlush();
        }
        public static void glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size)
        {
            Delegates.glFlushMappedBufferRangeAPPLE(target, offset, size);
        }
        public static void glFlushPixelDataRangeNV(GLenum target)
        {
            Delegates.glFlushPixelDataRangeNV(target);
        }
        public static void glFlushRasterSGIX()
        {
            Delegates.glFlushRasterSGIX();
        }
        public static void glFlushVertexArrayRangeAPPLE(GLsizei length, [In, Out()] System.IntPtr pointer)
        {
            Delegates.glFlushVertexArrayRangeAPPLE(length, pointer);
        }
        public static void glFlushVertexArrayRangeAPPLE(GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFlushVertexArrayRangeAPPLE(length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFlushVertexArrayRangeNV()
        {
            Delegates.glFlushVertexArrayRangeNV();
        }
        public static void glFogCoordd(GLdouble coord)
        {
            Delegates.glFogCoordd(coord);
        }
        public static void glFogCoorddEXT(GLdouble coord)
        {
            Delegates.glFogCoorddEXT(coord);
        }
        public static void glFogCoorddv(ref GLdouble coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoorddv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFogCoorddv(GLdouble[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoorddv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFogCoorddv(System.IntPtr coord)
        {
            Delegates.glFogCoorddv(coord);
        }
        public static void glFogCoorddvEXT(System.IntPtr coord)
        {
            Delegates.glFogCoorddvEXT(coord);
        }
        public static void glFogCoorddvEXT(GLdouble[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoorddvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFogCoorddvEXT(ref GLdouble coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoorddvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFogCoordf(GLfloat coord)
        {
            Delegates.glFogCoordf(coord);
        }
        public static void glFogCoordfEXT(GLfloat coord)
        {
            Delegates.glFogCoordfEXT(coord);
        }
        public static void glFogCoordfv(System.IntPtr coord)
        {
            Delegates.glFogCoordfv(coord);
        }
        public static void glFogCoordfv(ref GLfloat coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordfv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFogCoordfv(GLfloat[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordfv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFogCoordfvEXT(ref GLfloat coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordfvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFogCoordfvEXT(System.IntPtr coord)
        {
            Delegates.glFogCoordfvEXT(coord);
        }
        public static void glFogCoordfvEXT(GLfloat[] coord)
        {
            GCHandle h0 = GCHandle.Alloc(coord, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordfvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFogCoordhNV(GLhalfNV fog)
        {
            Delegates.glFogCoordhNV(fog);
        }
        public static void glFogCoordhvNV(ref GLhalfNV fog)
        {
            GCHandle h0 = GCHandle.Alloc(fog, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordhvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFogCoordhvNV(GLhalfNV[] fog)
        {
            GCHandle h0 = GCHandle.Alloc(fog, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordhvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFogCoordhvNV(System.IntPtr fog)
        {
            Delegates.glFogCoordhvNV(fog);
        }
        public static void glFogCoordPointer(GLenum type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glFogCoordPointer(type, stride, pointer);
        }
        public static void glFogCoordPointer(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordPointer(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFogCoordPointerEXT(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glFogCoordPointerEXT(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFogCoordPointerEXT(GLenum type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glFogCoordPointerEXT(type, stride, pointer);
        }
        public static void glFogCoordPointerListIBM(GLenum type, GLint stride, System.IntPtr pointer, GLint ptrstride)
        {
            Delegates.glFogCoordPointerListIBM(type, stride, pointer, ptrstride);
        }
        public static void glFogf(GLenum pname, GLfloat param)
        {
            Delegates.glFogf(pname, param);
        }
        public static void glFogFuncSGIS(GLsizei n, ref GLfloat points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glFogFuncSGIS(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFogFuncSGIS(GLsizei n, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glFogFuncSGIS(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFogFuncSGIS(GLsizei n, System.IntPtr points)
        {
            Delegates.glFogFuncSGIS(n, points);
        }
        public static void glFogfv(GLenum pname, System.IntPtr @params)
        {
            Delegates.glFogfv(pname, @params);
        }
        public static void glFogfv(GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFogfv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFogfv(GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFogfv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFogi(GLenum pname, GLint param)
        {
            Delegates.glFogi(pname, param);
        }
        public static void glFogiv(GLenum pname, System.IntPtr @params)
        {
            Delegates.glFogiv(pname, @params);
        }
        public static void glFogiv(GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFogiv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFogiv(GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFogiv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFragmentColorMaterialSGIX(GLenum face, GLenum mode)
        {
            Delegates.glFragmentColorMaterialSGIX(face, mode);
        }
        public static void glFragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param)
        {
            Delegates.glFragmentLightfSGIX(light, pname, param);
        }
        public static void glFragmentLightfvSGIX(GLenum light, GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightfvSGIX(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightfvSGIX(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFragmentLightfvSGIX(GLenum light, GLenum pname, System.IntPtr @params)
        {
            Delegates.glFragmentLightfvSGIX(light, pname, @params);
        }
        public static void glFragmentLightiSGIX(GLenum light, GLenum pname, GLint param)
        {
            Delegates.glFragmentLightiSGIX(light, pname, param);
        }
        public static void glFragmentLightivSGIX(GLenum light, GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightivSGIX(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFragmentLightivSGIX(GLenum light, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightivSGIX(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFragmentLightivSGIX(GLenum light, GLenum pname, System.IntPtr @params)
        {
            Delegates.glFragmentLightivSGIX(light, pname, @params);
        }
        public static void glFragmentLightModelfSGIX(GLenum pname, GLfloat param)
        {
            Delegates.glFragmentLightModelfSGIX(pname, param);
        }
        public static void glFragmentLightModelfvSGIX(GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightModelfvSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFragmentLightModelfvSGIX(GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightModelfvSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFragmentLightModelfvSGIX(GLenum pname, System.IntPtr @params)
        {
            Delegates.glFragmentLightModelfvSGIX(pname, @params);
        }
        public static void glFragmentLightModeliSGIX(GLenum pname, GLint param)
        {
            Delegates.glFragmentLightModeliSGIX(pname, param);
        }
        public static void glFragmentLightModelivSGIX(GLenum pname, System.IntPtr @params)
        {
            Delegates.glFragmentLightModelivSGIX(pname, @params);
        }
        public static void glFragmentLightModelivSGIX(GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightModelivSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFragmentLightModelivSGIX(GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentLightModelivSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param)
        {
            Delegates.glFragmentMaterialfSGIX(face, pname, param);
        }
        public static void glFragmentMaterialfvSGIX(GLenum face, GLenum pname, System.IntPtr @params)
        {
            Delegates.glFragmentMaterialfvSGIX(face, pname, @params);
        }
        public static void glFragmentMaterialfvSGIX(GLenum face, GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentMaterialfvSGIX(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentMaterialfvSGIX(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param)
        {
            Delegates.glFragmentMaterialiSGIX(face, pname, param);
        }
        public static void glFragmentMaterialivSGIX(GLenum face, GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentMaterialivSGIX(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glFragmentMaterialivSGIX(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glFragmentMaterialivSGIX(GLenum face, GLenum pname, System.IntPtr @params)
        {
            Delegates.glFragmentMaterialivSGIX(face, pname, @params);
        }
        public static void glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
        {
            Delegates.glFramebufferRenderbufferEXT(target, attachment, renderbuffertarget, renderbuffer);
        }
        public static void glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
        {
            Delegates.glFramebufferTexture1DEXT(target, attachment, textarget, texture, level);
        }
        public static void glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
        {
            Delegates.glFramebufferTexture2DEXT(target, attachment, textarget, texture, level);
        }
        public static void glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
        {
            Delegates.glFramebufferTexture3DEXT(target, attachment, textarget, texture, level, zoffset);
        }
        public static void glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level)
        {
            Delegates.glFramebufferTextureEXT(target, attachment, texture, level);
        }
        public static void glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)
        {
            Delegates.glFramebufferTextureFaceEXT(target, attachment, texture, level, face);
        }
        public static void glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
        {
            Delegates.glFramebufferTextureLayerEXT(target, attachment, texture, level, layer);
        }
        public static void glFrameZoomSGIX(GLint factor)
        {
            Delegates.glFrameZoomSGIX(factor);
        }
        public static void glFreeObjectBufferATI(GLuint buffer)
        {
            Delegates.glFreeObjectBufferATI(buffer);
        }
        public static void glFrontFace(GLenum mode)
        {
            Delegates.glFrontFace(mode);
        }
        public static void glFrustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
        {
            Delegates.glFrustum(left, right, bottom, top, zNear, zFar);
        }
        public static GLuint glGenAsyncMarkersSGIX(GLsizei range)
        {
            return Delegates.glGenAsyncMarkersSGIX(range);
        }
        public static void glGenBuffers(GLsizei n, out GLuint buffers)
        {
            buffers = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenBuffers(n, h0.AddrOfPinnedObject());
                buffers = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenBuffers(GLsizei n, [In, Out()] System.IntPtr buffers)
        {
            Delegates.glGenBuffers(n, buffers);
        }
        public static void glGenBuffers(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenBuffers(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenBuffersARB(GLsizei n, out GLuint buffers)
        {
            buffers = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenBuffersARB(n, h0.AddrOfPinnedObject());
                buffers = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenBuffersARB(GLsizei n, GLuint[] buffers)
        {
            GCHandle h0 = GCHandle.Alloc(buffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenBuffersARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenBuffersARB(GLsizei n, [In, Out()] System.IntPtr buffers)
        {
            Delegates.glGenBuffersARB(n, buffers);
        }
        public static void glGenerateMipmapEXT(GLenum target)
        {
            Delegates.glGenerateMipmapEXT(target);
        }
        public static void glGenFencesAPPLE(GLsizei n, [In, Out()] System.IntPtr fences)
        {
            Delegates.glGenFencesAPPLE(n, fences);
        }
        public static void glGenFencesAPPLE(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glGenFencesAPPLE(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenFencesAPPLE(GLsizei n, out GLuint fences)
        {
            fences = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glGenFencesAPPLE(n, h0.AddrOfPinnedObject());
                fences = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenFencesNV(GLsizei n, GLuint[] fences)
        {
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glGenFencesNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenFencesNV(GLsizei n, out GLuint fences)
        {
            fences = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(fences, GCHandleType.Pinned);
            try
            {
                Delegates.glGenFencesNV(n, h0.AddrOfPinnedObject());
                fences = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenFencesNV(GLsizei n, [In, Out()] System.IntPtr fences)
        {
            Delegates.glGenFencesNV(n, fences);
        }
        public static GLuint glGenFragmentShadersATI(GLuint range)
        {
            return Delegates.glGenFragmentShadersATI(range);
        }
        public static void glGenFramebuffersEXT(GLsizei n, [In, Out()] System.IntPtr framebuffers)
        {
            Delegates.glGenFramebuffersEXT(n, framebuffers);
        }
        public static void glGenFramebuffersEXT(GLsizei n, out GLuint framebuffers)
        {
            framebuffers = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(framebuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenFramebuffersEXT(n, h0.AddrOfPinnedObject());
                framebuffers = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenFramebuffersEXT(GLsizei n, GLuint[] framebuffers)
        {
            GCHandle h0 = GCHandle.Alloc(framebuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenFramebuffersEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLuint glGenLists(GLsizei range)
        {
            return Delegates.glGenLists(range);
        }
        public static void glGenOcclusionQueriesNV(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glGenOcclusionQueriesNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenOcclusionQueriesNV(GLsizei n, [In, Out()] System.IntPtr ids)
        {
            Delegates.glGenOcclusionQueriesNV(n, ids);
        }
        public static void glGenOcclusionQueriesNV(GLsizei n, out GLuint ids)
        {
            ids = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glGenOcclusionQueriesNV(n, h0.AddrOfPinnedObject());
                ids = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenProgramsARB(GLsizei n, out GLuint programs)
        {
            programs = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glGenProgramsARB(n, h0.AddrOfPinnedObject());
                programs = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenProgramsARB(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glGenProgramsARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenProgramsARB(GLsizei n, [In, Out()] System.IntPtr programs)
        {
            Delegates.glGenProgramsARB(n, programs);
        }
        public static void glGenProgramsNV(GLsizei n, out GLuint programs)
        {
            programs = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glGenProgramsNV(n, h0.AddrOfPinnedObject());
                programs = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenProgramsNV(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glGenProgramsNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenProgramsNV(GLsizei n, [In, Out()] System.IntPtr programs)
        {
            Delegates.glGenProgramsNV(n, programs);
        }
        public static void glGenQueries(GLsizei n, [In, Out()] System.IntPtr ids)
        {
            Delegates.glGenQueries(n, ids);
        }
        public static void glGenQueries(GLsizei n, out GLuint ids)
        {
            ids = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glGenQueries(n, h0.AddrOfPinnedObject());
                ids = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenQueries(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glGenQueries(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenQueriesARB(GLsizei n, [In, Out()] System.IntPtr ids)
        {
            Delegates.glGenQueriesARB(n, ids);
        }
        public static void glGenQueriesARB(GLsizei n, GLuint[] ids)
        {
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glGenQueriesARB(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenQueriesARB(GLsizei n, out GLuint ids)
        {
            ids = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(ids, GCHandleType.Pinned);
            try
            {
                Delegates.glGenQueriesARB(n, h0.AddrOfPinnedObject());
                ids = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenRenderbuffersEXT(GLsizei n, [In, Out()] System.IntPtr renderbuffers)
        {
            Delegates.glGenRenderbuffersEXT(n, renderbuffers);
        }
        public static void glGenRenderbuffersEXT(GLsizei n, GLuint[] renderbuffers)
        {
            GCHandle h0 = GCHandle.Alloc(renderbuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenRenderbuffersEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenRenderbuffersEXT(GLsizei n, out GLuint renderbuffers)
        {
            renderbuffers = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(renderbuffers, GCHandleType.Pinned);
            try
            {
                Delegates.glGenRenderbuffersEXT(n, h0.AddrOfPinnedObject());
                renderbuffers = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLuint glGenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)
        {
            return Delegates.glGenSymbolsEXT(datatype, storagetype, range, components);
        }
        public static void glGenTextures(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glGenTextures(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenTextures(GLsizei n, [In, Out()] System.IntPtr textures)
        {
            Delegates.glGenTextures(n, textures);
        }
        public static void glGenTextures(GLsizei n, out GLuint textures)
        {
            textures = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glGenTextures(n, h0.AddrOfPinnedObject());
                textures = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenTexturesEXT(GLsizei n, [In, Out()] System.IntPtr textures)
        {
            Delegates.glGenTexturesEXT(n, textures);
        }
        public static void glGenTexturesEXT(GLsizei n, out GLuint textures)
        {
            textures = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glGenTexturesEXT(n, h0.AddrOfPinnedObject());
                textures = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenTexturesEXT(GLsizei n, GLuint[] textures)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glGenTexturesEXT(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenVertexArraysAPPLE(GLsizei n, [In, Out()] System.IntPtr arrays)
        {
            Delegates.glGenVertexArraysAPPLE(n, arrays);
        }
        public static void glGenVertexArraysAPPLE(GLsizei n, GLuint[] arrays)
        {
            GCHandle h0 = GCHandle.Alloc(arrays, GCHandleType.Pinned);
            try
            {
                Delegates.glGenVertexArraysAPPLE(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGenVertexArraysAPPLE(GLsizei n, out GLuint arrays)
        {
            arrays = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(arrays, GCHandleType.Pinned);
            try
            {
                Delegates.glGenVertexArraysAPPLE(n, h0.AddrOfPinnedObject());
                arrays = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLuint glGenVertexShadersEXT(GLuint range)
        {
            return Delegates.glGenVertexShadersEXT(range);
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, [In, Out()] System.IntPtr size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (System.IntPtr)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, out GLint size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (GLint)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (System.IntPtr)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, [In, Out()] System.IntPtr size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, out GLint size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (GLint)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, out GLint size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (GLint)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, GLint[] size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (System.IntPtr)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            Delegates.glGetActiveAttrib(program, index, bufSize, length, size, type, name);
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, GLint[] size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (System.IntPtr)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, [In, Out()] System.IntPtr size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, out GLint size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (GLint)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, out GLint size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (GLint)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, out GLint size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (GLint)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, out GLint size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (GLint)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, out GLint size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (GLint)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, out GLint size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (GLint)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLint[] size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, [In, Out()] System.IntPtr size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (System.IntPtr)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLint[] size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttrib(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, GLint[] size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (System.IntPtr)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, GLint[] size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (System.IntPtr)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, [In, Out()] System.IntPtr size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, out GLint size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (GLint)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, [In, Out()] System.IntPtr size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (System.IntPtr)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, out GLint size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (GLint)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, out GLint size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (GLint)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, out GLint size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (GLint)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, out GLint size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (GLint)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, out GLint size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (GLint)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, GLint[] size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            Delegates.glGetActiveAttribARB(programObj, index, maxLength, length, size, type, name);
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, out GLint size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (GLint)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, GLint[] size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (System.IntPtr)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, out GLint size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (GLint)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, out GLint size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (GLint)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, [In, Out()] System.IntPtr size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (System.IntPtr)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, [In, Out()] System.IntPtr size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveAttribARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, out GLint size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (GLint)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, out GLint size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (GLint)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, out GLint size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (GLint)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, out GLint size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (GLint)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, out GLint size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (GLint)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, out GLint size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (GLint)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, [In, Out()] System.IntPtr size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (System.IntPtr)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, [In, Out()] System.IntPtr size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (System.IntPtr)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (System.IntPtr)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            Delegates.glGetActiveUniform(program, index, bufSize, length, size, type, name);
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, GLint[] size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, GLint[] size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, [In, Out()] System.IntPtr size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (System.IntPtr)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, [In, Out()] System.IntPtr size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (System.IntPtr)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLint[] size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLint[] size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, out GLint size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (GLint)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, out GLint size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (GLint)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, out GLint size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniform(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (GLint)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, GLint[] size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (System.IntPtr)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, [In, Out()] System.IntPtr size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, [In, Out()] System.IntPtr size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (System.IntPtr)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, out GLint size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (GLint)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, GLint[] size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, GLint[] size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            Delegates.glGetActiveUniformARB(programObj, index, maxLength, length, size, type, name);
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (System.IntPtr)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, out GLint size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (GLint)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, GLint[] size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, GLint[] size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, GLint[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, out GLint size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (GLint)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, out GLint size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (GLint)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, out GLint size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (GLint)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, [In, Out()] System.IntPtr size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (System.IntPtr)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, out GLint size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (GLint)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, out GLint size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (GLint)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, out GLint size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (GLint)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, [In, Out()] System.IntPtr size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, out GLsizei length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (System.IntPtr)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei[] length, out GLint size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLint);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveUniformARB(programObj, index, maxLength, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (GLint)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, out GLsizei size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLsizei);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (GLsizei)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (System.IntPtr)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, out GLsizei size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLsizei);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (GLsizei)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, out GLsizei size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLsizei);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (GLsizei)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLsizei[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, [In, Out()] System.IntPtr size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (System.IntPtr)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, [In, Out()] System.IntPtr size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, out GLsizei size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLsizei);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (GLsizei)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (System.IntPtr)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                size = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            Delegates.glGetActiveVaryingNV(program, index, bufSize, length, size, type, name);
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, GLsizei[] size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, GLsizei[] size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, GLsizei[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (System.IntPtr)h0.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, [In, Out()] System.IntPtr size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (System.IntPtr)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLsizei[] size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (System.IntPtr)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, [In, Out()] System.IntPtr size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, out GLsizei size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLsizei);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (GLsizei)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, out GLsizei size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLsizei);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                size = (GLsizei)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLsizei[] size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, out GLsizei length, GLsizei[] size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                length = (GLsizei)h0.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, out GLsizei size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLsizei);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (GLsizei)h1.Target;
                type = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, out GLsizei size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLsizei);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (GLsizei)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLsizei[] size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, out GLsizei size, out GLenum type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            size = default(GLsizei);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            type = default(GLenum);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
                size = (GLsizei)h1.Target;
                type = (GLenum)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, GLsizei[] length, GLsizei[] size, GLenum[] type, [In, Out()] System.Text.StringBuilder name)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(size, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(type, GCHandleType.Pinned);
            try
            {
                Delegates.glGetActiveVaryingNV(program, index, bufSize, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), name);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetArrayObjectfvATI(GLenum array, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetArrayObjectfvATI(array, pname, @params);
        }
        public static void glGetArrayObjectfvATI(GLenum array, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetArrayObjectfvATI(array, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetArrayObjectfvATI(GLenum array, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetArrayObjectfvATI(array, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetArrayObjectivATI(GLenum array, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetArrayObjectivATI(array, pname, @params);
        }
        public static void glGetArrayObjectivATI(GLenum array, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetArrayObjectivATI(array, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetArrayObjectivATI(GLenum array, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetArrayObjectivATI(array, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, GLhandleARB[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, out GLhandleARB obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            obj = default(GLhandleARB);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                obj = (GLhandleARB)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei[] count, [In, Out()] System.IntPtr obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            obj = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                obj = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, [In, Out()] System.IntPtr count, GLhandleARB[] obj)
        {
            count = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                count = (System.IntPtr)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, [In, Out()] System.IntPtr count, out GLhandleARB obj)
        {
            count = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            obj = default(GLhandleARB);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                count = (System.IntPtr)h0.Target;
                obj = (GLhandleARB)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, out GLsizei count, [In, Out()] System.IntPtr obj)
        {
            count = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            obj = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                count = (GLsizei)h0.Target;
                obj = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, [In, Out()] System.IntPtr count, [In, Out()] System.IntPtr obj)
        {
            Delegates.glGetAttachedObjectsARB(containerObj, maxCount, count, obj);
        }
        public static void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, out GLsizei count, out GLhandleARB obj)
        {
            count = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            obj = default(GLhandleARB);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                count = (GLsizei)h0.Target;
                obj = (GLhandleARB)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, out GLsizei count, GLhandleARB[] obj)
        {
            count = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedObjectsARB(containerObj, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                count = (GLsizei)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, out GLuint obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            obj = default(GLuint);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedShaders(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                obj = (GLuint)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, GLuint[] obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedShaders(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetAttachedShaders(GLuint program, GLsizei maxCount, out GLsizei count, [In, Out()] System.IntPtr obj)
        {
            count = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            obj = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedShaders(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                count = (GLsizei)h0.Target;
                obj = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetAttachedShaders(GLuint program, GLsizei maxCount, out GLsizei count, GLuint[] obj)
        {
            count = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedShaders(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                count = (GLsizei)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetAttachedShaders(GLuint program, GLsizei maxCount, out GLsizei count, out GLuint obj)
        {
            count = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            obj = default(GLuint);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedShaders(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                count = (GLsizei)h0.Target;
                obj = (GLuint)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei[] count, [In, Out()] System.IntPtr obj)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            obj = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedShaders(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                obj = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetAttachedShaders(GLuint program, GLsizei maxCount, [In, Out()] System.IntPtr count, [In, Out()] System.IntPtr obj)
        {
            Delegates.glGetAttachedShaders(program, maxCount, count, obj);
        }
        public static void glGetAttachedShaders(GLuint program, GLsizei maxCount, [In, Out()] System.IntPtr count, GLuint[] obj)
        {
            count = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedShaders(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                count = (System.IntPtr)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetAttachedShaders(GLuint program, GLsizei maxCount, [In, Out()] System.IntPtr count, out GLuint obj)
        {
            count = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            obj = default(GLuint);
            GCHandle h1 = GCHandle.Alloc(obj, GCHandleType.Pinned);
            try
            {
                Delegates.glGetAttachedShaders(program, maxCount, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                count = (System.IntPtr)h0.Target;
                obj = (GLuint)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static GLint glGetAttribLocation(GLuint program, string name)
        {
            return Delegates.glGetAttribLocation(program, name);
        }
        public static GLint glGetAttribLocationARB(GLhandleARB programObj, string name)
        {
            return Delegates.glGetAttribLocationARB(programObj, name);
        }
        public static void glGetBooleanIndexedvEXT(GLenum target, GLuint index, GLboolean[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBooleanIndexedvEXT(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetBooleanIndexedvEXT(GLenum target, GLuint index, out GLboolean data)
        {
            data = default(GLboolean);
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBooleanIndexedvEXT(target, index, h0.AddrOfPinnedObject());
                data = (GLboolean)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetBooleanIndexedvEXT(GLenum target, GLuint index, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetBooleanIndexedvEXT(target, index, data);
        }
        public static void glGetBooleanv(GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetBooleanv(pname, @params);
        }
        public static void glGetBooleanv(GLenum pname, GLboolean[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBooleanv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetBooleanv(GLenum pname, out GLboolean @params)
        {
            @params = default(GLboolean);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBooleanv(pname, h0.AddrOfPinnedObject());
                @params = (GLboolean)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetBufferParameteriv(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetBufferParameteriv(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferParameteriv(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetBufferParameteriv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetBufferParameteriv(target, pname, @params);
        }
        public static void glGetBufferParameterivARB(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetBufferParameterivARB(target, pname, @params);
        }
        public static void glGetBufferParameterivARB(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferParameterivARB(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetBufferParameterivARB(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferParameterivARB(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetBufferPointerv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetBufferPointerv(target, pname, @params);
        }
        public static void glGetBufferPointervARB(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetBufferPointervARB(target, pname, @params);
        }
        public static void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferSubData(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetBufferSubData(target, offset, size, data);
        }
        public static void glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetBufferSubDataARB(target, offset, size, data);
        }
        public static void glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetBufferSubDataARB(target, offset, size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetClipPlane(GLenum plane, [In, Out()] System.IntPtr equation)
        {
            Delegates.glGetClipPlane(plane, equation);
        }
        public static void glGetClipPlane(GLenum plane, out GLdouble equation)
        {
            equation = default(GLdouble);
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                Delegates.glGetClipPlane(plane, h0.AddrOfPinnedObject());
                equation = (GLdouble)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetClipPlane(GLenum plane, GLdouble[] equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                Delegates.glGetClipPlane(plane, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetColorTable(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr table)
        {
            Delegates.glGetColorTable(target, format, type, table);
        }
        public static void glGetColorTable(GLenum target, GLenum format, GLenum type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTable(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetColorTableEXT(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetColorTableEXT(target, format, type, data);
        }
        public static void glGetColorTableEXT(GLenum target, GLenum format, GLenum type, object data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableEXT(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetColorTableParameterfv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetColorTableParameterfv(target, pname, @params);
        }
        public static void glGetColorTableParameterfv(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetColorTableParameterfv(GLenum target, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterfv(target, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetColorTableParameterfvEXT(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetColorTableParameterfvEXT(GLenum target, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetColorTableParameterfvEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetColorTableParameterfvEXT(target, pname, @params);
        }
        public static void glGetColorTableParameterfvSGI(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetColorTableParameterfvSGI(target, pname, @params);
        }
        public static void glGetColorTableParameterfvSGI(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterfvSGI(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetColorTableParameterfvSGI(GLenum target, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterfvSGI(target, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetColorTableParameteriv(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetColorTableParameteriv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetColorTableParameteriv(target, pname, @params);
        }
        public static void glGetColorTableParameteriv(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameteriv(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetColorTableParameterivEXT(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetColorTableParameterivEXT(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterivEXT(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetColorTableParameterivEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetColorTableParameterivEXT(target, pname, @params);
        }
        public static void glGetColorTableParameterivSGI(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetColorTableParameterivSGI(target, pname, @params);
        }
        public static void glGetColorTableParameterivSGI(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterivSGI(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetColorTableParameterivSGI(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableParameterivSGI(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetColorTableSGI(GLenum target, GLenum format, GLenum type, object table)
        {
            GCHandle h0 = GCHandle.Alloc(table, GCHandleType.Pinned);
            try
            {
                Delegates.glGetColorTableSGI(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetColorTableSGI(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr table)
        {
            Delegates.glGetColorTableSGI(target, format, type, table);
        }
        public static void glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerInputParameterfvNV(stage, portion, variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerInputParameterfvNV(stage, portion, variable, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetCombinerInputParameterfvNV(stage, portion, variable, pname, @params);
        }
        public static void glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerInputParameterivNV(stage, portion, variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerInputParameterivNV(stage, portion, variable, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetCombinerInputParameterivNV(stage, portion, variable, pname, @params);
        }
        public static void glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerOutputParameterfvNV(stage, portion, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerOutputParameterfvNV(stage, portion, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetCombinerOutputParameterfvNV(stage, portion, pname, @params);
        }
        public static void glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerOutputParameterivNV(stage, portion, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetCombinerOutputParameterivNV(stage, portion, pname, @params);
        }
        public static void glGetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerOutputParameterivNV(stage, portion, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerStageParameterfvNV(stage, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCombinerStageParameterfvNV(stage, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetCombinerStageParameterfvNV(GLenum stage, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetCombinerStageParameterfvNV(stage, pname, @params);
        }
        public static void glGetCompressedTexImage(GLenum target, GLint level, object img)
        {
            GCHandle h0 = GCHandle.Alloc(img, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCompressedTexImage(target, level, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetCompressedTexImage(GLenum target, GLint level, [In, Out()] System.IntPtr img)
        {
            Delegates.glGetCompressedTexImage(target, level, img);
        }
        public static void glGetCompressedTexImageARB(GLenum target, GLint level, [In, Out()] System.IntPtr img)
        {
            Delegates.glGetCompressedTexImageARB(target, level, img);
        }
        public static void glGetCompressedTexImageARB(GLenum target, GLint level, object img)
        {
            GCHandle h0 = GCHandle.Alloc(img, GCHandleType.Pinned);
            try
            {
                Delegates.glGetCompressedTexImageARB(target, level, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr image)
        {
            Delegates.glGetConvolutionFilter(target, format, type, image);
        }
        public static void glGetConvolutionFilter(GLenum target, GLenum format, GLenum type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionFilter(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, object image)
        {
            GCHandle h0 = GCHandle.Alloc(image, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionFilterEXT(target, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr image)
        {
            Delegates.glGetConvolutionFilterEXT(target, format, type, image);
        }
        public static void glGetConvolutionParameterfv(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetConvolutionParameterfv(GLenum target, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameterfv(target, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetConvolutionParameterfv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetConvolutionParameterfv(target, pname, @params);
        }
        public static void glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetConvolutionParameterfvEXT(target, pname, @params);
        }
        public static void glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetConvolutionParameterfvEXT(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetConvolutionParameteriv(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameteriv(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetConvolutionParameteriv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetConvolutionParameteriv(target, pname, @params);
        }
        public static void glGetConvolutionParameteriv(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetConvolutionParameterivEXT(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetConvolutionParameterivEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetConvolutionParameterivEXT(target, pname, @params);
        }
        public static void glGetConvolutionParameterivEXT(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetConvolutionParameterivEXT(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetDetailTexFuncSGIS(GLenum target, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glGetDetailTexFuncSGIS(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetDetailTexFuncSGIS(GLenum target, out GLfloat points)
        {
            points = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glGetDetailTexFuncSGIS(target, h0.AddrOfPinnedObject());
                points = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetDetailTexFuncSGIS(GLenum target, [In, Out()] System.IntPtr points)
        {
            Delegates.glGetDetailTexFuncSGIS(target, points);
        }
        public static void glGetDoublev(GLenum pname, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetDoublev(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetDoublev(GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetDoublev(pname, @params);
        }
        public static void glGetDoublev(GLenum pname, out GLdouble @params)
        {
            @params = default(GLdouble);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetDoublev(pname, h0.AddrOfPinnedObject());
                @params = (GLdouble)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLenum glGetError()
        {
            return Delegates.glGetError();
        }
        public static void glGetFenceivNV(GLuint fence, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFenceivNV(fence, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetFenceivNV(GLuint fence, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFenceivNV(fence, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetFenceivNV(GLuint fence, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetFenceivNV(fence, pname, @params);
        }
        public static void glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFinalCombinerInputParameterfvNV(variable, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFinalCombinerInputParameterfvNV(variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetFinalCombinerInputParameterfvNV(variable, pname, @params);
        }
        public static void glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetFinalCombinerInputParameterivNV(variable, pname, @params);
        }
        public static void glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFinalCombinerInputParameterivNV(variable, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFinalCombinerInputParameterivNV(variable, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetFloatv(GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetFloatv(pname, @params);
        }
        public static void glGetFloatv(GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFloatv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetFloatv(GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFloatv(pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetFogFuncSGIS(GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFogFuncSGIS(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetFogFuncSGIS(out GLfloat points)
        {
            points = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFogFuncSGIS(h0.AddrOfPinnedObject());
                points = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetFogFuncSGIS([In, Out()] System.IntPtr points)
        {
            Delegates.glGetFogFuncSGIS(points);
        }
        public static GLint glGetFragDataLocationEXT(GLuint program, string name)
        {
            return Delegates.glGetFragDataLocationEXT(program, name);
        }
        public static void glGetFragmentLightfvSGIX(GLenum light, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentLightfvSGIX(light, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetFragmentLightfvSGIX(GLenum light, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetFragmentLightfvSGIX(light, pname, @params);
        }
        public static void glGetFragmentLightfvSGIX(GLenum light, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentLightfvSGIX(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetFragmentLightivSGIX(GLenum light, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetFragmentLightivSGIX(light, pname, @params);
        }
        public static void glGetFragmentLightivSGIX(GLenum light, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentLightivSGIX(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetFragmentLightivSGIX(GLenum light, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentLightivSGIX(light, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentMaterialfvSGIX(face, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentMaterialfvSGIX(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetFragmentMaterialfvSGIX(GLenum face, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetFragmentMaterialfvSGIX(face, pname, @params);
        }
        public static void glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentMaterialivSGIX(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetFragmentMaterialivSGIX(face, pname, @params);
        }
        public static void glGetFragmentMaterialivSGIX(GLenum face, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFragmentMaterialivSGIX(face, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, @params);
        }
        public static void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetFramebufferAttachmentParameterivEXT(target, attachment, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLhandleARB glGetHandleARB(GLenum pname)
        {
            return Delegates.glGetHandleARB(pname);
        }
        public static void glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogram(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, [In, Out()] System.IntPtr values)
        {
            Delegates.glGetHistogram(target, reset, format, type, values);
        }
        public static void glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, [In, Out()] System.IntPtr values)
        {
            Delegates.glGetHistogramEXT(target, reset, format, type, values);
        }
        public static void glGetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramEXT(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetHistogramParameterfv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetHistogramParameterfv(target, pname, @params);
        }
        public static void glGetHistogramParameterfv(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetHistogramParameterfv(GLenum target, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameterfv(target, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetHistogramParameterfvEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetHistogramParameterfvEXT(target, pname, @params);
        }
        public static void glGetHistogramParameterfvEXT(GLenum target, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetHistogramParameterfvEXT(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetHistogramParameteriv(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameteriv(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetHistogramParameteriv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetHistogramParameteriv(target, pname, @params);
        }
        public static void glGetHistogramParameteriv(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetHistogramParameterivEXT(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameterivEXT(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetHistogramParameterivEXT(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetHistogramParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetHistogramParameterivEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetHistogramParameterivEXT(target, pname, @params);
        }
        public static void glGetImageTransformParameterfvHP(GLenum target, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetImageTransformParameterfvHP(target, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetImageTransformParameterfvHP(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetImageTransformParameterfvHP(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetImageTransformParameterfvHP(target, pname, @params);
        }
        public static void glGetImageTransformParameterivHP(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetImageTransformParameterivHP(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetImageTransformParameterivHP(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetImageTransformParameterivHP(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetImageTransformParameterivHP(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetImageTransformParameterivHP(target, pname, @params);
        }
        public static void glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei[] length, [In, Out()] System.Text.StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInfoLogARB(obj, maxLength, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, out GLsizei length, [In, Out()] System.Text.StringBuilder infoLog)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInfoLogARB(obj, maxLength, h0.AddrOfPinnedObject(), infoLog);
                length = (GLsizei)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder infoLog)
        {
            Delegates.glGetInfoLogARB(obj, maxLength, length, infoLog);
        }
        public static GLint glGetInstrumentsSGIX()
        {
            return Delegates.glGetInstrumentsSGIX();
        }
        public static void glGetIntegerIndexedvEXT(GLenum target, GLuint index, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetIntegerIndexedvEXT(target, index, data);
        }
        public static void glGetIntegerIndexedvEXT(GLenum target, GLuint index, GLint[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetIntegerIndexedvEXT(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetIntegerIndexedvEXT(GLenum target, GLuint index, out GLint data)
        {
            data = default(GLint);
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetIntegerIndexedvEXT(target, index, h0.AddrOfPinnedObject());
                data = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetIntegerv(GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetIntegerv(pname, @params);
        }
        public static void glGetIntegerv(GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetIntegerv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetIntegerv(GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetIntegerv(pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetInvariantBooleanvEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetInvariantBooleanvEXT(id, value, data);
        }
        public static void glGetInvariantBooleanvEXT(GLuint id, GLenum value, GLboolean[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInvariantBooleanvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetInvariantBooleanvEXT(GLuint id, GLenum value, out GLboolean data)
        {
            data = default(GLboolean);
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInvariantBooleanvEXT(id, value, h0.AddrOfPinnedObject());
                data = (GLboolean)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetInvariantFloatvEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetInvariantFloatvEXT(id, value, data);
        }
        public static void glGetInvariantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInvariantFloatvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetInvariantFloatvEXT(GLuint id, GLenum value, out GLfloat data)
        {
            data = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInvariantFloatvEXT(id, value, h0.AddrOfPinnedObject());
                data = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetInvariantIntegervEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetInvariantIntegervEXT(id, value, data);
        }
        public static void glGetInvariantIntegervEXT(GLuint id, GLenum value, GLint[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInvariantIntegervEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetInvariantIntegervEXT(GLuint id, GLenum value, out GLint data)
        {
            data = default(GLint);
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetInvariantIntegervEXT(id, value, h0.AddrOfPinnedObject());
                data = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetLightfv(GLenum light, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLightfv(light, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetLightfv(GLenum light, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLightfv(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetLightfv(GLenum light, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetLightfv(light, pname, @params);
        }
        public static void glGetLightiv(GLenum light, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLightiv(light, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetLightiv(GLenum light, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLightiv(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetLightiv(GLenum light, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetLightiv(light, pname, @params);
        }
        public static void glGetListParameterfvSGIX(GLuint list, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetListParameterfvSGIX(list, pname, @params);
        }
        public static void glGetListParameterfvSGIX(GLuint list, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetListParameterfvSGIX(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetListParameterfvSGIX(GLuint list, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetListParameterfvSGIX(list, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetListParameterivSGIX(GLuint list, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetListParameterivSGIX(list, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetListParameterivSGIX(GLuint list, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetListParameterivSGIX(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetListParameterivSGIX(GLuint list, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetListParameterivSGIX(list, pname, @params);
        }
        public static void glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, out GLboolean data)
        {
            data = default(GLboolean);
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLocalConstantBooleanvEXT(id, value, h0.AddrOfPinnedObject());
                data = (GLboolean)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetLocalConstantBooleanvEXT(id, value, data);
        }
        public static void glGetLocalConstantBooleanvEXT(GLuint id, GLenum value, GLboolean[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLocalConstantBooleanvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetLocalConstantFloatvEXT(GLuint id, GLenum value, out GLfloat data)
        {
            data = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLocalConstantFloatvEXT(id, value, h0.AddrOfPinnedObject());
                data = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetLocalConstantFloatvEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetLocalConstantFloatvEXT(id, value, data);
        }
        public static void glGetLocalConstantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLocalConstantFloatvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetLocalConstantIntegervEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetLocalConstantIntegervEXT(id, value, data);
        }
        public static void glGetLocalConstantIntegervEXT(GLuint id, GLenum value, GLint[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLocalConstantIntegervEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetLocalConstantIntegervEXT(GLuint id, GLenum value, out GLint data)
        {
            data = default(GLint);
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetLocalConstantIntegervEXT(id, value, h0.AddrOfPinnedObject());
                data = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMapAttribParameterfvNV(target, index, pname, @params);
        }
        public static void glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapAttribParameterfvNV(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapAttribParameterfvNV(target, index, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapAttribParameterivNV(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMapAttribParameterivNV(target, index, pname, @params);
        }
        public static void glGetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapAttribParameterivNV(target, index, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, [In, Out()] System.IntPtr points)
        {
            Delegates.glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, points);
        }
        public static void glGetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapControlPointsNV(target, index, type, ustride, vstride, packed, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMapdv(GLenum target, GLenum query, out GLdouble v)
        {
            v = default(GLdouble);
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapdv(target, query, h0.AddrOfPinnedObject());
                v = (GLdouble)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMapdv(GLenum target, GLenum query, [In, Out()] System.IntPtr v)
        {
            Delegates.glGetMapdv(target, query, v);
        }
        public static void glGetMapdv(GLenum target, GLenum query, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapdv(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMapfv(GLenum target, GLenum query, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapfv(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMapfv(GLenum target, GLenum query, [In, Out()] System.IntPtr v)
        {
            Delegates.glGetMapfv(target, query, v);
        }
        public static void glGetMapfv(GLenum target, GLenum query, out GLfloat v)
        {
            v = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapfv(target, query, h0.AddrOfPinnedObject());
                v = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMapiv(GLenum target, GLenum query, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapiv(target, query, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMapiv(GLenum target, GLenum query, out GLint v)
        {
            v = default(GLint);
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapiv(target, query, h0.AddrOfPinnedObject());
                v = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMapiv(GLenum target, GLenum query, [In, Out()] System.IntPtr v)
        {
            Delegates.glGetMapiv(target, query, v);
        }
        public static void glGetMapParameterfvNV(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMapParameterfvNV(target, pname, @params);
        }
        public static void glGetMapParameterfvNV(GLenum target, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapParameterfvNV(target, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMapParameterfvNV(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapParameterfvNV(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMapParameterivNV(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapParameterivNV(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMapParameterivNV(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMapParameterivNV(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMapParameterivNV(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMapParameterivNV(target, pname, @params);
        }
        public static void glGetMaterialfv(GLenum face, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMaterialfv(face, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMaterialfv(GLenum face, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMaterialfv(face, pname, @params);
        }
        public static void glGetMaterialfv(GLenum face, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMaterialfv(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMaterialiv(GLenum face, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMaterialiv(face, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMaterialiv(GLenum face, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMaterialiv(face, pname, @params);
        }
        public static void glGetMaterialiv(GLenum face, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMaterialiv(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, [In, Out()] System.IntPtr values)
        {
            Delegates.glGetMinmax(target, reset, format, type, values);
        }
        public static void glGetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmax(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, [In, Out()] System.IntPtr values)
        {
            Delegates.glGetMinmaxEXT(target, reset, format, type, values);
        }
        public static void glGetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, object values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxEXT(target, reset, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMinmaxParameterfv(GLenum target, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameterfv(target, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMinmaxParameterfv(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMinmaxParameterfv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMinmaxParameterfv(target, pname, @params);
        }
        public static void glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMinmaxParameterfvEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMinmaxParameterfvEXT(target, pname, @params);
        }
        public static void glGetMinmaxParameteriv(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameteriv(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMinmaxParameteriv(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMinmaxParameteriv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMinmaxParameteriv(target, pname, @params);
        }
        public static void glGetMinmaxParameterivEXT(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetMinmaxParameterivEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetMinmaxParameterivEXT(target, pname, @params);
        }
        public static void glGetMinmaxParameterivEXT(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetMinmaxParameterivEXT(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetObjectBufferfvATI(GLuint buffer, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectBufferfvATI(buffer, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetObjectBufferfvATI(GLuint buffer, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetObjectBufferfvATI(buffer, pname, @params);
        }
        public static void glGetObjectBufferfvATI(GLuint buffer, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectBufferfvATI(buffer, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetObjectBufferivATI(GLuint buffer, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectBufferivATI(buffer, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetObjectBufferivATI(GLuint buffer, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectBufferivATI(buffer, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetObjectBufferivATI(GLuint buffer, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetObjectBufferivATI(buffer, pname, @params);
        }
        public static void glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectParameterfvARB(obj, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetObjectParameterfvARB(obj, pname, @params);
        }
        public static void glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectParameterfvARB(obj, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectParameterivARB(obj, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetObjectParameterivARB(obj, pname, @params);
        }
        public static void glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetObjectParameterivARB(obj, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetOcclusionQueryivNV(GLuint id, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetOcclusionQueryivNV(id, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetOcclusionQueryivNV(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetOcclusionQueryivNV(id, pname, @params);
        }
        public static void glGetOcclusionQueryivNV(GLuint id, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetOcclusionQueryivNV(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetOcclusionQueryuivNV(GLuint id, GLenum pname, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetOcclusionQueryuivNV(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetOcclusionQueryuivNV(GLuint id, GLenum pname, out GLuint @params)
        {
            @params = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetOcclusionQueryuivNV(id, pname, h0.AddrOfPinnedObject());
                @params = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetOcclusionQueryuivNV(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetOcclusionQueryuivNV(id, pname, @params);
        }
        public static void glGetPixelMapfv(GLenum map, out GLfloat values)
        {
            values = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelMapfv(map, h0.AddrOfPinnedObject());
                values = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetPixelMapfv(GLenum map, GLfloat[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelMapfv(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetPixelMapfv(GLenum map, [In, Out()] System.IntPtr values)
        {
            Delegates.glGetPixelMapfv(map, values);
        }
        public static void glGetPixelMapuiv(GLenum map, out GLuint values)
        {
            values = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelMapuiv(map, h0.AddrOfPinnedObject());
                values = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetPixelMapuiv(GLenum map, [In, Out()] System.IntPtr values)
        {
            Delegates.glGetPixelMapuiv(map, values);
        }
        public static void glGetPixelMapuiv(GLenum map, GLuint[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelMapuiv(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetPixelMapusv(GLenum map, [In, Out()] System.IntPtr values)
        {
            Delegates.glGetPixelMapusv(map, values);
        }
        public static void glGetPixelMapusv(GLenum map, GLushort[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelMapusv(map, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetPixelMapusv(GLenum map, out GLushort values)
        {
            values = default(GLushort);
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelMapusv(map, h0.AddrOfPinnedObject());
                values = (GLushort)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetPixelTexGenParameterfvSGIS(GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetPixelTexGenParameterfvSGIS(pname, @params);
        }
        public static void glGetPixelTexGenParameterfvSGIS(GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelTexGenParameterfvSGIS(pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetPixelTexGenParameterfvSGIS(GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelTexGenParameterfvSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetPixelTexGenParameterivSGIS(GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelTexGenParameterivSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetPixelTexGenParameterivSGIS(GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPixelTexGenParameterivSGIS(pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetPixelTexGenParameterivSGIS(GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetPixelTexGenParameterivSGIS(pname, @params);
        }
        public static void glGetPointerv(GLenum pname, out object @params)
        {
            @params = default(System.Object);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPointerv(pname, h0.AddrOfPinnedObject());
                @params = (System.Object)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetPointerv(GLenum pname, object[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPointerv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetPointerv(GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetPointerv(pname, @params);
        }
        public static void glGetPointervEXT(GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetPointervEXT(pname, @params);
        }
        public static void glGetPolygonStipple([In, Out()] System.IntPtr mask)
        {
            Delegates.glGetPolygonStipple(mask);
        }
        public static void glGetPolygonStipple(GLubyte[] mask)
        {
            GCHandle h0 = GCHandle.Alloc(mask, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPolygonStipple(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetPolygonStipple(out GLubyte mask)
        {
            mask = default(GLubyte);
            GCHandle h0 = GCHandle.Alloc(mask, GCHandleType.Pinned);
            try
            {
                Delegates.glGetPolygonStipple(h0.AddrOfPinnedObject());
                mask = (GLubyte)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramEnvParameterdvARB(GLenum target, GLuint index, out GLdouble @params)
        {
            @params = default(GLdouble);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramEnvParameterdvARB(target, index, h0.AddrOfPinnedObject());
                @params = (GLdouble)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramEnvParameterdvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramEnvParameterdvARB(GLenum target, GLuint index, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramEnvParameterdvARB(target, index, @params);
        }
        public static void glGetProgramEnvParameterfvARB(GLenum target, GLuint index, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramEnvParameterfvARB(target, index, @params);
        }
        public static void glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramEnvParameterfvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramEnvParameterfvARB(GLenum target, GLuint index, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramEnvParameterfvARB(target, index, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramEnvParameterIivNV(GLenum target, GLuint index, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramEnvParameterIivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramEnvParameterIivNV(GLenum target, GLuint index, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramEnvParameterIivNV(target, index, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramEnvParameterIivNV(GLenum target, GLuint index, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramEnvParameterIivNV(target, index, @params);
        }
        public static void glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramEnvParameterIuivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramEnvParameterIuivNV(target, index, @params);
        }
        public static void glGetProgramEnvParameterIuivNV(GLenum target, GLuint index, out GLuint @params)
        {
            @params = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramEnvParameterIuivNV(target, index, h0.AddrOfPinnedObject());
                @params = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramInfoLog(GLuint program, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder infoLog)
        {
            Delegates.glGetProgramInfoLog(program, bufSize, length, infoLog);
        }
        public static void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei[] length, [In, Out()] System.Text.StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramInfoLog(program, bufSize, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramInfoLog(GLuint program, GLsizei bufSize, out GLsizei length, [In, Out()] System.Text.StringBuilder infoLog)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramInfoLog(program, bufSize, h0.AddrOfPinnedObject(), infoLog);
                length = (GLsizei)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramiv(GLuint program, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramiv(program, pname, @params);
        }
        public static void glGetProgramiv(GLuint program, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramiv(program, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramiv(GLuint program, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramiv(program, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramivARB(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramivARB(target, pname, @params);
        }
        public static void glGetProgramivARB(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramivARB(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramivARB(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramivARB(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramivNV(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramivNV(id, pname, @params);
        }
        public static void glGetProgramivNV(GLuint id, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramivNV(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramivNV(GLuint id, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramivNV(id, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramLocalParameterdvARB(GLenum target, GLuint index, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramLocalParameterdvARB(target, index, @params);
        }
        public static void glGetProgramLocalParameterdvARB(GLenum target, GLuint index, out GLdouble @params)
        {
            @params = default(GLdouble);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramLocalParameterdvARB(target, index, h0.AddrOfPinnedObject());
                @params = (GLdouble)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramLocalParameterdvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramLocalParameterfvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramLocalParameterfvARB(GLenum target, GLuint index, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramLocalParameterfvARB(target, index, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramLocalParameterfvARB(GLenum target, GLuint index, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramLocalParameterfvARB(target, index, @params);
        }
        public static void glGetProgramLocalParameterIivNV(GLenum target, GLuint index, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramLocalParameterIivNV(target, index, @params);
        }
        public static void glGetProgramLocalParameterIivNV(GLenum target, GLuint index, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramLocalParameterIivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramLocalParameterIivNV(GLenum target, GLuint index, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramLocalParameterIivNV(target, index, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramLocalParameterIuivNV(target, index, @params);
        }
        public static void glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, out GLuint @params)
        {
            @params = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramLocalParameterIuivNV(target, index, h0.AddrOfPinnedObject());
                @params = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramLocalParameterIuivNV(GLenum target, GLuint index, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramLocalParameterIuivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, ref GLubyte name, [In, Out()] System.IntPtr @params)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            @params = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                @params = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, out GLdouble @params)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            @params = default(GLdouble);
            GCHandle h1 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                @params = (GLdouble)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, ref GLubyte name, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, ref GLubyte name, out GLdouble @params)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            @params = default(GLdouble);
            GCHandle h1 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                @params = (GLdouble)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, System.IntPtr name, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, System.IntPtr name, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramNamedParameterdvNV(id, len, name, @params);
        }
        public static void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, GLubyte[] name, [In, Out()] System.IntPtr @params)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            @params = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                @params = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetProgramNamedParameterdvNV(GLuint id, GLsizei len, System.IntPtr name, out GLdouble @params)
        {
            @params = default(GLdouble);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterdvNV(id, len, name, h0.AddrOfPinnedObject());
                @params = (GLdouble)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, [In, Out()] System.IntPtr @params)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            @params = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                @params = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, System.IntPtr name, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, name, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, System.IntPtr name, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramNamedParameterfvNV(id, len, name, @params);
        }
        public static void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, System.IntPtr name, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, GLubyte[] name, out GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            @params = default(GLfloat);
            GCHandle h1 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                @params = (GLfloat)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, ref GLubyte name, out GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            @params = default(GLfloat);
            GCHandle h1 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                @params = (GLfloat)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, ref GLubyte name, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetProgramNamedParameterfvNV(GLuint id, GLsizei len, ref GLubyte name, [In, Out()] System.IntPtr @params)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            @params = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramNamedParameterfvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
                @params = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramParameterdvNV(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, out GLdouble @params)
        {
            @params = default(GLdouble);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramParameterdvNV(target, index, pname, h0.AddrOfPinnedObject());
                @params = (GLdouble)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramParameterdvNV(target, index, pname, @params);
        }
        public static void glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramParameterfvNV(target, index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramParameterfvNV(target, index, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetProgramParameterfvNV(target, index, pname, @params);
        }
        public static void glGetProgramStringARB(GLenum target, GLenum pname, object @string)
        {
            GCHandle h0 = GCHandle.Alloc(@string, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramStringARB(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramStringARB(GLenum target, GLenum pname, [In, Out()] System.IntPtr @string)
        {
            Delegates.glGetProgramStringARB(target, pname, @string);
        }
        public static void glGetProgramStringNV(GLuint id, GLenum pname, out GLubyte program)
        {
            program = default(GLubyte);
            GCHandle h0 = GCHandle.Alloc(program, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramStringNV(id, pname, h0.AddrOfPinnedObject());
                program = (GLubyte)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramStringNV(GLuint id, GLenum pname, GLubyte[] program)
        {
            GCHandle h0 = GCHandle.Alloc(program, GCHandleType.Pinned);
            try
            {
                Delegates.glGetProgramStringNV(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetProgramStringNV(GLuint id, GLenum pname, [In, Out()] System.IntPtr program)
        {
            Delegates.glGetProgramStringNV(id, pname, program);
        }
        public static void glGetQueryiv(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryiv(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetQueryiv(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryiv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetQueryiv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetQueryiv(target, pname, @params);
        }
        public static void glGetQueryivARB(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryivARB(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetQueryivARB(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryivARB(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetQueryivARB(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetQueryivARB(target, pname, @params);
        }
        public static void glGetQueryObjecti64vEXT(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetQueryObjecti64vEXT(id, pname, @params);
        }
        public static void glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64EXT[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjecti64vEXT(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetQueryObjecti64vEXT(GLuint id, GLenum pname, out GLint64EXT @params)
        {
            @params = default(GLint64EXT);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjecti64vEXT(id, pname, h0.AddrOfPinnedObject());
                @params = (GLint64EXT)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetQueryObjectiv(GLuint id, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectiv(id, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetQueryObjectiv(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetQueryObjectiv(id, pname, @params);
        }
        public static void glGetQueryObjectiv(GLuint id, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectiv(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetQueryObjectivARB(GLuint id, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectivARB(id, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetQueryObjectivARB(GLuint id, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectivARB(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetQueryObjectivARB(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetQueryObjectivARB(id, pname, @params);
        }
        public static void glGetQueryObjectui64vEXT(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetQueryObjectui64vEXT(id, pname, @params);
        }
        public static void glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64EXT[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectui64vEXT(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetQueryObjectui64vEXT(GLuint id, GLenum pname, out GLuint64EXT @params)
        {
            @params = default(GLuint64EXT);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectui64vEXT(id, pname, h0.AddrOfPinnedObject());
                @params = (GLuint64EXT)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetQueryObjectuiv(GLuint id, GLenum pname, out GLuint @params)
        {
            @params = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectuiv(id, pname, h0.AddrOfPinnedObject());
                @params = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectuiv(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetQueryObjectuiv(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetQueryObjectuiv(id, pname, @params);
        }
        public static void glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectuivARB(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetQueryObjectuivARB(GLuint id, GLenum pname, out GLuint @params)
        {
            @params = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetQueryObjectuivARB(id, pname, h0.AddrOfPinnedObject());
                @params = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetQueryObjectuivARB(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetQueryObjectuivARB(id, pname, @params);
        }
        public static void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetRenderbufferParameterivEXT(target, pname, @params);
        }
        public static void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetRenderbufferParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetRenderbufferParameterivEXT(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr row, object column, object span)
        {
            row = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
                row = (System.IntPtr)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, [In, Out()] System.IntPtr column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            column = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
                column = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr row, [In, Out()] System.IntPtr column, [In, Out()] System.IntPtr span)
        {
            Delegates.glGetSeparableFilter(target, format, type, row, column, span);
        }
        public static void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, [In, Out()] System.IntPtr column, [In, Out()] System.IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            column = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            span = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
                column = (System.IntPtr)h1.Target;
                span = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr row, [In, Out()] System.IntPtr column, object span)
        {
            row = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            column = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
                row = (System.IntPtr)h0.Target;
                column = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr row, object column, [In, Out()] System.IntPtr span)
        {
            row = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            span = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
                row = (System.IntPtr)h0.Target;
                span = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, object column, [In, Out()] System.IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            span = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
                span = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetSeparableFilter(GLenum target, GLenum format, GLenum type, object row, object column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilter(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, [In, Out()] System.IntPtr column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            column = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
                column = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, [In, Out()] System.IntPtr column, [In, Out()] System.IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            column = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            span = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
                column = (System.IntPtr)h1.Target;
                span = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, object column, object span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, object row, object column, [In, Out()] System.IntPtr span)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            span = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
                span = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr row, [In, Out()] System.IntPtr column, object span)
        {
            row = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            column = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
                row = (System.IntPtr)h0.Target;
                column = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr row, [In, Out()] System.IntPtr column, [In, Out()] System.IntPtr span)
        {
            Delegates.glGetSeparableFilterEXT(target, format, type, row, column, span);
        }
        public static void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr row, object column, object span)
        {
            row = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
                row = (System.IntPtr)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr row, object column, [In, Out()] System.IntPtr span)
        {
            row = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            span = default(System.IntPtr);
            GCHandle h2 = GCHandle.Alloc(span, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSeparableFilterEXT(target, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
                row = (System.IntPtr)h0.Target;
                span = (System.IntPtr)h2.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder infoLog)
        {
            Delegates.glGetShaderInfoLog(shader, bufSize, length, infoLog);
        }
        public static void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, out GLsizei length, [In, Out()] System.Text.StringBuilder infoLog)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderInfoLog(shader, bufSize, h0.AddrOfPinnedObject(), infoLog);
                length = (GLsizei)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei[] length, [In, Out()] System.Text.StringBuilder infoLog)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderInfoLog(shader, bufSize, h0.AddrOfPinnedObject(), infoLog);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetShaderiv(GLuint shader, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderiv(shader, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetShaderiv(GLuint shader, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetShaderiv(shader, pname, @params);
        }
        public static void glGetShaderiv(GLuint shader, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderiv(shader, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetShaderSource(GLuint shader, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder source)
        {
            Delegates.glGetShaderSource(shader, bufSize, length, source);
        }
        public static void glGetShaderSource(GLuint shader, GLsizei bufSize, out GLsizei length, [In, Out()] System.Text.StringBuilder source)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderSource(shader, bufSize, h0.AddrOfPinnedObject(), source);
                length = (GLsizei)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei[] length, [In, Out()] System.Text.StringBuilder source)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderSource(shader, bufSize, h0.AddrOfPinnedObject(), source);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, out GLsizei length, [In, Out()] System.Text.StringBuilder source)
        {
            length = default(GLsizei);
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderSourceARB(obj, maxLength, h0.AddrOfPinnedObject(), source);
                length = (GLsizei)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei[] length, [In, Out()] System.Text.StringBuilder source)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glGetShaderSourceARB(obj, maxLength, h0.AddrOfPinnedObject(), source);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder source)
        {
            Delegates.glGetShaderSourceARB(obj, maxLength, length, source);
        }
        public static void glGetSharpenTexFuncSGIS(GLenum target, out GLfloat points)
        {
            points = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSharpenTexFuncSGIS(target, h0.AddrOfPinnedObject());
                points = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetSharpenTexFuncSGIS(GLenum target, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glGetSharpenTexFuncSGIS(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetSharpenTexFuncSGIS(GLenum target, [In, Out()] System.IntPtr points)
        {
            Delegates.glGetSharpenTexFuncSGIS(target, points);
        }
        public static string glGetString(GLenum name)
        {
            return Marshal.PtrToStringAnsi(Delegates.glGetString(name));
        }
        public static void glGetTexBumpParameterfvATI(GLenum pname, GLfloat[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexBumpParameterfvATI(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexBumpParameterfvATI(GLenum pname, [In, Out()] System.IntPtr param)
        {
            Delegates.glGetTexBumpParameterfvATI(pname, param);
        }
        public static void glGetTexBumpParameterfvATI(GLenum pname, out GLfloat param)
        {
            param = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexBumpParameterfvATI(pname, h0.AddrOfPinnedObject());
                param = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexBumpParameterivATI(GLenum pname, out GLint param)
        {
            param = default(GLint);
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexBumpParameterivATI(pname, h0.AddrOfPinnedObject());
                param = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexBumpParameterivATI(GLenum pname, GLint[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexBumpParameterivATI(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexBumpParameterivATI(GLenum pname, [In, Out()] System.IntPtr param)
        {
            Delegates.glGetTexBumpParameterivATI(pname, param);
        }
        public static void glGetTexEnvfv(GLenum target, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexEnvfv(target, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexEnvfv(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexEnvfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexEnvfv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexEnvfv(target, pname, @params);
        }
        public static void glGetTexEnviv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexEnviv(target, pname, @params);
        }
        public static void glGetTexEnviv(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexEnviv(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexEnviv(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexEnviv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexFilterFuncSGIS(GLenum target, GLenum filter, [In, Out()] System.IntPtr weights)
        {
            Delegates.glGetTexFilterFuncSGIS(target, filter, weights);
        }
        public static void glGetTexFilterFuncSGIS(GLenum target, GLenum filter, GLfloat[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexFilterFuncSGIS(target, filter, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexFilterFuncSGIS(GLenum target, GLenum filter, out GLfloat weights)
        {
            weights = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexFilterFuncSGIS(target, filter, h0.AddrOfPinnedObject());
                weights = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexGendv(GLenum coord, GLenum pname, out GLdouble @params)
        {
            @params = default(GLdouble);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexGendv(coord, pname, h0.AddrOfPinnedObject());
                @params = (GLdouble)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexGendv(GLenum coord, GLenum pname, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexGendv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexGendv(GLenum coord, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexGendv(coord, pname, @params);
        }
        public static void glGetTexGenfv(GLenum coord, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexGenfv(coord, pname, @params);
        }
        public static void glGetTexGenfv(GLenum coord, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexGenfv(coord, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexGenfv(GLenum coord, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexGenfv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexGeniv(GLenum coord, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexGeniv(coord, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexGeniv(GLenum coord, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexGeniv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexGeniv(GLenum coord, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexGeniv(coord, pname, @params);
        }
        public static void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexImage(target, level, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, [In, Out()] System.IntPtr pixels)
        {
            Delegates.glGetTexImage(target, level, format, type, pixels);
        }
        public static void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexLevelParameterfv(target, level, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexLevelParameterfv(target, level, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexLevelParameterfv(target, level, pname, @params);
        }
        public static void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexLevelParameteriv(target, level, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexLevelParameteriv(target, level, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexLevelParameteriv(target, level, pname, @params);
        }
        public static void glGetTexParameterfv(GLenum target, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexParameterfv(target, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexParameterfv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexParameterfv(target, pname, @params);
        }
        public static void glGetTexParameterIivEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexParameterIivEXT(target, pname, @params);
        }
        public static void glGetTexParameterIivEXT(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexParameterIivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexParameterIivEXT(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexParameterIivEXT(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexParameterIuivEXT(GLenum target, GLenum pname, out GLuint @params)
        {
            @params = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexParameterIuivEXT(target, pname, h0.AddrOfPinnedObject());
                @params = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexParameterIuivEXT(GLenum target, GLenum pname, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexParameterIuivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexParameterIuivEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexParameterIuivEXT(target, pname, @params);
        }
        public static void glGetTexParameteriv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTexParameteriv(target, pname, @params);
        }
        public static void glGetTexParameteriv(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTexParameteriv(GLenum target, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTexParameteriv(target, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTrackMatrixivNV(target, address, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTrackMatrixivNV(target, address, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetTrackMatrixivNV(target, address, pname, @params);
        }
        public static void glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, [In, Out()] System.IntPtr location)
        {
            Delegates.glGetTransformFeedbackVaryingNV(program, index, location);
        }
        public static void glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, GLint[] location)
        {
            GCHandle h0 = GCHandle.Alloc(location, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTransformFeedbackVaryingNV(program, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetTransformFeedbackVaryingNV(GLuint program, GLuint index, out GLint location)
        {
            location = default(GLint);
            GCHandle h0 = GCHandle.Alloc(location, GCHandleType.Pinned);
            try
            {
                Delegates.glGetTransformFeedbackVaryingNV(program, index, h0.AddrOfPinnedObject());
                location = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLint glGetUniformBufferSizeEXT(GLuint program, GLint location)
        {
            return Delegates.glGetUniformBufferSizeEXT(program, location);
        }
        public static void glGetUniformfv(GLuint program, GLint location, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetUniformfv(program, location, @params);
        }
        public static void glGetUniformfv(GLuint program, GLint location, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformfv(program, location, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetUniformfv(GLuint program, GLint location, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformfv(program, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetUniformfvARB(GLhandleARB programObj, GLint location, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformfvARB(programObj, location, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformfvARB(programObj, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetUniformfvARB(GLhandleARB programObj, GLint location, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetUniformfvARB(programObj, location, @params);
        }
        public static void glGetUniformiv(GLuint program, GLint location, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformiv(program, location, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetUniformiv(GLuint program, GLint location, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformiv(program, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetUniformiv(GLuint program, GLint location, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetUniformiv(program, location, @params);
        }
        public static void glGetUniformivARB(GLhandleARB programObj, GLint location, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformivARB(programObj, location, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetUniformivARB(GLhandleARB programObj, GLint location, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetUniformivARB(programObj, location, @params);
        }
        public static void glGetUniformivARB(GLhandleARB programObj, GLint location, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformivARB(programObj, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLint glGetUniformLocation(GLuint program, string name)
        {
            return Delegates.glGetUniformLocation(program, name);
        }
        public static GLint glGetUniformLocationARB(GLhandleARB programObj, string name)
        {
            return Delegates.glGetUniformLocationARB(programObj, name);
        }
        public static GLintptr glGetUniformOffsetEXT(GLuint program, GLint location)
        {
            return Delegates.glGetUniformOffsetEXT(program, location);
        }
        public static void glGetUniformuivEXT(GLuint program, GLint location, out GLuint @params)
        {
            @params = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformuivEXT(program, location, h0.AddrOfPinnedObject());
                @params = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetUniformuivEXT(GLuint program, GLint location, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetUniformuivEXT(program, location, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetUniformuivEXT(GLuint program, GLint location, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetUniformuivEXT(program, location, @params);
        }
        public static void glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantArrayObjectfvATI(id, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantArrayObjectfvATI(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVariantArrayObjectfvATI(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVariantArrayObjectfvATI(id, pname, @params);
        }
        public static void glGetVariantArrayObjectivATI(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVariantArrayObjectivATI(id, pname, @params);
        }
        public static void glGetVariantArrayObjectivATI(GLuint id, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantArrayObjectivATI(id, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVariantArrayObjectivATI(GLuint id, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantArrayObjectivATI(id, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVariantBooleanvEXT(GLuint id, GLenum value, out GLboolean data)
        {
            data = default(GLboolean);
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantBooleanvEXT(id, value, h0.AddrOfPinnedObject());
                data = (GLboolean)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVariantBooleanvEXT(GLuint id, GLenum value, GLboolean[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantBooleanvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVariantBooleanvEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetVariantBooleanvEXT(id, value, data);
        }
        public static void glGetVariantFloatvEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetVariantFloatvEXT(id, value, data);
        }
        public static void glGetVariantFloatvEXT(GLuint id, GLenum value, GLfloat[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantFloatvEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVariantFloatvEXT(GLuint id, GLenum value, out GLfloat data)
        {
            data = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantFloatvEXT(id, value, h0.AddrOfPinnedObject());
                data = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVariantIntegervEXT(GLuint id, GLenum value, out GLint data)
        {
            data = default(GLint);
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantIntegervEXT(id, value, h0.AddrOfPinnedObject());
                data = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVariantIntegervEXT(GLuint id, GLenum value, GLint[] data)
        {
            GCHandle h0 = GCHandle.Alloc(data, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVariantIntegervEXT(id, value, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVariantIntegervEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetVariantIntegervEXT(id, value, data);
        }
        public static void glGetVariantPointervEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data)
        {
            Delegates.glGetVariantPointervEXT(id, value, data);
        }
        public static GLint glGetVaryingLocationNV(GLuint program, string name)
        {
            return Delegates.glGetVaryingLocationNV(program, name);
        }
        public static void glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribArrayObjectfvATI(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribArrayObjectfvATI(index, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribArrayObjectfvATI(index, pname, @params);
        }
        public static void glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribArrayObjectivATI(index, pname, @params);
        }
        public static void glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribArrayObjectivATI(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribArrayObjectivATI(index, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribdv(GLuint index, GLenum pname, out GLdouble @params)
        {
            @params = default(GLdouble);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribdv(index, pname, h0.AddrOfPinnedObject());
                @params = (GLdouble)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribdv(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribdv(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribdv(index, pname, @params);
        }
        public static void glGetVertexAttribdvARB(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribdvARB(index, pname, @params);
        }
        public static void glGetVertexAttribdvARB(GLuint index, GLenum pname, out GLdouble @params)
        {
            @params = default(GLdouble);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribdvARB(index, pname, h0.AddrOfPinnedObject());
                @params = (GLdouble)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribdvARB(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribdvNV(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribdvNV(index, pname, @params);
        }
        public static void glGetVertexAttribdvNV(GLuint index, GLenum pname, out GLdouble @params)
        {
            @params = default(GLdouble);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribdvNV(index, pname, h0.AddrOfPinnedObject());
                @params = (GLdouble)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribdvNV(GLuint index, GLenum pname, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribdvNV(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribfv(GLuint index, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribfv(index, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribfv(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribfv(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribfv(index, pname, @params);
        }
        public static void glGetVertexAttribfvARB(GLuint index, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribfvARB(index, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribfvARB(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribfvARB(index, pname, @params);
        }
        public static void glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribfvARB(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribfvNV(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribfvNV(index, pname, @params);
        }
        public static void glGetVertexAttribfvNV(GLuint index, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribfvNV(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribfvNV(GLuint index, GLenum pname, out GLfloat @params)
        {
            @params = default(GLfloat);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribfvNV(index, pname, h0.AddrOfPinnedObject());
                @params = (GLfloat)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribIivEXT(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribIivEXT(index, pname, @params);
        }
        public static void glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribIivEXT(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribIivEXT(GLuint index, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribIivEXT(index, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribIuivEXT(GLuint index, GLenum pname, out GLuint @params)
        {
            @params = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribIuivEXT(index, pname, h0.AddrOfPinnedObject());
                @params = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribIuivEXT(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribIuivEXT(index, pname, @params);
        }
        public static void glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribIuivEXT(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribiv(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribiv(index, pname, @params);
        }
        public static void glGetVertexAttribiv(GLuint index, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribiv(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribiv(GLuint index, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribiv(index, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribivARB(GLuint index, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribivARB(index, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribivARB(GLuint index, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribivARB(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribivARB(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribivARB(index, pname, @params);
        }
        public static void glGetVertexAttribivNV(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params)
        {
            Delegates.glGetVertexAttribivNV(index, pname, @params);
        }
        public static void glGetVertexAttribivNV(GLuint index, GLenum pname, out GLint @params)
        {
            @params = default(GLint);
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribivNV(index, pname, h0.AddrOfPinnedObject());
                @params = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribivNV(GLuint index, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glGetVertexAttribivNV(index, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glGetVertexAttribPointerv(GLuint index, GLenum pname, [In, Out()] System.IntPtr pointer)
        {
            Delegates.glGetVertexAttribPointerv(index, pname, pointer);
        }
        public static void glGetVertexAttribPointervARB(GLuint index, GLenum pname, [In, Out()] System.IntPtr pointer)
        {
            Delegates.glGetVertexAttribPointervARB(index, pname, pointer);
        }
        public static void glGetVertexAttribPointervNV(GLuint index, GLenum pname, [In, Out()] System.IntPtr pointer)
        {
            Delegates.glGetVertexAttribPointervNV(index, pname, pointer);
        }
        public static void glGlobalAlphaFactorbSUN(GLbyte factor)
        {
            Delegates.glGlobalAlphaFactorbSUN(factor);
        }
        public static void glGlobalAlphaFactordSUN(GLdouble factor)
        {
            Delegates.glGlobalAlphaFactordSUN(factor);
        }
        public static void glGlobalAlphaFactorfSUN(GLfloat factor)
        {
            Delegates.glGlobalAlphaFactorfSUN(factor);
        }
        public static void glGlobalAlphaFactoriSUN(GLint factor)
        {
            Delegates.glGlobalAlphaFactoriSUN(factor);
        }
        public static void glGlobalAlphaFactorsSUN(GLshort factor)
        {
            Delegates.glGlobalAlphaFactorsSUN(factor);
        }
        public static void glGlobalAlphaFactorubSUN(GLubyte factor)
        {
            Delegates.glGlobalAlphaFactorubSUN(factor);
        }
        public static void glGlobalAlphaFactoruiSUN(GLuint factor)
        {
            Delegates.glGlobalAlphaFactoruiSUN(factor);
        }
        public static void glGlobalAlphaFactorusSUN(GLushort factor)
        {
            Delegates.glGlobalAlphaFactorusSUN(factor);
        }
        public static void glHint(GLenum target, GLenum mode)
        {
            Delegates.glHint(target, mode);
        }
        public static void glHintPGI(GLenum target, GLint mode)
        {
            Delegates.glHintPGI(target, mode);
        }
        public static void glHistogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
        {
            Delegates.glHistogram(target, width, internalformat, sink);
        }
        public static void glHistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)
        {
            Delegates.glHistogramEXT(target, width, internalformat, sink);
        }
        public static void glIglooInterfaceSGIX(GLenum pname, System.IntPtr @params)
        {
            Delegates.glIglooInterfaceSGIX(pname, @params);
        }
        public static void glIglooInterfaceSGIX(GLenum pname, object @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glIglooInterfaceSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param)
        {
            Delegates.glImageTransformParameterfHP(target, pname, param);
        }
        public static void glImageTransformParameterfvHP(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glImageTransformParameterfvHP(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glImageTransformParameterfvHP(GLenum target, GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glImageTransformParameterfvHP(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glImageTransformParameterfvHP(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glImageTransformParameterfvHP(target, pname, @params);
        }
        public static void glImageTransformParameteriHP(GLenum target, GLenum pname, GLint param)
        {
            Delegates.glImageTransformParameteriHP(target, pname, param);
        }
        public static void glImageTransformParameterivHP(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glImageTransformParameterivHP(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glImageTransformParameterivHP(GLenum target, GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glImageTransformParameterivHP(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glImageTransformParameterivHP(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glImageTransformParameterivHP(target, pname, @params);
        }
        public static void glIndexd(GLdouble c)
        {
            Delegates.glIndexd(c);
        }
        public static void glIndexdv(System.IntPtr c)
        {
            Delegates.glIndexdv(c);
        }
        public static void glIndexdv(GLdouble[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexdv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glIndexdv(ref GLdouble c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexdv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glIndexf(GLfloat c)
        {
            Delegates.glIndexf(c);
        }
        public static void glIndexFuncEXT(GLenum func, GLclampf @ref)
        {
            Delegates.glIndexFuncEXT(func, @ref);
        }
        public static void glIndexfv(GLfloat[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexfv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glIndexfv(System.IntPtr c)
        {
            Delegates.glIndexfv(c);
        }
        public static void glIndexfv(ref GLfloat c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexfv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glIndexi(GLint c)
        {
            Delegates.glIndexi(c);
        }
        public static void glIndexiv(System.IntPtr c)
        {
            Delegates.glIndexiv(c);
        }
        public static void glIndexiv(GLint[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glIndexiv(ref GLint c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glIndexMask(GLuint mask)
        {
            Delegates.glIndexMask(mask);
        }
        public static void glIndexMaterialEXT(GLenum face, GLenum mode)
        {
            Delegates.glIndexMaterialEXT(face, mode);
        }
        public static void glIndexPointer(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexPointer(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glIndexPointer(GLenum type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glIndexPointer(type, stride, pointer);
        }
        public static void glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexPointerEXT(type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glIndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, System.IntPtr pointer)
        {
            Delegates.glIndexPointerEXT(type, stride, count, pointer);
        }
        public static void glIndexPointerListIBM(GLenum type, GLint stride, System.IntPtr pointer, GLint ptrstride)
        {
            Delegates.glIndexPointerListIBM(type, stride, pointer, ptrstride);
        }
        public static void glIndexs(GLshort c)
        {
            Delegates.glIndexs(c);
        }
        public static void glIndexsv(GLshort[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexsv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glIndexsv(ref GLshort c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexsv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glIndexsv(System.IntPtr c)
        {
            Delegates.glIndexsv(c);
        }
        public static void glIndexub(GLubyte c)
        {
            Delegates.glIndexub(c);
        }
        public static void glIndexubv(System.IntPtr c)
        {
            Delegates.glIndexubv(c);
        }
        public static void glIndexubv(ref GLubyte c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glIndexubv(GLubyte[] c)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glIndexubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glInitNames()
        {
            Delegates.glInitNames();
        }
        public static void glInsertComponentEXT(GLuint res, GLuint src, GLuint num)
        {
            Delegates.glInsertComponentEXT(res, src, num);
        }
        public static void glInstrumentsBufferSGIX(GLsizei size, GLint[] buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                Delegates.glInstrumentsBufferSGIX(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glInstrumentsBufferSGIX(GLsizei size, out GLint buffer)
        {
            buffer = default(GLint);
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                Delegates.glInstrumentsBufferSGIX(size, h0.AddrOfPinnedObject());
                buffer = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glInstrumentsBufferSGIX(GLsizei size, [In, Out()] System.IntPtr buffer)
        {
            Delegates.glInstrumentsBufferSGIX(size, buffer);
        }
        public static void glInterleavedArrays(GLenum format, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glInterleavedArrays(format, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glInterleavedArrays(GLenum format, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glInterleavedArrays(format, stride, pointer);
        }
        public static GLboolean glIsAsyncMarkerSGIX(GLuint marker)
        {
            return Delegates.glIsAsyncMarkerSGIX(marker);
        }
        public static GLboolean glIsBuffer(GLuint buffer)
        {
            return Delegates.glIsBuffer(buffer);
        }
        public static GLboolean glIsBufferARB(GLuint buffer)
        {
            return Delegates.glIsBufferARB(buffer);
        }
        public static GLboolean glIsEnabled(GLenum cap)
        {
            return Delegates.glIsEnabled(cap);
        }
        public static GLboolean glIsEnabledIndexedEXT(GLenum target, GLuint index)
        {
            return Delegates.glIsEnabledIndexedEXT(target, index);
        }
        public static GLboolean glIsFenceAPPLE(GLuint fence)
        {
            return Delegates.glIsFenceAPPLE(fence);
        }
        public static GLboolean glIsFenceNV(GLuint fence)
        {
            return Delegates.glIsFenceNV(fence);
        }
        public static GLboolean glIsFramebufferEXT(GLuint framebuffer)
        {
            return Delegates.glIsFramebufferEXT(framebuffer);
        }
        public static GLboolean glIsList(GLuint list)
        {
            return Delegates.glIsList(list);
        }
        public static GLboolean glIsObjectBufferATI(GLuint buffer)
        {
            return Delegates.glIsObjectBufferATI(buffer);
        }
        public static GLboolean glIsOcclusionQueryNV(GLuint id)
        {
            return Delegates.glIsOcclusionQueryNV(id);
        }
        public static GLboolean glIsProgram(GLuint program)
        {
            return Delegates.glIsProgram(program);
        }
        public static GLboolean glIsProgramARB(GLuint program)
        {
            return Delegates.glIsProgramARB(program);
        }
        public static GLboolean glIsProgramNV(GLuint id)
        {
            return Delegates.glIsProgramNV(id);
        }
        public static GLboolean glIsQuery(GLuint id)
        {
            return Delegates.glIsQuery(id);
        }
        public static GLboolean glIsQueryARB(GLuint id)
        {
            return Delegates.glIsQueryARB(id);
        }
        public static GLboolean glIsRenderbufferEXT(GLuint renderbuffer)
        {
            return Delegates.glIsRenderbufferEXT(renderbuffer);
        }
        public static GLboolean glIsShader(GLuint shader)
        {
            return Delegates.glIsShader(shader);
        }
        public static GLboolean glIsTexture(GLuint texture)
        {
            return Delegates.glIsTexture(texture);
        }
        public static GLboolean glIsTextureEXT(GLuint texture)
        {
            return Delegates.glIsTextureEXT(texture);
        }
        public static GLboolean glIsVariantEnabledEXT(GLuint id, GLenum cap)
        {
            return Delegates.glIsVariantEnabledEXT(id, cap);
        }
        public static GLboolean glIsVertexArrayAPPLE(GLuint array)
        {
            return Delegates.glIsVertexArrayAPPLE(array);
        }
        public static void glLightEnviSGIX(GLenum pname, GLint param)
        {
            Delegates.glLightEnviSGIX(pname, param);
        }
        public static void glLightf(GLenum light, GLenum pname, GLfloat param)
        {
            Delegates.glLightf(light, pname, param);
        }
        public static void glLightfv(GLenum light, GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glLightfv(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLightfv(GLenum light, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glLightfv(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLightfv(GLenum light, GLenum pname, System.IntPtr @params)
        {
            Delegates.glLightfv(light, pname, @params);
        }
        public static void glLighti(GLenum light, GLenum pname, GLint param)
        {
            Delegates.glLighti(light, pname, param);
        }
        public static void glLightiv(GLenum light, GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glLightiv(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLightiv(GLenum light, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glLightiv(light, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLightiv(GLenum light, GLenum pname, System.IntPtr @params)
        {
            Delegates.glLightiv(light, pname, @params);
        }
        public static void glLightModelf(GLenum pname, GLfloat param)
        {
            Delegates.glLightModelf(pname, param);
        }
        public static void glLightModelfv(GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glLightModelfv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLightModelfv(GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glLightModelfv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLightModelfv(GLenum pname, System.IntPtr @params)
        {
            Delegates.glLightModelfv(pname, @params);
        }
        public static void glLightModeli(GLenum pname, GLint param)
        {
            Delegates.glLightModeli(pname, param);
        }
        public static void glLightModeliv(GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glLightModeliv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLightModeliv(GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glLightModeliv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLightModeliv(GLenum pname, System.IntPtr @params)
        {
            Delegates.glLightModeliv(pname, @params);
        }
        public static void glLineStipple(GLint factor, GLushort pattern)
        {
            Delegates.glLineStipple(factor, unchecked((GLushort)pattern));
        }
        public static void glLineWidth(GLfloat width)
        {
            Delegates.glLineWidth(width);
        }
        public static void glLinkProgram(GLuint program)
        {
            Delegates.glLinkProgram(program);
        }
        public static void glLinkProgramARB(GLhandleARB programObj)
        {
            Delegates.glLinkProgramARB(programObj);
        }
        public static void glListBase(GLuint @base)
        {
            Delegates.glListBase(@base);
        }
        public static void glListParameterfSGIX(GLuint list, GLenum pname, GLfloat param)
        {
            Delegates.glListParameterfSGIX(list, pname, param);
        }
        public static void glListParameterfvSGIX(GLuint list, GLenum pname, System.IntPtr @params)
        {
            Delegates.glListParameterfvSGIX(list, pname, @params);
        }
        public static void glListParameterfvSGIX(GLuint list, GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glListParameterfvSGIX(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glListParameterfvSGIX(GLuint list, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glListParameterfvSGIX(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glListParameteriSGIX(GLuint list, GLenum pname, GLint param)
        {
            Delegates.glListParameteriSGIX(list, pname, param);
        }
        public static void glListParameterivSGIX(GLuint list, GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glListParameterivSGIX(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glListParameterivSGIX(GLuint list, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glListParameterivSGIX(list, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glListParameterivSGIX(GLuint list, GLenum pname, System.IntPtr @params)
        {
            Delegates.glListParameterivSGIX(list, pname, @params);
        }
        public static void glLoadIdentity()
        {
            Delegates.glLoadIdentity();
        }
        public static void glLoadIdentityDeformationMapSGIX(GLbitfield mask)
        {
            Delegates.glLoadIdentityDeformationMapSGIX(mask);
        }
        public static void glLoadMatrixd(ref GLdouble m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLoadMatrixd(System.IntPtr m)
        {
            Delegates.glLoadMatrixd(m);
        }
        public static void glLoadMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLoadMatrixf(System.IntPtr m)
        {
            Delegates.glLoadMatrixf(m);
        }
        public static void glLoadMatrixf(ref GLfloat m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLoadMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLoadName(GLuint name)
        {
            Delegates.glLoadName(name);
        }
        public static void glLoadProgramNV(GLenum target, GLuint id, GLsizei len, ref GLubyte program)
        {
            GCHandle h0 = GCHandle.Alloc(program, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadProgramNV(target, id, len, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLoadProgramNV(GLenum target, GLuint id, GLsizei len, GLubyte[] program)
        {
            GCHandle h0 = GCHandle.Alloc(program, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadProgramNV(target, id, len, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLoadProgramNV(GLenum target, GLuint id, GLsizei len, System.IntPtr program)
        {
            Delegates.glLoadProgramNV(target, id, len, program);
        }
        public static void glLoadTransposeMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLoadTransposeMatrixd(ref GLdouble m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLoadTransposeMatrixd(System.IntPtr m)
        {
            Delegates.glLoadTransposeMatrixd(m);
        }
        public static void glLoadTransposeMatrixdARB(ref GLdouble m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixdARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLoadTransposeMatrixdARB(System.IntPtr m)
        {
            Delegates.glLoadTransposeMatrixdARB(m);
        }
        public static void glLoadTransposeMatrixdARB(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixdARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLoadTransposeMatrixf(System.IntPtr m)
        {
            Delegates.glLoadTransposeMatrixf(m);
        }
        public static void glLoadTransposeMatrixf(ref GLfloat m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLoadTransposeMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLoadTransposeMatrixfARB(ref GLfloat m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixfARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLoadTransposeMatrixfARB(System.IntPtr m)
        {
            Delegates.glLoadTransposeMatrixfARB(m);
        }
        public static void glLoadTransposeMatrixfARB(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glLoadTransposeMatrixfARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glLockArraysEXT(GLint first, GLsizei count)
        {
            Delegates.glLockArraysEXT(first, count);
        }
        public static void glLogicOp(GLenum opcode)
        {
            Delegates.glLogicOp(opcode);
        }
        public static void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, System.IntPtr points)
        {
            Delegates.glMap1d(target, u1, u2, stride, order, points);
        }
        public static void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, GLdouble[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap1d(target, u1, u2, stride, order, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMap1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, ref GLdouble points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap1d(target, u1, u2, stride, order, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, System.IntPtr points)
        {
            Delegates.glMap1f(target, u1, u2, stride, order, points);
        }
        public static void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap1f(target, u1, u2, stride, order, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMap1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, ref GLfloat points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap1f(target, u1, u2, stride, order, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, System.IntPtr points)
        {
            Delegates.glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        public static void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, ref GLdouble points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMap2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap2d(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, ref GLfloat points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMap2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, System.IntPtr points)
        {
            Delegates.glMap2f(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
        }
        public static IntPtr glMapBuffer(GLenum target, GLenum access)
        {
            return Delegates.glMapBuffer(target, access);
        }
        public static IntPtr glMapBufferARB(GLenum target, GLenum access)
        {
            return Delegates.glMapBufferARB(target, access);
        }
        public static void glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, object points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, System.IntPtr points)
        {
            Delegates.glMapControlPointsNV(target, index, type, ustride, vstride, uorder, vorder, packed, points);
        }
        public static void glMapGrid1d(GLint un, GLdouble u1, GLdouble u2)
        {
            Delegates.glMapGrid1d(un, u1, u2);
        }
        public static void glMapGrid1f(GLint un, GLfloat u1, GLfloat u2)
        {
            Delegates.glMapGrid1f(un, u1, u2);
        }
        public static void glMapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)
        {
            Delegates.glMapGrid2d(un, u1, u2, vn, v1, v2);
        }
        public static void glMapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)
        {
            Delegates.glMapGrid2f(un, u1, u2, vn, v1, v2);
        }
        public static IntPtr glMapObjectBufferATI(GLuint buffer)
        {
            return Delegates.glMapObjectBufferATI(buffer);
        }
        public static void glMapParameterfvNV(GLenum target, GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glMapParameterfvNV(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMapParameterfvNV(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glMapParameterfvNV(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMapParameterfvNV(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glMapParameterfvNV(target, pname, @params);
        }
        public static void glMapParameterivNV(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glMapParameterivNV(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMapParameterivNV(GLenum target, GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glMapParameterivNV(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMapParameterivNV(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glMapParameterivNV(target, pname, @params);
        }
        public static void glMaterialf(GLenum face, GLenum pname, GLfloat param)
        {
            Delegates.glMaterialf(face, pname, param);
        }
        public static void glMaterialfv(GLenum face, GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glMaterialfv(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMaterialfv(GLenum face, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glMaterialfv(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMaterialfv(GLenum face, GLenum pname, System.IntPtr @params)
        {
            Delegates.glMaterialfv(face, pname, @params);
        }
        public static void glMateriali(GLenum face, GLenum pname, GLint param)
        {
            Delegates.glMateriali(face, pname, param);
        }
        public static void glMaterialiv(GLenum face, GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glMaterialiv(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMaterialiv(GLenum face, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glMaterialiv(face, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMaterialiv(GLenum face, GLenum pname, System.IntPtr @params)
        {
            Delegates.glMaterialiv(face, pname, @params);
        }
        public static void glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glMatrixIndexPointerARB(size, type, stride, pointer);
        }
        public static void glMatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glMatrixIndexPointerARB(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMatrixIndexubvARB(GLint size, System.IntPtr indices)
        {
            Delegates.glMatrixIndexubvARB(size, indices);
        }
        public static void glMatrixIndexubvARB(GLint size, GLubyte[] indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMatrixIndexubvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMatrixIndexubvARB(GLint size, ref GLubyte indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMatrixIndexubvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMatrixIndexuivARB(GLint size, GLuint[] indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMatrixIndexuivARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMatrixIndexuivARB(GLint size, ref GLuint indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMatrixIndexuivARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMatrixIndexuivARB(GLint size, System.IntPtr indices)
        {
            Delegates.glMatrixIndexuivARB(size, indices);
        }
        public static void glMatrixIndexusvARB(GLint size, GLushort[] indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMatrixIndexusvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMatrixIndexusvARB(GLint size, ref GLushort indices)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMatrixIndexusvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMatrixIndexusvARB(GLint size, System.IntPtr indices)
        {
            Delegates.glMatrixIndexusvARB(size, indices);
        }
        public static void glMatrixMode(GLenum mode)
        {
            Delegates.glMatrixMode(mode);
        }
        public static void glMinmax(GLenum target, GLenum internalformat, GLboolean sink)
        {
            Delegates.glMinmax(target, internalformat, sink);
        }
        public static void glMinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink)
        {
            Delegates.glMinmaxEXT(target, internalformat, sink);
        }
        public static void glMultiDrawArrays(GLenum mode, GLint[] first, out GLsizei count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            count = default(GLsizei);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArrays(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
                count = (GLsizei)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawArrays(GLenum mode, out GLint first, [In, Out()] System.IntPtr count, GLsizei primcount)
        {
            first = default(GLint);
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            count = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArrays(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
                first = (GLint)h0.Target;
                count = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawArrays(GLenum mode, out GLint first, GLsizei[] count, GLsizei primcount)
        {
            first = default(GLint);
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArrays(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
                first = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawArrays(GLenum mode, GLint[] first, [In, Out()] System.IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            count = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArrays(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
                count = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawArrays(GLenum mode, [In, Out()] System.IntPtr first, out GLsizei count, GLsizei primcount)
        {
            first = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            count = default(GLsizei);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArrays(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
                first = (System.IntPtr)h0.Target;
                count = (GLsizei)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawArrays(GLenum mode, [In, Out()] System.IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            first = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArrays(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
                first = (System.IntPtr)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawArrays(GLenum mode, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArrays(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawArrays(GLenum mode, [In, Out()] System.IntPtr first, [In, Out()] System.IntPtr count, GLsizei primcount)
        {
            Delegates.glMultiDrawArrays(mode, first, count, primcount);
        }
        public static void glMultiDrawArrays(GLenum mode, out GLint first, out GLsizei count, GLsizei primcount)
        {
            first = default(GLint);
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            count = default(GLsizei);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArrays(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
                first = (GLint)h0.Target;
                count = (GLsizei)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawArraysEXT(GLenum mode, [In, Out()] System.IntPtr first, out GLsizei count, GLsizei primcount)
        {
            first = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            count = default(GLsizei);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArraysEXT(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
                first = (System.IntPtr)h0.Target;
                count = (GLsizei)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawArraysEXT(GLenum mode, GLint[] first, [In, Out()] System.IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            count = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArraysEXT(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
                count = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawArraysEXT(GLenum mode, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArraysEXT(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawArraysEXT(GLenum mode, [In, Out()] System.IntPtr first, [In, Out()] System.IntPtr count, GLsizei primcount)
        {
            Delegates.glMultiDrawArraysEXT(mode, first, count, primcount);
        }
        public static void glMultiDrawArraysEXT(GLenum mode, [In, Out()] System.IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            first = default(System.IntPtr);
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArraysEXT(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
                first = (System.IntPtr)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawArraysEXT(GLenum mode, out GLint first, GLsizei[] count, GLsizei primcount)
        {
            first = default(GLint);
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArraysEXT(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
                first = (GLint)h0.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawArraysEXT(GLenum mode, out GLint first, out GLsizei count, GLsizei primcount)
        {
            first = default(GLint);
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            count = default(GLsizei);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArraysEXT(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
                first = (GLint)h0.Target;
                count = (GLsizei)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawArraysEXT(GLenum mode, GLint[] first, out GLsizei count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            count = default(GLsizei);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArraysEXT(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
                count = (GLsizei)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawArraysEXT(GLenum mode, out GLint first, [In, Out()] System.IntPtr count, GLsizei primcount)
        {
            first = default(GLint);
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            count = default(System.IntPtr);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawArraysEXT(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
                first = (GLint)h0.Target;
                count = (System.IntPtr)h1.Target;
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawElementArrayAPPLE(GLenum mode, ref GLint first, System.IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiDrawElementArrayAPPLE(GLenum mode, GLint[] first, ref GLsizei count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawElementArrayAPPLE(GLenum mode, ref GLint first, ref GLsizei count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawElementArrayAPPLE(GLenum mode, ref GLint first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawElementArrayAPPLE(GLenum mode, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawElementArrayAPPLE(GLenum mode, System.IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiDrawElementArrayAPPLE(GLenum mode, System.IntPtr first, System.IntPtr count, GLsizei primcount)
        {
            Delegates.glMultiDrawElementArrayAPPLE(mode, first, count, primcount);
        }
        public static void glMultiDrawElementArrayAPPLE(GLenum mode, GLint[] first, System.IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiDrawElementArrayAPPLE(GLenum mode, System.IntPtr first, ref GLsizei count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementArrayAPPLE(mode, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiDrawElements(GLenum mode, System.IntPtr count, GLenum type, ref object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements(mode, count, type, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiDrawElements(GLenum mode, GLsizei[] count, GLenum type, System.IntPtr indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements(mode, h0.AddrOfPinnedObject(), type, indices, primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiDrawElements(GLenum mode, System.IntPtr count, GLenum type, System.IntPtr indices, GLsizei primcount)
        {
            Delegates.glMultiDrawElements(mode, count, type, indices, primcount);
        }
        public static void glMultiDrawElements(GLenum mode, System.IntPtr count, GLenum type, object[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements(mode, count, type, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiDrawElements(GLenum mode, GLsizei[] count, GLenum type, object[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawElements(GLenum mode, ref GLsizei count, GLenum type, object[] indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawElements(GLenum mode, ref GLsizei count, GLenum type, ref object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawElements(GLenum mode, GLsizei[] count, GLenum type, ref object indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawElements(GLenum mode, ref GLsizei count, GLenum type, System.IntPtr indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElements(mode, h0.AddrOfPinnedObject(), type, indices, primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiDrawElementsEXT(GLenum mode, System.IntPtr count, GLenum type, System.IntPtr indices, GLsizei primcount)
        {
            Delegates.glMultiDrawElementsEXT(mode, count, type, indices, primcount);
        }
        public static void glMultiDrawElementsEXT(GLenum mode, GLsizei[] count, GLenum type, System.IntPtr indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsEXT(mode, h0.AddrOfPinnedObject(), type, indices, primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiDrawElementsEXT(GLenum mode, ref GLsizei count, GLenum type, System.IntPtr indices, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawElementsEXT(mode, h0.AddrOfPinnedObject(), type, indices, primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, ref GLint first, ref GLsizei count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, System.IntPtr first, System.IntPtr count, GLsizei primcount)
        {
            Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, count, primcount);
        }
        public static void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, ref GLint first, System.IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, ref GLint first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, System.IntPtr first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint[] first, GLsizei[] count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint[] first, ref GLsizei count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, System.IntPtr first, ref GLsizei count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, first, h0.AddrOfPinnedObject(), primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint[] first, System.IntPtr count, GLsizei primcount)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiDrawRangeElementArrayAPPLE(mode, start, end, h0.AddrOfPinnedObject(), count, primcount);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(System.IntPtr mode, ref GLint first, System.IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(mode, h0.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(System.IntPtr mode, GLint[] first, ref GLsizei count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(System.IntPtr mode, ref GLint first, ref GLsizei count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(System.IntPtr mode, ref GLint first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(System.IntPtr mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(mode, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(System.IntPtr mode, System.IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(mode, first, h0.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(System.IntPtr mode, System.IntPtr first, System.IntPtr count, GLsizei primcount, GLint modestride)
        {
            Delegates.glMultiModeDrawArraysIBM(mode, first, count, primcount, modestride);
        }
        public static void glMultiModeDrawArraysIBM(System.IntPtr mode, GLint[] first, System.IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(mode, h0.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(System.IntPtr mode, System.IntPtr first, ref GLsizei count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(mode, first, h0.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(GLenum[] mode, System.IntPtr first, System.IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), first, count, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(ref GLenum mode, GLint[] first, System.IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(ref GLenum mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(ref GLenum mode, System.IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), first, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(ref GLenum mode, System.IntPtr first, ref GLsizei count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), first, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(ref GLenum mode, ref GLint first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(ref GLenum mode, ref GLint first, ref GLsizei count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(ref GLenum mode, GLint[] first, ref GLsizei count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(ref GLenum mode, ref GLint first, System.IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(ref GLenum mode, System.IntPtr first, System.IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), first, count, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(GLenum[] mode, GLint[] first, System.IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(GLenum[] mode, GLint[] first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(GLenum[] mode, System.IntPtr first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), first, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(GLenum[] mode, System.IntPtr first, ref GLsizei count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), first, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(GLenum[] mode, GLint[] first, ref GLsizei count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(GLenum[] mode, ref GLint first, ref GLsizei count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(GLenum[] mode, ref GLint first, GLsizei[] count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glMultiModeDrawArraysIBM(GLenum[] mode, ref GLint first, System.IntPtr count, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(first, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawArraysIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), count, primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiModeDrawElementsIBM(GLenum[] mode, System.IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), count, type, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiModeDrawElementsIBM(GLenum[] mode, GLsizei[] count, GLenum type, System.IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiModeDrawElementsIBM(GLenum[] mode, System.IntPtr count, GLenum type, System.IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), count, type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiModeDrawElementsIBM(System.IntPtr mode, ref GLsizei count, GLenum type, System.IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(mode, h0.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiModeDrawElementsIBM(System.IntPtr mode, ref GLsizei count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiModeDrawElementsIBM(GLenum[] mode, ref GLsizei count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glMultiModeDrawElementsIBM(ref GLenum mode, System.IntPtr count, GLenum type, System.IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), count, type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiModeDrawElementsIBM(ref GLenum mode, ref GLsizei count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glMultiModeDrawElementsIBM(GLenum[] mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glMultiModeDrawElementsIBM(GLenum[] mode, ref GLsizei count, GLenum type, System.IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiModeDrawElementsIBM(System.IntPtr mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(mode, h0.AddrOfPinnedObject(), type, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiModeDrawElementsIBM(ref GLenum mode, GLsizei[] count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, h2.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glMultiModeDrawElementsIBM(ref GLenum mode, GLsizei[] count, GLenum type, System.IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiModeDrawElementsIBM(System.IntPtr mode, System.IntPtr count, GLenum type, System.IntPtr indices, GLsizei primcount, GLint modestride)
        {
            Delegates.glMultiModeDrawElementsIBM(mode, count, type, indices, primcount, modestride);
        }
        public static void glMultiModeDrawElementsIBM(ref GLenum mode, ref GLsizei count, GLenum type, System.IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiModeDrawElementsIBM(System.IntPtr mode, GLsizei[] count, GLenum type, System.IntPtr indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(count, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(mode, h0.AddrOfPinnedObject(), type, indices, primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiModeDrawElementsIBM(System.IntPtr mode, System.IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(mode, count, type, h0.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiModeDrawElementsIBM(ref GLenum mode, System.IntPtr count, GLenum type, object indices, GLsizei primcount, GLint modestride)
        {
            GCHandle h0 = GCHandle.Alloc(mode, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(indices, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiModeDrawElementsIBM(h0.AddrOfPinnedObject(), count, type, h1.AddrOfPinnedObject(), primcount, modestride);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glMultiTexCoord1d(GLenum target, GLdouble s)
        {
            Delegates.glMultiTexCoord1d(target, s);
        }
        public static void glMultiTexCoord1dARB(GLenum target, GLdouble s)
        {
            Delegates.glMultiTexCoord1dARB(target, s);
        }
        public static void glMultiTexCoord1dv(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord1dv(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord1dv(target, v);
        }
        public static void glMultiTexCoord1dv(GLenum target, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord1dvARB(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord1dvARB(GLenum target, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord1dvARB(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord1dvARB(target, v);
        }
        public static void glMultiTexCoord1f(GLenum target, GLfloat s)
        {
            Delegates.glMultiTexCoord1f(target, s);
        }
        public static void glMultiTexCoord1fARB(GLenum target, GLfloat s)
        {
            Delegates.glMultiTexCoord1fARB(target, s);
        }
        public static void glMultiTexCoord1fv(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord1fv(GLenum target, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord1fv(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord1fv(target, v);
        }
        public static void glMultiTexCoord1fvARB(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord1fvARB(target, v);
        }
        public static void glMultiTexCoord1fvARB(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord1fvARB(GLenum target, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord1hNV(GLenum target, GLhalfNV s)
        {
            Delegates.glMultiTexCoord1hNV(target, s);
        }
        public static void glMultiTexCoord1hvNV(GLenum target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord1hvNV(GLenum target, ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord1hvNV(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord1hvNV(target, v);
        }
        public static void glMultiTexCoord1i(GLenum target, GLint s)
        {
            Delegates.glMultiTexCoord1i(target, s);
        }
        public static void glMultiTexCoord1iARB(GLenum target, GLint s)
        {
            Delegates.glMultiTexCoord1iARB(target, s);
        }
        public static void glMultiTexCoord1iv(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord1iv(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord1iv(target, v);
        }
        public static void glMultiTexCoord1iv(GLenum target, ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord1ivARB(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord1ivARB(target, v);
        }
        public static void glMultiTexCoord1ivARB(GLenum target, ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord1ivARB(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord1s(GLenum target, GLshort s)
        {
            Delegates.glMultiTexCoord1s(target, s);
        }
        public static void glMultiTexCoord1sARB(GLenum target, GLshort s)
        {
            Delegates.glMultiTexCoord1sARB(target, s);
        }
        public static void glMultiTexCoord1sv(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord1sv(target, v);
        }
        public static void glMultiTexCoord1sv(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord1sv(GLenum target, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord1svARB(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord1svARB(GLenum target, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord1svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord1svARB(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord1svARB(target, v);
        }
        public static void glMultiTexCoord2d(GLenum target, GLdouble s, GLdouble t)
        {
            Delegates.glMultiTexCoord2d(target, s, t);
        }
        public static void glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t)
        {
            Delegates.glMultiTexCoord2dARB(target, s, t);
        }
        public static void glMultiTexCoord2dv(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord2dv(target, v);
        }
        public static void glMultiTexCoord2dv(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord2dv(GLenum target, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord2dvARB(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord2dvARB(target, v);
        }
        public static void glMultiTexCoord2dvARB(GLenum target, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord2dvARB(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord2f(GLenum target, GLfloat s, GLfloat t)
        {
            Delegates.glMultiTexCoord2f(target, s, t);
        }
        public static void glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t)
        {
            Delegates.glMultiTexCoord2fARB(target, s, t);
        }
        public static void glMultiTexCoord2fv(GLenum target, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord2fv(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord2fv(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord2fv(target, v);
        }
        public static void glMultiTexCoord2fvARB(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord2fvARB(target, v);
        }
        public static void glMultiTexCoord2fvARB(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord2fvARB(GLenum target, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t)
        {
            Delegates.glMultiTexCoord2hNV(target, s, t);
        }
        public static void glMultiTexCoord2hvNV(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord2hvNV(target, v);
        }
        public static void glMultiTexCoord2hvNV(GLenum target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord2hvNV(GLenum target, ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord2i(GLenum target, GLint s, GLint t)
        {
            Delegates.glMultiTexCoord2i(target, s, t);
        }
        public static void glMultiTexCoord2iARB(GLenum target, GLint s, GLint t)
        {
            Delegates.glMultiTexCoord2iARB(target, s, t);
        }
        public static void glMultiTexCoord2iv(GLenum target, ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord2iv(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord2iv(target, v);
        }
        public static void glMultiTexCoord2iv(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord2ivARB(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord2ivARB(target, v);
        }
        public static void glMultiTexCoord2ivARB(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord2ivARB(GLenum target, ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord2s(GLenum target, GLshort s, GLshort t)
        {
            Delegates.glMultiTexCoord2s(target, s, t);
        }
        public static void glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t)
        {
            Delegates.glMultiTexCoord2sARB(target, s, t);
        }
        public static void glMultiTexCoord2sv(GLenum target, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord2sv(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord2sv(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord2sv(target, v);
        }
        public static void glMultiTexCoord2svARB(GLenum target, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord2svARB(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord2svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord2svARB(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord2svARB(target, v);
        }
        public static void glMultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r)
        {
            Delegates.glMultiTexCoord3d(target, s, t, r);
        }
        public static void glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r)
        {
            Delegates.glMultiTexCoord3dARB(target, s, t, r);
        }
        public static void glMultiTexCoord3dv(GLenum target, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord3dv(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord3dv(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord3dv(target, v);
        }
        public static void glMultiTexCoord3dvARB(GLenum target, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord3dvARB(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord3dvARB(target, v);
        }
        public static void glMultiTexCoord3dvARB(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r)
        {
            Delegates.glMultiTexCoord3f(target, s, t, r);
        }
        public static void glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r)
        {
            Delegates.glMultiTexCoord3fARB(target, s, t, r);
        }
        public static void glMultiTexCoord3fv(GLenum target, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord3fv(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord3fv(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord3fv(target, v);
        }
        public static void glMultiTexCoord3fvARB(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord3fvARB(target, v);
        }
        public static void glMultiTexCoord3fvARB(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord3fvARB(GLenum target, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)
        {
            Delegates.glMultiTexCoord3hNV(target, s, t, r);
        }
        public static void glMultiTexCoord3hvNV(GLenum target, ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord3hvNV(GLenum target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord3hvNV(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord3hvNV(target, v);
        }
        public static void glMultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r)
        {
            Delegates.glMultiTexCoord3i(target, s, t, r);
        }
        public static void glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r)
        {
            Delegates.glMultiTexCoord3iARB(target, s, t, r);
        }
        public static void glMultiTexCoord3iv(GLenum target, ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord3iv(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord3iv(target, v);
        }
        public static void glMultiTexCoord3iv(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord3ivARB(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord3ivARB(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord3ivARB(target, v);
        }
        public static void glMultiTexCoord3ivARB(GLenum target, ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r)
        {
            Delegates.glMultiTexCoord3s(target, s, t, r);
        }
        public static void glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r)
        {
            Delegates.glMultiTexCoord3sARB(target, s, t, r);
        }
        public static void glMultiTexCoord3sv(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord3sv(target, v);
        }
        public static void glMultiTexCoord3sv(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord3sv(GLenum target, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord3svARB(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord3svARB(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord3svARB(target, v);
        }
        public static void glMultiTexCoord3svARB(GLenum target, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord3svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
        {
            Delegates.glMultiTexCoord4d(target, s, t, r, q);
        }
        public static void glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)
        {
            Delegates.glMultiTexCoord4dARB(target, s, t, r, q);
        }
        public static void glMultiTexCoord4dv(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord4dv(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord4dv(target, v);
        }
        public static void glMultiTexCoord4dv(GLenum target, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4dv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord4dvARB(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord4dvARB(target, v);
        }
        public static void glMultiTexCoord4dvARB(GLenum target, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord4dvARB(GLenum target, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4dvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
        {
            Delegates.glMultiTexCoord4f(target, s, t, r, q);
        }
        public static void glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)
        {
            Delegates.glMultiTexCoord4fARB(target, s, t, r, q);
        }
        public static void glMultiTexCoord4fv(GLenum target, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord4fv(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4fv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord4fv(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord4fv(target, v);
        }
        public static void glMultiTexCoord4fvARB(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord4fvARB(target, v);
        }
        public static void glMultiTexCoord4fvARB(GLenum target, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord4fvARB(GLenum target, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4fvARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
        {
            Delegates.glMultiTexCoord4hNV(target, s, t, r, q);
        }
        public static void glMultiTexCoord4hvNV(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord4hvNV(target, v);
        }
        public static void glMultiTexCoord4hvNV(GLenum target, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord4hvNV(GLenum target, ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4hvNV(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q)
        {
            Delegates.glMultiTexCoord4i(target, s, t, r, q);
        }
        public static void glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q)
        {
            Delegates.glMultiTexCoord4iARB(target, s, t, r, q);
        }
        public static void glMultiTexCoord4iv(GLenum target, ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord4iv(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord4iv(target, v);
        }
        public static void glMultiTexCoord4iv(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4iv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord4ivARB(GLenum target, ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord4ivARB(GLenum target, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4ivARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord4ivARB(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord4ivARB(target, v);
        }
        public static void glMultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
        {
            Delegates.glMultiTexCoord4s(target, s, t, r, q);
        }
        public static void glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)
        {
            Delegates.glMultiTexCoord4sARB(target, s, t, r, q);
        }
        public static void glMultiTexCoord4sv(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord4sv(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord4sv(target, v);
        }
        public static void glMultiTexCoord4sv(GLenum target, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4sv(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord4svARB(GLenum target, System.IntPtr v)
        {
            Delegates.glMultiTexCoord4svARB(target, v);
        }
        public static void glMultiTexCoord4svARB(GLenum target, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultiTexCoord4svARB(GLenum target, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glMultiTexCoord4svARB(target, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultMatrixd(System.IntPtr m)
        {
            Delegates.glMultMatrixd(m);
        }
        public static void glMultMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultMatrixd(ref GLdouble m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultMatrixf(ref GLfloat m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultMatrixf(System.IntPtr m)
        {
            Delegates.glMultMatrixf(m);
        }
        public static void glMultTransposeMatrixd(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultTransposeMatrixd(System.IntPtr m)
        {
            Delegates.glMultTransposeMatrixd(m);
        }
        public static void glMultTransposeMatrixd(ref GLdouble m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixd(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultTransposeMatrixdARB(System.IntPtr m)
        {
            Delegates.glMultTransposeMatrixdARB(m);
        }
        public static void glMultTransposeMatrixdARB(GLdouble[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixdARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultTransposeMatrixdARB(ref GLdouble m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixdARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultTransposeMatrixf(ref GLfloat m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultTransposeMatrixf(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixf(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultTransposeMatrixf(System.IntPtr m)
        {
            Delegates.glMultTransposeMatrixf(m);
        }
        public static void glMultTransposeMatrixfARB(ref GLfloat m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixfARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultTransposeMatrixfARB(GLfloat[] m)
        {
            GCHandle h0 = GCHandle.Alloc(m, GCHandleType.Pinned);
            try
            {
                Delegates.glMultTransposeMatrixfARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glMultTransposeMatrixfARB(System.IntPtr m)
        {
            Delegates.glMultTransposeMatrixfARB(m);
        }
        public static void glNewList(GLuint list, GLenum mode)
        {
            Delegates.glNewList(list, mode);
        }
        public static GLuint glNewObjectBufferATI(GLsizei size, System.IntPtr pointer, GLenum usage)
        {
            return Delegates.glNewObjectBufferATI(size, pointer, usage);
        }
        public static GLuint glNewObjectBufferATI(GLsizei size, object pointer, GLenum usage)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                GLuint retval;
                retval = Delegates.glNewObjectBufferATI(size, h0.AddrOfPinnedObject(), usage);
                return retval;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormal3b(GLbyte nx, GLbyte ny, GLbyte nz)
        {
            Delegates.glNormal3b(nx, ny, nz);
        }
        public static void glNormal3bv(System.IntPtr v)
        {
            Delegates.glNormal3bv(v);
        }
        public static void glNormal3bv(ref GLbyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormal3bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormal3d(GLdouble nx, GLdouble ny, GLdouble nz)
        {
            Delegates.glNormal3d(nx, ny, nz);
        }
        public static void glNormal3dv(System.IntPtr v)
        {
            Delegates.glNormal3dv(v);
        }
        public static void glNormal3dv(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormal3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormal3f(GLfloat nx, GLfloat ny, GLfloat nz)
        {
            Delegates.glNormal3f(nx, ny, nz);
        }
        public static void glNormal3fv(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormal3fv(System.IntPtr v)
        {
            Delegates.glNormal3fv(v);
        }
        public static void glNormal3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glNormal3fVertex3fSUN(nx, ny, nz, x, y, z);
        }
        public static void glNormal3fVertex3fvSUN(System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fVertex3fvSUN(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormal3fVertex3fvSUN(GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormal3fVertex3fvSUN(ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glNormal3fVertex3fvSUN(ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glNormal3fVertex3fvSUN(ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormal3fVertex3fvSUN(GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glNormal3fVertex3fvSUN(GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glNormal3fVertex3fvSUN(System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3fVertex3fvSUN(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormal3fVertex3fvSUN(System.IntPtr n, System.IntPtr v)
        {
            Delegates.glNormal3fVertex3fvSUN(n, v);
        }
        public static void glNormal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)
        {
            Delegates.glNormal3hNV(nx, ny, nz);
        }
        public static void glNormal3hvNV(ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormal3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormal3hvNV(System.IntPtr v)
        {
            Delegates.glNormal3hvNV(v);
        }
        public static void glNormal3i(GLint nx, GLint ny, GLint nz)
        {
            Delegates.glNormal3i(nx, ny, nz);
        }
        public static void glNormal3iv(System.IntPtr v)
        {
            Delegates.glNormal3iv(v);
        }
        public static void glNormal3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormal3iv(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormal3s(GLshort nx, GLshort ny, GLshort nz)
        {
            Delegates.glNormal3s(nx, ny, nz);
        }
        public static void glNormal3sv(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormal3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glNormal3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormal3sv(System.IntPtr v)
        {
            Delegates.glNormal3sv(v);
        }
        public static void glNormalPointer(GLenum type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glNormalPointer(type, stride, pointer);
        }
        public static void glNormalPointer(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointer(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalPointerEXT(type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, System.IntPtr pointer)
        {
            Delegates.glNormalPointerEXT(type, stride, count, pointer);
        }
        public static void glNormalPointerListIBM(GLenum type, GLint stride, System.IntPtr pointer, GLint ptrstride)
        {
            Delegates.glNormalPointerListIBM(type, stride, pointer, ptrstride);
        }
        public static void glNormalPointervINTEL(GLenum type, System.IntPtr pointer)
        {
            Delegates.glNormalPointervINTEL(type, pointer);
        }
        public static void glNormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz)
        {
            Delegates.glNormalStream3bATI(stream, nx, ny, nz);
        }
        public static void glNormalStream3bvATI(GLenum stream, GLbyte[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3bvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormalStream3bvATI(GLenum stream, ref GLbyte coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3bvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormalStream3bvATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glNormalStream3bvATI(stream, coords);
        }
        public static void glNormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz)
        {
            Delegates.glNormalStream3dATI(stream, nx, ny, nz);
        }
        public static void glNormalStream3dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormalStream3dvATI(GLenum stream, ref GLdouble coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormalStream3dvATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glNormalStream3dvATI(stream, coords);
        }
        public static void glNormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz)
        {
            Delegates.glNormalStream3fATI(stream, nx, ny, nz);
        }
        public static void glNormalStream3fvATI(GLenum stream, ref GLfloat coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormalStream3fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormalStream3fvATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glNormalStream3fvATI(stream, coords);
        }
        public static void glNormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz)
        {
            Delegates.glNormalStream3iATI(stream, nx, ny, nz);
        }
        public static void glNormalStream3ivATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glNormalStream3ivATI(stream, coords);
        }
        public static void glNormalStream3ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormalStream3ivATI(GLenum stream, ref GLint coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz)
        {
            Delegates.glNormalStream3sATI(stream, nx, ny, nz);
        }
        public static void glNormalStream3svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormalStream3svATI(GLenum stream, ref GLshort coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glNormalStream3svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glNormalStream3svATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glNormalStream3svATI(stream, coords);
        }
        public static void glOrtho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)
        {
            Delegates.glOrtho(left, right, bottom, top, zNear, zFar);
        }
        public static void glPassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle)
        {
            Delegates.glPassTexCoordATI(dst, coord, swizzle);
        }
        public static void glPassThrough(GLfloat token)
        {
            Delegates.glPassThrough(token);
        }
        public static void glPixelDataRangeNV(GLenum target, GLsizei length, [In, Out()] System.IntPtr pointer)
        {
            Delegates.glPixelDataRangeNV(target, length, pointer);
        }
        public static void glPixelDataRangeNV(GLenum target, GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelDataRangeNV(target, length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPixelMapfv(GLenum map, GLint mapsize, GLfloat[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelMapfv(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPixelMapfv(GLenum map, GLint mapsize, ref GLfloat values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelMapfv(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPixelMapfv(GLenum map, GLint mapsize, System.IntPtr values)
        {
            Delegates.glPixelMapfv(map, mapsize, values);
        }
        public static void glPixelMapuiv(GLenum map, GLint mapsize, System.IntPtr values)
        {
            Delegates.glPixelMapuiv(map, mapsize, values);
        }
        public static void glPixelMapuiv(GLenum map, GLint mapsize, GLuint[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelMapuiv(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPixelMapuiv(GLenum map, GLint mapsize, ref GLuint values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelMapuiv(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPixelMapusv(GLenum map, GLint mapsize, ref GLushort values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelMapusv(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPixelMapusv(GLenum map, GLint mapsize, GLushort[] values)
        {
            GCHandle h0 = GCHandle.Alloc(values, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelMapusv(map, mapsize, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPixelMapusv(GLenum map, GLint mapsize, System.IntPtr values)
        {
            Delegates.glPixelMapusv(map, mapsize, values);
        }
        public static void glPixelStoref(GLenum pname, GLfloat param)
        {
            Delegates.glPixelStoref(pname, param);
        }
        public static void glPixelStorei(GLenum pname, GLint param)
        {
            Delegates.glPixelStorei(pname, param);
        }
        public static void glPixelTexGenParameterfSGIS(GLenum pname, GLfloat param)
        {
            Delegates.glPixelTexGenParameterfSGIS(pname, param);
        }
        public static void glPixelTexGenParameterfvSGIS(GLenum pname, System.IntPtr @params)
        {
            Delegates.glPixelTexGenParameterfvSGIS(pname, @params);
        }
        public static void glPixelTexGenParameterfvSGIS(GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTexGenParameterfvSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPixelTexGenParameterfvSGIS(GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTexGenParameterfvSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPixelTexGenParameteriSGIS(GLenum pname, GLint param)
        {
            Delegates.glPixelTexGenParameteriSGIS(pname, param);
        }
        public static void glPixelTexGenParameterivSGIS(GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTexGenParameterivSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPixelTexGenParameterivSGIS(GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTexGenParameterivSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPixelTexGenParameterivSGIS(GLenum pname, System.IntPtr @params)
        {
            Delegates.glPixelTexGenParameterivSGIS(pname, @params);
        }
        public static void glPixelTexGenSGIX(GLenum mode)
        {
            Delegates.glPixelTexGenSGIX(mode);
        }
        public static void glPixelTransferf(GLenum pname, GLfloat param)
        {
            Delegates.glPixelTransferf(pname, param);
        }
        public static void glPixelTransferi(GLenum pname, GLint param)
        {
            Delegates.glPixelTransferi(pname, param);
        }
        public static void glPixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param)
        {
            Delegates.glPixelTransformParameterfEXT(target, pname, param);
        }
        public static void glPixelTransformParameterfvEXT(GLenum target, GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTransformParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPixelTransformParameterfvEXT(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glPixelTransformParameterfvEXT(target, pname, @params);
        }
        public static void glPixelTransformParameterfvEXT(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTransformParameterfvEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param)
        {
            Delegates.glPixelTransformParameteriEXT(target, pname, param);
        }
        public static void glPixelTransformParameterivEXT(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glPixelTransformParameterivEXT(target, pname, @params);
        }
        public static void glPixelTransformParameterivEXT(GLenum target, GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTransformParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPixelTransformParameterivEXT(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPixelTransformParameterivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPixelZoom(GLfloat xfactor, GLfloat yfactor)
        {
            Delegates.glPixelZoom(xfactor, yfactor);
        }
        public static void glPNTrianglesfATI(GLenum pname, GLfloat param)
        {
            Delegates.glPNTrianglesfATI(pname, param);
        }
        public static void glPNTrianglesiATI(GLenum pname, GLint param)
        {
            Delegates.glPNTrianglesiATI(pname, param);
        }
        public static void glPointParameterf(GLenum pname, GLfloat param)
        {
            Delegates.glPointParameterf(pname, param);
        }
        public static void glPointParameterfARB(GLenum pname, GLfloat param)
        {
            Delegates.glPointParameterfARB(pname, param);
        }
        public static void glPointParameterfEXT(GLenum pname, GLfloat param)
        {
            Delegates.glPointParameterfEXT(pname, param);
        }
        public static void glPointParameterfSGIS(GLenum pname, GLfloat param)
        {
            Delegates.glPointParameterfSGIS(pname, param);
        }
        public static void glPointParameterfv(GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPointParameterfv(GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPointParameterfv(GLenum pname, System.IntPtr @params)
        {
            Delegates.glPointParameterfv(pname, @params);
        }
        public static void glPointParameterfvARB(GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfvARB(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPointParameterfvARB(GLenum pname, System.IntPtr @params)
        {
            Delegates.glPointParameterfvARB(pname, @params);
        }
        public static void glPointParameterfvARB(GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfvARB(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPointParameterfvEXT(GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfvEXT(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPointParameterfvEXT(GLenum pname, System.IntPtr @params)
        {
            Delegates.glPointParameterfvEXT(pname, @params);
        }
        public static void glPointParameterfvEXT(GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfvEXT(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPointParameterfvSGIS(GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfvSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPointParameterfvSGIS(GLenum pname, System.IntPtr @params)
        {
            Delegates.glPointParameterfvSGIS(pname, @params);
        }
        public static void glPointParameterfvSGIS(GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterfvSGIS(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPointParameteri(GLenum pname, GLint param)
        {
            Delegates.glPointParameteri(pname, param);
        }
        public static void glPointParameteriNV(GLenum pname, GLint param)
        {
            Delegates.glPointParameteriNV(pname, param);
        }
        public static void glPointParameteriv(GLenum pname, System.IntPtr @params)
        {
            Delegates.glPointParameteriv(pname, @params);
        }
        public static void glPointParameteriv(GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameteriv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPointParameteriv(GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameteriv(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPointParameterivNV(GLenum pname, System.IntPtr @params)
        {
            Delegates.glPointParameterivNV(pname, @params);
        }
        public static void glPointParameterivNV(GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterivNV(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPointParameterivNV(GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glPointParameterivNV(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPointSize(GLfloat size)
        {
            Delegates.glPointSize(size);
        }
        public static GLint glPollAsyncSGIX(GLuint[] markerp)
        {
            GCHandle h0 = GCHandle.Alloc(markerp, GCHandleType.Pinned);
            try
            {
                GLint retval;
                retval = Delegates.glPollAsyncSGIX(h0.AddrOfPinnedObject());
                return retval;
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLint glPollAsyncSGIX([In, Out()] System.IntPtr markerp)
        {
            return Delegates.glPollAsyncSGIX(markerp);
        }
        public static GLint glPollAsyncSGIX(out GLuint markerp)
        {
            markerp = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(markerp, GCHandleType.Pinned);
            try
            {
                GLint retval;
                retval = Delegates.glPollAsyncSGIX(h0.AddrOfPinnedObject());
                markerp = (GLuint)h0.Target;
                return retval;
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLint glPollInstrumentsSGIX(out GLint marker_p)
        {
            marker_p = default(GLint);
            GCHandle h0 = GCHandle.Alloc(marker_p, GCHandleType.Pinned);
            try
            {
                GLint retval;
                retval = Delegates.glPollInstrumentsSGIX(h0.AddrOfPinnedObject());
                marker_p = (GLint)h0.Target;
                return retval;
            }
            finally
            {
                h0.Free();
            }
        }
        public static GLint glPollInstrumentsSGIX([In, Out()] System.IntPtr marker_p)
        {
            return Delegates.glPollInstrumentsSGIX(marker_p);
        }
        public static GLint glPollInstrumentsSGIX(GLint[] marker_p)
        {
            GCHandle h0 = GCHandle.Alloc(marker_p, GCHandleType.Pinned);
            try
            {
                GLint retval;
                retval = Delegates.glPollInstrumentsSGIX(h0.AddrOfPinnedObject());
                return retval;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPolygonMode(GLenum face, GLenum mode)
        {
            Delegates.glPolygonMode(face, mode);
        }
        public static void glPolygonOffset(GLfloat factor, GLfloat units)
        {
            Delegates.glPolygonOffset(factor, units);
        }
        public static void glPolygonOffsetEXT(GLfloat factor, GLfloat bias)
        {
            Delegates.glPolygonOffsetEXT(factor, bias);
        }
        public static void glPolygonStipple(System.IntPtr mask)
        {
            Delegates.glPolygonStipple(mask);
        }
        public static void glPolygonStipple(GLubyte[] mask)
        {
            GCHandle h0 = GCHandle.Alloc(mask, GCHandleType.Pinned);
            try
            {
                Delegates.glPolygonStipple(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPolygonStipple(ref GLubyte mask)
        {
            GCHandle h0 = GCHandle.Alloc(mask, GCHandleType.Pinned);
            try
            {
                Delegates.glPolygonStipple(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPopAttrib()
        {
            Delegates.glPopAttrib();
        }
        public static void glPopClientAttrib()
        {
            Delegates.glPopClientAttrib();
        }
        public static void glPopMatrix()
        {
            Delegates.glPopMatrix();
        }
        public static void glPopName()
        {
            Delegates.glPopName();
        }
        public static void glPrimitiveRestartIndexNV(GLuint index)
        {
            Delegates.glPrimitiveRestartIndexNV(index);
        }
        public static void glPrimitiveRestartNV()
        {
            Delegates.glPrimitiveRestartNV();
        }
        public static void glPrioritizeTextures(GLsizei n, ref GLuint textures, System.IntPtr priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTextures(n, h0.AddrOfPinnedObject(), priorities);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPrioritizeTextures(GLsizei n, GLuint[] textures, ref GLclampf priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTextures(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glPrioritizeTextures(GLsizei n, ref GLuint textures, ref GLclampf priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTextures(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glPrioritizeTextures(GLsizei n, ref GLuint textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTextures(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glPrioritizeTextures(GLsizei n, GLuint[] textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTextures(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glPrioritizeTextures(GLsizei n, System.IntPtr textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTextures(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPrioritizeTextures(GLsizei n, System.IntPtr textures, System.IntPtr priorities)
        {
            Delegates.glPrioritizeTextures(n, textures, priorities);
        }
        public static void glPrioritizeTextures(GLsizei n, GLuint[] textures, System.IntPtr priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTextures(n, h0.AddrOfPinnedObject(), priorities);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPrioritizeTextures(GLsizei n, System.IntPtr textures, ref GLclampf priorities)
        {
            GCHandle h0 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTextures(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPrioritizeTexturesEXT(GLsizei n, ref GLuint textures, System.IntPtr priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTexturesEXT(n, h0.AddrOfPinnedObject(), priorities);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPrioritizeTexturesEXT(GLsizei n, GLuint[] textures, ref GLclampf priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTexturesEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glPrioritizeTexturesEXT(GLsizei n, ref GLuint textures, ref GLclampf priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTexturesEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glPrioritizeTexturesEXT(GLsizei n, ref GLuint textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTexturesEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glPrioritizeTexturesEXT(GLsizei n, GLuint[] textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTexturesEXT(n, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glPrioritizeTexturesEXT(GLsizei n, System.IntPtr textures, GLclampf[] priorities)
        {
            GCHandle h0 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTexturesEXT(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPrioritizeTexturesEXT(GLsizei n, System.IntPtr textures, System.IntPtr priorities)
        {
            Delegates.glPrioritizeTexturesEXT(n, textures, priorities);
        }
        public static void glPrioritizeTexturesEXT(GLsizei n, GLuint[] textures, System.IntPtr priorities)
        {
            GCHandle h0 = GCHandle.Alloc(textures, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTexturesEXT(n, h0.AddrOfPinnedObject(), priorities);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glPrioritizeTexturesEXT(GLsizei n, System.IntPtr textures, ref GLclampf priorities)
        {
            GCHandle h0 = GCHandle.Alloc(priorities, GCHandleType.Pinned);
            try
            {
                Delegates.glPrioritizeTexturesEXT(n, textures, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramBufferParametersfvNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramBufferParametersfvNV(target, buffer, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramBufferParametersfvNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, System.IntPtr @params)
        {
            Delegates.glProgramBufferParametersfvNV(target, buffer, index, count, @params);
        }
        public static void glProgramBufferParametersfvNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramBufferParametersfvNV(target, buffer, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramBufferParametersIivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramBufferParametersIivNV(target, buffer, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramBufferParametersIivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, System.IntPtr @params)
        {
            Delegates.glProgramBufferParametersIivNV(target, buffer, index, count, @params);
        }
        public static void glProgramBufferParametersIivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramBufferParametersIivNV(target, buffer, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramBufferParametersIuivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, ref GLuint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramBufferParametersIuivNV(target, buffer, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramBufferParametersIuivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramBufferParametersIuivNV(target, buffer, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramBufferParametersIuivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, System.IntPtr @params)
        {
            Delegates.glProgramBufferParametersIuivNV(target, buffer, index, count, @params);
        }
        public static void glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glProgramEnvParameter4dARB(target, index, x, y, z, w);
        }
        public static void glProgramEnvParameter4dvARB(GLenum target, GLuint index, ref GLdouble @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameter4dvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramEnvParameter4dvARB(GLenum target, GLuint index, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameter4dvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramEnvParameter4dvARB(GLenum target, GLuint index, System.IntPtr @params)
        {
            Delegates.glProgramEnvParameter4dvARB(target, index, @params);
        }
        public static void glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glProgramEnvParameter4fARB(target, index, x, y, z, w);
        }
        public static void glProgramEnvParameter4fvARB(GLenum target, GLuint index, System.IntPtr @params)
        {
            Delegates.glProgramEnvParameter4fvARB(target, index, @params);
        }
        public static void glProgramEnvParameter4fvARB(GLenum target, GLuint index, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameter4fvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramEnvParameter4fvARB(GLenum target, GLuint index, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameter4fvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glProgramEnvParameterI4iNV(target, index, x, y, z, w);
        }
        public static void glProgramEnvParameterI4ivNV(GLenum target, GLuint index, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameterI4ivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramEnvParameterI4ivNV(GLenum target, GLuint index, System.IntPtr @params)
        {
            Delegates.glProgramEnvParameterI4ivNV(target, index, @params);
        }
        public static void glProgramEnvParameterI4ivNV(GLenum target, GLuint index, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameterI4ivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
        {
            Delegates.glProgramEnvParameterI4uiNV(target, index, x, y, z, w);
        }
        public static void glProgramEnvParameterI4uivNV(GLenum target, GLuint index, ref GLuint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameterI4uivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramEnvParameterI4uivNV(GLenum target, GLuint index, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameterI4uivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramEnvParameterI4uivNV(GLenum target, GLuint index, System.IntPtr @params)
        {
            Delegates.glProgramEnvParameterI4uivNV(target, index, @params);
        }
        public static void glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameters4fvEXT(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParameters4fvEXT(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, System.IntPtr @params)
        {
            Delegates.glProgramEnvParameters4fvEXT(target, index, count, @params);
        }
        public static void glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParametersI4ivNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, System.IntPtr @params)
        {
            Delegates.glProgramEnvParametersI4ivNV(target, index, count, @params);
        }
        public static void glProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParametersI4ivNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParametersI4uivNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, ref GLuint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramEnvParametersI4uivNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, System.IntPtr @params)
        {
            Delegates.glProgramEnvParametersI4uivNV(target, index, count, @params);
        }
        public static void glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glProgramLocalParameter4dARB(target, index, x, y, z, w);
        }
        public static void glProgramLocalParameter4dvARB(GLenum target, GLuint index, ref GLdouble @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameter4dvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramLocalParameter4dvARB(GLenum target, GLuint index, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameter4dvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramLocalParameter4dvARB(GLenum target, GLuint index, System.IntPtr @params)
        {
            Delegates.glProgramLocalParameter4dvARB(target, index, @params);
        }
        public static void glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glProgramLocalParameter4fARB(target, index, x, y, z, w);
        }
        public static void glProgramLocalParameter4fvARB(GLenum target, GLuint index, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameter4fvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramLocalParameter4fvARB(GLenum target, GLuint index, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameter4fvARB(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramLocalParameter4fvARB(GLenum target, GLuint index, System.IntPtr @params)
        {
            Delegates.glProgramLocalParameter4fvARB(target, index, @params);
        }
        public static void glProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glProgramLocalParameterI4iNV(target, index, x, y, z, w);
        }
        public static void glProgramLocalParameterI4ivNV(GLenum target, GLuint index, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameterI4ivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramLocalParameterI4ivNV(GLenum target, GLuint index, System.IntPtr @params)
        {
            Delegates.glProgramLocalParameterI4ivNV(target, index, @params);
        }
        public static void glProgramLocalParameterI4ivNV(GLenum target, GLuint index, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameterI4ivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
        {
            Delegates.glProgramLocalParameterI4uiNV(target, index, x, y, z, w);
        }
        public static void glProgramLocalParameterI4uivNV(GLenum target, GLuint index, System.IntPtr @params)
        {
            Delegates.glProgramLocalParameterI4uivNV(target, index, @params);
        }
        public static void glProgramLocalParameterI4uivNV(GLenum target, GLuint index, ref GLuint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameterI4uivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramLocalParameterI4uivNV(GLenum target, GLuint index, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameterI4uivNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameters4fvEXT(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParameters4fvEXT(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, System.IntPtr @params)
        {
            Delegates.glProgramLocalParameters4fvEXT(target, index, count, @params);
        }
        public static void glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, System.IntPtr @params)
        {
            Delegates.glProgramLocalParametersI4ivNV(target, index, count, @params);
        }
        public static void glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParametersI4ivNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParametersI4ivNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, ref GLuint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParametersI4uivNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, System.IntPtr @params)
        {
            Delegates.glProgramLocalParametersI4uivNV(target, index, count, @params);
        }
        public static void glProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramLocalParametersI4uivNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramNamedParameter4dNV(GLuint id, GLsizei len, System.IntPtr name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glProgramNamedParameter4dNV(id, len, name, x, y, z, w);
        }
        public static void glProgramNamedParameter4dNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dNV(id, len, h0.AddrOfPinnedObject(), x, y, z, w);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramNamedParameter4dNV(GLuint id, GLsizei len, ref GLubyte name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dNV(id, len, h0.AddrOfPinnedObject(), x, y, z, w);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, GLubyte[] name, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, ref GLubyte name, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, ref GLubyte name, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, ref GLubyte name, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, System.IntPtr name, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, System.IntPtr name, System.IntPtr v)
        {
            Delegates.glProgramNamedParameter4dvNV(id, len, name, v);
        }
        public static void glProgramNamedParameter4dvNV(GLuint id, GLsizei len, System.IntPtr name, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4dvNV(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramNamedParameter4fNV(GLuint id, GLsizei len, System.IntPtr name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glProgramNamedParameter4fNV(id, len, name, x, y, z, w);
        }
        public static void glProgramNamedParameter4fNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fNV(id, len, h0.AddrOfPinnedObject(), x, y, z, w);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramNamedParameter4fNV(GLuint id, GLsizei len, ref GLubyte name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fNV(id, len, h0.AddrOfPinnedObject(), x, y, z, w);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, System.IntPtr name, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, System.IntPtr name, System.IntPtr v)
        {
            Delegates.glProgramNamedParameter4fvNV(id, len, name, v);
        }
        public static void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, ref GLubyte name, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, ref GLubyte name, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, GLubyte[] name, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, System.IntPtr name, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, name, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramNamedParameter4fvNV(GLuint id, GLsizei len, ref GLubyte name, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(name, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramNamedParameter4fvNV(id, len, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glProgramParameter4dNV(target, index, x, y, z, w);
        }
        public static void glProgramParameter4dvNV(GLenum target, GLuint index, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameter4dvNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramParameter4dvNV(GLenum target, GLuint index, System.IntPtr v)
        {
            Delegates.glProgramParameter4dvNV(target, index, v);
        }
        public static void glProgramParameter4dvNV(GLenum target, GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameter4dvNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glProgramParameter4fNV(target, index, x, y, z, w);
        }
        public static void glProgramParameter4fvNV(GLenum target, GLuint index, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameter4fvNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramParameter4fvNV(GLenum target, GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameter4fvNV(target, index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramParameter4fvNV(GLenum target, GLuint index, System.IntPtr v)
        {
            Delegates.glProgramParameter4fvNV(target, index, v);
        }
        public static void glProgramParameteriEXT(GLuint program, GLenum pname, GLint value)
        {
            Delegates.glProgramParameteriEXT(program, pname, value);
        }
        public static void glProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameters4dvNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, System.IntPtr v)
        {
            Delegates.glProgramParameters4dvNV(target, index, count, v);
        }
        public static void glProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameters4dvNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameters4fvNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, System.IntPtr v)
        {
            Delegates.glProgramParameters4fvNV(target, index, count, v);
        }
        public static void glProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramParameters4fvNV(target, index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramStringARB(GLenum target, GLenum format, GLsizei len, System.IntPtr @string)
        {
            Delegates.glProgramStringARB(target, format, len, @string);
        }
        public static void glProgramStringARB(GLenum target, GLenum format, GLsizei len, object @string)
        {
            GCHandle h0 = GCHandle.Alloc(@string, GCHandleType.Pinned);
            try
            {
                Delegates.glProgramStringARB(target, format, len, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glProgramVertexLimitNV(GLenum target, GLint limit)
        {
            Delegates.glProgramVertexLimitNV(target, limit);
        }
        public static void glPushAttrib(GLbitfield mask)
        {
            Delegates.glPushAttrib(mask);
        }
        public static void glPushClientAttrib(GLbitfield mask)
        {
            Delegates.glPushClientAttrib(mask);
        }
        public static void glPushMatrix()
        {
            Delegates.glPushMatrix();
        }
        public static void glPushName(GLuint name)
        {
            Delegates.glPushName(name);
        }
        public static void glRasterPos2d(GLdouble x, GLdouble y)
        {
            Delegates.glRasterPos2d(x, y);
        }
        public static void glRasterPos2dv(System.IntPtr v)
        {
            Delegates.glRasterPos2dv(v);
        }
        public static void glRasterPos2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos2dv(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos2f(GLfloat x, GLfloat y)
        {
            Delegates.glRasterPos2f(x, y);
        }
        public static void glRasterPos2fv(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos2fv(System.IntPtr v)
        {
            Delegates.glRasterPos2fv(v);
        }
        public static void glRasterPos2i(GLint x, GLint y)
        {
            Delegates.glRasterPos2i(x, y);
        }
        public static void glRasterPos2iv(System.IntPtr v)
        {
            Delegates.glRasterPos2iv(v);
        }
        public static void glRasterPos2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos2iv(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos2s(GLshort x, GLshort y)
        {
            Delegates.glRasterPos2s(x, y);
        }
        public static void glRasterPos2sv(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos2sv(System.IntPtr v)
        {
            Delegates.glRasterPos2sv(v);
        }
        public static void glRasterPos3d(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glRasterPos3d(x, y, z);
        }
        public static void glRasterPos3dv(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos3dv(System.IntPtr v)
        {
            Delegates.glRasterPos3dv(v);
        }
        public static void glRasterPos3f(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glRasterPos3f(x, y, z);
        }
        public static void glRasterPos3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos3fv(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos3fv(System.IntPtr v)
        {
            Delegates.glRasterPos3fv(v);
        }
        public static void glRasterPos3i(GLint x, GLint y, GLint z)
        {
            Delegates.glRasterPos3i(x, y, z);
        }
        public static void glRasterPos3iv(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos3iv(System.IntPtr v)
        {
            Delegates.glRasterPos3iv(v);
        }
        public static void glRasterPos3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos3s(GLshort x, GLshort y, GLshort z)
        {
            Delegates.glRasterPos3s(x, y, z);
        }
        public static void glRasterPos3sv(System.IntPtr v)
        {
            Delegates.glRasterPos3sv(v);
        }
        public static void glRasterPos3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos3sv(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glRasterPos4d(x, y, z, w);
        }
        public static void glRasterPos4dv(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos4dv(System.IntPtr v)
        {
            Delegates.glRasterPos4dv(v);
        }
        public static void glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glRasterPos4f(x, y, z, w);
        }
        public static void glRasterPos4fv(System.IntPtr v)
        {
            Delegates.glRasterPos4fv(v);
        }
        public static void glRasterPos4fv(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos4i(GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glRasterPos4i(x, y, z, w);
        }
        public static void glRasterPos4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos4iv(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos4iv(System.IntPtr v)
        {
            Delegates.glRasterPos4iv(v);
        }
        public static void glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glRasterPos4s(x, y, z, w);
        }
        public static void glRasterPos4sv(System.IntPtr v)
        {
            Delegates.glRasterPos4sv(v);
        }
        public static void glRasterPos4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRasterPos4sv(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glRasterPos4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReadBuffer(GLenum mode)
        {
            Delegates.glReadBuffer(mode);
        }
        public static void glReadInstrumentsSGIX(GLint marker)
        {
            Delegates.glReadInstrumentsSGIX(marker);
        }
        public static void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, [In, Out()] System.IntPtr pixels)
        {
            Delegates.glReadPixels(x, y, width, height, format, type, pixels);
        }
        public static void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glReadPixels(x, y, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)
        {
            Delegates.glRectd(x1, y1, x2, y2);
        }
        public static void glRectdv(System.IntPtr v1, ref GLdouble v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectdv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRectdv(GLdouble[] v1, System.IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectdv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRectdv(ref GLdouble v1, System.IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectdv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRectdv(GLdouble[] v1, ref GLdouble v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectdv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glRectdv(ref GLdouble v1, GLdouble[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectdv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glRectdv(GLdouble[] v1, GLdouble[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectdv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glRectdv(System.IntPtr v1, GLdouble[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectdv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRectdv(ref GLdouble v1, ref GLdouble v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectdv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glRectdv(System.IntPtr v1, System.IntPtr v2)
        {
            Delegates.glRectdv(v1, v2);
        }
        public static void glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)
        {
            Delegates.glRectf(x1, y1, x2, y2);
        }
        public static void glRectfv(System.IntPtr v1, GLfloat[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectfv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRectfv(System.IntPtr v1, System.IntPtr v2)
        {
            Delegates.glRectfv(v1, v2);
        }
        public static void glRectfv(GLfloat[] v1, System.IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectfv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRectfv(System.IntPtr v1, ref GLfloat v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectfv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRectfv(ref GLfloat v1, ref GLfloat v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectfv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glRectfv(GLfloat[] v1, ref GLfloat v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectfv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glRectfv(GLfloat[] v1, GLfloat[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectfv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glRectfv(ref GLfloat v1, System.IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectfv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRectfv(ref GLfloat v1, GLfloat[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectfv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glRecti(GLint x1, GLint y1, GLint x2, GLint y2)
        {
            Delegates.glRecti(x1, y1, x2, y2);
        }
        public static void glRectiv(ref GLint v1, System.IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectiv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRectiv(ref GLint v1, ref GLint v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectiv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glRectiv(ref GLint v1, GLint[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectiv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glRectiv(GLint[] v1, ref GLint v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectiv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glRectiv(System.IntPtr v1, GLint[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectiv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRectiv(System.IntPtr v1, System.IntPtr v2)
        {
            Delegates.glRectiv(v1, v2);
        }
        public static void glRectiv(System.IntPtr v1, ref GLint v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectiv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRectiv(GLint[] v1, GLint[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectiv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glRectiv(GLint[] v1, System.IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectiv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2)
        {
            Delegates.glRects(x1, y1, x2, y2);
        }
        public static void glRectsv(GLshort[] v1, GLshort[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectsv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glRectsv(GLshort[] v1, System.IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectsv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRectsv(System.IntPtr v1, ref GLshort v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectsv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRectsv(ref GLshort v1, System.IntPtr v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            try
            {
                Delegates.glRectsv(h0.AddrOfPinnedObject(), v2);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRectsv(ref GLshort v1, GLshort[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectsv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glRectsv(GLshort[] v1, ref GLshort v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectsv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glRectsv(System.IntPtr v1, GLshort[] v2)
        {
            GCHandle h0 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectsv(v1, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRectsv(ref GLshort v1, ref GLshort v2)
        {
            GCHandle h0 = GCHandle.Alloc(v1, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v2, GCHandleType.Pinned);
            try
            {
                Delegates.glRectsv(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glRectsv(System.IntPtr v1, System.IntPtr v2)
        {
            Delegates.glRectsv(v1, v2);
        }
        public static void glReferencePlaneSGIX(GLdouble[] equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                Delegates.glReferencePlaneSGIX(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReferencePlaneSGIX(System.IntPtr equation)
        {
            Delegates.glReferencePlaneSGIX(equation);
        }
        public static void glReferencePlaneSGIX(ref GLdouble equation)
        {
            GCHandle h0 = GCHandle.Alloc(equation, GCHandleType.Pinned);
            try
            {
                Delegates.glReferencePlaneSGIX(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
        {
            Delegates.glRenderbufferStorageEXT(target, internalformat, width, height);
        }
        public static void glRenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)
        {
            Delegates.glRenderbufferStorageMultisampleCoverageNV(target, coverageSamples, colorSamples, internalformat, width, height);
        }
        public static void glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
        {
            Delegates.glRenderbufferStorageMultisampleEXT(target, samples, internalformat, width, height);
        }
        public static GLint glRenderMode(GLenum mode)
        {
            return Delegates.glRenderMode(mode);
        }
        public static void glReplacementCodePointerSUN(GLenum type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glReplacementCodePointerSUN(type, stride, pointer);
        }
        public static void glReplacementCodeubSUN(GLubyte code)
        {
            Delegates.glReplacementCodeubSUN(code);
        }
        public static void glReplacementCodeubvSUN(GLubyte[] code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeubvSUN(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeubvSUN(ref GLubyte code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeubvSUN(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeubvSUN(System.IntPtr code)
        {
            Delegates.glReplacementCodeubvSUN(code);
        }
        public static void glReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiColor3fVertex3fSUN(rc, r, g, b, x, y, z);
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, System.IntPtr c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, System.IntPtr c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(System.IntPtr rc, ref GLfloat c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(System.IntPtr rc, GLfloat[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, System.IntPtr v)
        {
            Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, c, v);
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(System.IntPtr rc, ref GLfloat c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(System.IntPtr rc, ref GLfloat c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(System.IntPtr rc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(System.IntPtr rc, GLfloat[] c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(ref GLuint rc, System.IntPtr c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(ref GLuint rc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor3fVertex3fvSUN(ref GLuint rc, System.IntPtr c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiColor4fNormal3fVertex3fSUN(rc, r, g, b, a, nx, ny, nz, x, y, z);
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, v);
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiColor4ubVertex3fSUN(rc, r, g, b, a, x, y, z);
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, System.IntPtr c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, System.IntPtr c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, GLubyte[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(System.IntPtr rc, GLubyte[] c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(System.IntPtr rc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(System.IntPtr rc, GLubyte[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(System.IntPtr rc, ref GLubyte c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(System.IntPtr rc, ref GLubyte c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(System.IntPtr rc, ref GLubyte c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(ref GLuint rc, GLubyte[] c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(ref GLuint rc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(ref GLuint rc, GLubyte[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(ref GLuint rc, ref GLubyte c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(ref GLuint rc, ref GLubyte c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(ref GLuint rc, ref GLubyte c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, ref GLubyte c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, ref GLubyte c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(GLuint[] rc, ref GLubyte c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(ref GLuint rc, System.IntPtr c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(ref GLuint rc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(ref GLuint rc, System.IntPtr c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(System.IntPtr rc, System.IntPtr c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(System.IntPtr rc, System.IntPtr c, System.IntPtr v)
        {
            Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, v);
        }
        public static void glReplacementCodeuiColor4ubVertex3fvSUN(System.IntPtr rc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiColor4ubVertex3fvSUN(rc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiNormal3fVertex3fSUN(rc, nx, ny, nz, x, y, z);
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr n, System.IntPtr v)
        {
            Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, n, v);
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiSUN(GLuint code)
        {
            Delegates.glReplacementCodeuiSUN(code);
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, ref GLfloat c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, ref GLfloat c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, ref GLfloat c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, ref GLfloat c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, v);
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, ref GLfloat c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, GLfloat[] c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, GLfloat[] c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, System.IntPtr c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, System.IntPtr c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, System.IntPtr c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, System.IntPtr c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, ref GLfloat c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, System.IntPtr c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, ref GLfloat c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, ref GLfloat c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, ref GLfloat c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, ref GLfloat c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, System.IntPtr c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, System.IntPtr c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, System.IntPtr c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, System.IntPtr c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, System.IntPtr c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, System.IntPtr c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, System.IntPtr c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, System.IntPtr c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, System.IntPtr c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, System.IntPtr c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, System.IntPtr c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, System.IntPtr c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, System.IntPtr c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, System.IntPtr c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, ref GLfloat c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, ref GLfloat c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, ref GLfloat c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, ref GLfloat c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, GLfloat[] c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, GLfloat[] c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, ref GLfloat c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, ref GLfloat c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, ref GLfloat c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, ref GLfloat c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, ref GLfloat c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, System.IntPtr c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, System.IntPtr c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, System.IntPtr c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, System.IntPtr c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, ref GLfloat c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, System.IntPtr c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, System.IntPtr c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), n, h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h4 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject(), h4.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
                h4.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, ref GLfloat c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, ref GLfloat c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, ref GLfloat c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), c, h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, ref GLfloat c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, ref GLfloat c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc, s, t, nx, ny, nz, x, y, z);
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr n, System.IntPtr v)
        {
            Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, v);
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiTexCoord2fVertex3fSUN(rc, s, t, x, y, z);
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, System.IntPtr tc, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(System.IntPtr rc, GLfloat[] tc, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(System.IntPtr rc, ref GLfloat tc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, GLfloat[] tc, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref GLuint rc, GLfloat[] tc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref GLuint rc, ref GLfloat tc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(GLuint[] rc, ref GLfloat tc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(ref GLuint rc, System.IntPtr tc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), tc, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr v)
        {
            Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, v);
        }
        public static void glReplacementCodeuiTexCoord2fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiTexCoord2fVertex3fvSUN(rc, tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glReplacementCodeuiVertex3fSUN(rc, x, y, z);
        }
        public static void glReplacementCodeuiVertex3fvSUN(System.IntPtr rc, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(rc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiVertex3fvSUN(GLuint[] rc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiVertex3fvSUN(System.IntPtr rc, System.IntPtr v)
        {
            Delegates.glReplacementCodeuiVertex3fvSUN(rc, v);
        }
        public static void glReplacementCodeuiVertex3fvSUN(System.IntPtr rc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(rc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiVertex3fvSUN(ref GLuint rc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiVertex3fvSUN(ref GLuint rc, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiVertex3fvSUN(ref GLuint rc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuiVertex3fvSUN(GLuint[] rc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuiVertex3fvSUN(GLuint[] rc, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(rc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuiVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glReplacementCodeuivSUN(ref GLuint code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuivSUN(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuivSUN(GLuint[] code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeuivSUN(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeuivSUN(System.IntPtr code)
        {
            Delegates.glReplacementCodeuivSUN(code);
        }
        public static void glReplacementCodeusSUN(GLushort code)
        {
            Delegates.glReplacementCodeusSUN(code);
        }
        public static void glReplacementCodeusvSUN(ref GLushort code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeusvSUN(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glReplacementCodeusvSUN(System.IntPtr code)
        {
            Delegates.glReplacementCodeusvSUN(code);
        }
        public static void glReplacementCodeusvSUN(GLushort[] code)
        {
            GCHandle h0 = GCHandle.Alloc(code, GCHandleType.Pinned);
            try
            {
                Delegates.glReplacementCodeusvSUN(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRequestResidentProgramsNV(GLsizei n, GLuint[] programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glRequestResidentProgramsNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRequestResidentProgramsNV(GLsizei n, ref GLuint programs)
        {
            GCHandle h0 = GCHandle.Alloc(programs, GCHandleType.Pinned);
            try
            {
                Delegates.glRequestResidentProgramsNV(n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glRequestResidentProgramsNV(GLsizei n, System.IntPtr programs)
        {
            Delegates.glRequestResidentProgramsNV(n, programs);
        }
        public static void glResetHistogram(GLenum target)
        {
            Delegates.glResetHistogram(target);
        }
        public static void glResetHistogramEXT(GLenum target)
        {
            Delegates.glResetHistogramEXT(target);
        }
        public static void glResetMinmax(GLenum target)
        {
            Delegates.glResetMinmax(target);
        }
        public static void glResetMinmaxEXT(GLenum target)
        {
            Delegates.glResetMinmaxEXT(target);
        }
        public static void glResizeBuffersMESA()
        {
            Delegates.glResizeBuffersMESA();
        }
        public static void glRotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glRotated(angle, x, y, z);
        }
        public static void glRotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glRotatef(angle, x, y, z);
        }
        public static void glSampleCoverage(GLclampf value, GLboolean invert)
        {
            Delegates.glSampleCoverage(value, invert);
        }
        public static void glSampleCoverageARB(GLclampf value, GLboolean invert)
        {
            Delegates.glSampleCoverageARB(value, invert);
        }
        public static void glSampleMapATI(GLuint dst, GLuint interp, GLenum swizzle)
        {
            Delegates.glSampleMapATI(dst, interp, swizzle);
        }
        public static void glSampleMaskEXT(GLclampf value, GLboolean invert)
        {
            Delegates.glSampleMaskEXT(value, invert);
        }
        public static void glSampleMaskSGIS(GLclampf value, GLboolean invert)
        {
            Delegates.glSampleMaskSGIS(value, invert);
        }
        public static void glSamplePatternEXT(GLenum pattern)
        {
            Delegates.glSamplePatternEXT(pattern);
        }
        public static void glSamplePatternSGIS(GLenum pattern)
        {
            Delegates.glSamplePatternSGIS(pattern);
        }
        public static void glScaled(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glScaled(x, y, z);
        }
        public static void glScalef(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glScalef(x, y, z);
        }
        public static void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glScissor(x, y, width, height);
        }
        public static void glSecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue)
        {
            Delegates.glSecondaryColor3b(red, green, blue);
        }
        public static void glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue)
        {
            Delegates.glSecondaryColor3bEXT(red, green, blue);
        }
        public static void glSecondaryColor3bv(ref GLbyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3bv(System.IntPtr v)
        {
            Delegates.glSecondaryColor3bv(v);
        }
        public static void glSecondaryColor3bv(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3bv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3bvEXT(ref GLbyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3bvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3bvEXT(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3bvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3bvEXT(System.IntPtr v)
        {
            Delegates.glSecondaryColor3bvEXT(v);
        }
        public static void glSecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue)
        {
            Delegates.glSecondaryColor3d(red, green, blue);
        }
        public static void glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue)
        {
            Delegates.glSecondaryColor3dEXT(red, green, blue);
        }
        public static void glSecondaryColor3dv(System.IntPtr v)
        {
            Delegates.glSecondaryColor3dv(v);
        }
        public static void glSecondaryColor3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3dv(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3dvEXT(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3dvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3dvEXT(System.IntPtr v)
        {
            Delegates.glSecondaryColor3dvEXT(v);
        }
        public static void glSecondaryColor3dvEXT(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3dvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue)
        {
            Delegates.glSecondaryColor3f(red, green, blue);
        }
        public static void glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue)
        {
            Delegates.glSecondaryColor3fEXT(red, green, blue);
        }
        public static void glSecondaryColor3fv(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3fv(System.IntPtr v)
        {
            Delegates.glSecondaryColor3fv(v);
        }
        public static void glSecondaryColor3fvEXT(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3fvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3fvEXT(System.IntPtr v)
        {
            Delegates.glSecondaryColor3fvEXT(v);
        }
        public static void glSecondaryColor3fvEXT(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3fvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue)
        {
            Delegates.glSecondaryColor3hNV(red, green, blue);
        }
        public static void glSecondaryColor3hvNV(ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3hvNV(System.IntPtr v)
        {
            Delegates.glSecondaryColor3hvNV(v);
        }
        public static void glSecondaryColor3i(GLint red, GLint green, GLint blue)
        {
            Delegates.glSecondaryColor3i(red, green, blue);
        }
        public static void glSecondaryColor3iEXT(GLint red, GLint green, GLint blue)
        {
            Delegates.glSecondaryColor3iEXT(red, green, blue);
        }
        public static void glSecondaryColor3iv(System.IntPtr v)
        {
            Delegates.glSecondaryColor3iv(v);
        }
        public static void glSecondaryColor3iv(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3ivEXT(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3ivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3ivEXT(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3ivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3ivEXT(System.IntPtr v)
        {
            Delegates.glSecondaryColor3ivEXT(v);
        }
        public static void glSecondaryColor3s(GLshort red, GLshort green, GLshort blue)
        {
            Delegates.glSecondaryColor3s(red, green, blue);
        }
        public static void glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue)
        {
            Delegates.glSecondaryColor3sEXT(red, green, blue);
        }
        public static void glSecondaryColor3sv(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3sv(System.IntPtr v)
        {
            Delegates.glSecondaryColor3sv(v);
        }
        public static void glSecondaryColor3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3svEXT(System.IntPtr v)
        {
            Delegates.glSecondaryColor3svEXT(v);
        }
        public static void glSecondaryColor3svEXT(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3svEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3svEXT(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3svEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue)
        {
            Delegates.glSecondaryColor3ub(red, green, blue);
        }
        public static void glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue)
        {
            Delegates.glSecondaryColor3ubEXT(red, green, blue);
        }
        public static void glSecondaryColor3ubv(ref GLubyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3ubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3ubv(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3ubv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3ubv(System.IntPtr v)
        {
            Delegates.glSecondaryColor3ubv(v);
        }
        public static void glSecondaryColor3ubvEXT(System.IntPtr v)
        {
            Delegates.glSecondaryColor3ubvEXT(v);
        }
        public static void glSecondaryColor3ubvEXT(GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3ubvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3ubvEXT(ref GLubyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3ubvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3ui(GLuint red, GLuint green, GLuint blue)
        {
            Delegates.glSecondaryColor3ui(red, green, blue);
        }
        public static void glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue)
        {
            Delegates.glSecondaryColor3uiEXT(red, green, blue);
        }
        public static void glSecondaryColor3uiv(System.IntPtr v)
        {
            Delegates.glSecondaryColor3uiv(v);
        }
        public static void glSecondaryColor3uiv(ref GLuint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3uiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3uiv(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3uiv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3uivEXT(System.IntPtr v)
        {
            Delegates.glSecondaryColor3uivEXT(v);
        }
        public static void glSecondaryColor3uivEXT(GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3uivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3uivEXT(ref GLuint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3uivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3us(GLushort red, GLushort green, GLushort blue)
        {
            Delegates.glSecondaryColor3us(red, green, blue);
        }
        public static void glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue)
        {
            Delegates.glSecondaryColor3usEXT(red, green, blue);
        }
        public static void glSecondaryColor3usv(System.IntPtr v)
        {
            Delegates.glSecondaryColor3usv(v);
        }
        public static void glSecondaryColor3usv(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3usv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3usv(ref GLushort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3usv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3usvEXT(ref GLushort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3usvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3usvEXT(GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColor3usvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColor3usvEXT(System.IntPtr v)
        {
            Delegates.glSecondaryColor3usvEXT(v);
        }
        public static void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glSecondaryColorPointer(size, type, stride, pointer);
        }
        public static void glSecondaryColorPointer(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColorPointer(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glSecondaryColorPointerEXT(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glSecondaryColorPointerEXT(size, type, stride, pointer);
        }
        public static void glSecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, System.IntPtr pointer, GLint ptrstride)
        {
            Delegates.glSecondaryColorPointerListIBM(size, type, stride, pointer, ptrstride);
        }
        public static void glSelectBuffer(GLsizei size, GLuint[] buffer)
        {
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                Delegates.glSelectBuffer(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSelectBuffer(GLsizei size, [In, Out()] System.IntPtr buffer)
        {
            Delegates.glSelectBuffer(size, buffer);
        }
        public static void glSelectBuffer(GLsizei size, out GLuint buffer)
        {
            buffer = default(GLuint);
            GCHandle h0 = GCHandle.Alloc(buffer, GCHandleType.Pinned);
            try
            {
                Delegates.glSelectBuffer(size, h0.AddrOfPinnedObject());
                buffer = (GLuint)h0.Target;
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, row, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr row, System.IntPtr column)
        {
            Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, row, column);
        }
        public static void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, System.IntPtr column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), column);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2D(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, object row, System.IntPtr column)
        {
            GCHandle h0 = GCHandle.Alloc(row, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, h0.AddrOfPinnedObject(), column);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr row, System.IntPtr column)
        {
            Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, column);
        }
        public static void glSeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr row, object column)
        {
            GCHandle h0 = GCHandle.Alloc(column, GCHandleType.Pinned);
            try
            {
                Delegates.glSeparableFilter2DEXT(target, internalformat, width, height, format, type, row, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSetFenceAPPLE(GLuint fence)
        {
            Delegates.glSetFenceAPPLE(fence);
        }
        public static void glSetFenceNV(GLuint fence, GLenum condition)
        {
            Delegates.glSetFenceNV(fence, condition);
        }
        public static void glSetFragmentShaderConstantATI(GLuint dst, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glSetFragmentShaderConstantATI(dst, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSetFragmentShaderConstantATI(GLuint dst, System.IntPtr value)
        {
            Delegates.glSetFragmentShaderConstantATI(dst, value);
        }
        public static void glSetFragmentShaderConstantATI(GLuint dst, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glSetFragmentShaderConstantATI(dst, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSetInvariantEXT(GLuint id, GLenum type, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glSetInvariantEXT(id, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSetInvariantEXT(GLuint id, GLenum type, System.IntPtr addr)
        {
            Delegates.glSetInvariantEXT(id, type, addr);
        }
        public static void glSetLocalConstantEXT(GLuint id, GLenum type, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glSetLocalConstantEXT(id, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSetLocalConstantEXT(GLuint id, GLenum type, System.IntPtr addr)
        {
            Delegates.glSetLocalConstantEXT(id, type, addr);
        }
        public static void glShadeModel(GLenum mode)
        {
            Delegates.glShadeModel(mode);
        }
        public static void glShaderOp1EXT(GLenum op, GLuint res, GLuint arg1)
        {
            Delegates.glShaderOp1EXT(op, res, arg1);
        }
        public static void glShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2)
        {
            Delegates.glShaderOp2EXT(op, res, arg1, arg2);
        }
        public static void glShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)
        {
            Delegates.glShaderOp3EXT(op, res, arg1, arg2, arg3);
        }
        public static void glShaderSource(GLuint shader, GLsizei count, string[] @string, System.IntPtr length)
        {
            Delegates.glShaderSource(shader, count, @string, length);
        }
        public static void glShaderSource(GLuint shader, GLsizei count, string[] @string, ref GLint length)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glShaderSource(shader, count, @string, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glShaderSource(GLuint shader, GLsizei count, string[] @string, GLint[] length)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glShaderSource(shader, count, @string, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string[] @string, GLint[] length)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glShaderSourceARB(shaderObj, count, @string, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string[] @string, System.IntPtr length)
        {
            Delegates.glShaderSourceARB(shaderObj, count, @string, length);
        }
        public static void glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string[] @string, ref GLint length)
        {
            GCHandle h0 = GCHandle.Alloc(length, GCHandleType.Pinned);
            try
            {
                Delegates.glShaderSourceARB(shaderObj, count, @string, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSharpenTexFuncSGIS(GLenum target, GLsizei n, GLfloat[] points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glSharpenTexFuncSGIS(target, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSharpenTexFuncSGIS(GLenum target, GLsizei n, ref GLfloat points)
        {
            GCHandle h0 = GCHandle.Alloc(points, GCHandleType.Pinned);
            try
            {
                Delegates.glSharpenTexFuncSGIS(target, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSharpenTexFuncSGIS(GLenum target, GLsizei n, System.IntPtr points)
        {
            Delegates.glSharpenTexFuncSGIS(target, n, points);
        }
        public static void glSpriteParameterfSGIX(GLenum pname, GLfloat param)
        {
            Delegates.glSpriteParameterfSGIX(pname, param);
        }
        public static void glSpriteParameterfvSGIX(GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glSpriteParameterfvSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSpriteParameterfvSGIX(GLenum pname, System.IntPtr @params)
        {
            Delegates.glSpriteParameterfvSGIX(pname, @params);
        }
        public static void glSpriteParameterfvSGIX(GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glSpriteParameterfvSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSpriteParameteriSGIX(GLenum pname, GLint param)
        {
            Delegates.glSpriteParameteriSGIX(pname, param);
        }
        public static void glSpriteParameterivSGIX(GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glSpriteParameterivSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSpriteParameterivSGIX(GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glSpriteParameterivSGIX(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSpriteParameterivSGIX(GLenum pname, System.IntPtr @params)
        {
            Delegates.glSpriteParameterivSGIX(pname, @params);
        }
        public static void glStartInstrumentsSGIX()
        {
            Delegates.glStartInstrumentsSGIX();
        }
        public static void glStencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag)
        {
            Delegates.glStencilClearTagEXT(stencilTagBits, stencilClearTag);
        }
        public static void glStencilFunc(GLenum func, GLint @ref, GLuint mask)
        {
            Delegates.glStencilFunc(func, @ref, mask);
        }
        public static void glStencilFuncSeparate(GLenum frontfunc, GLenum backfunc, GLint @ref, GLuint mask)
        {
            Delegates.glStencilFuncSeparate(frontfunc, backfunc, @ref, mask);
        }
        public static void glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint @ref, GLuint mask)
        {
            Delegates.glStencilFuncSeparateATI(frontfunc, backfunc, @ref, mask);
        }
        public static void glStencilMask(GLuint mask)
        {
            Delegates.glStencilMask(mask);
        }
        public static void glStencilMaskSeparate(GLenum face, GLuint mask)
        {
            Delegates.glStencilMaskSeparate(face, mask);
        }
        public static void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
        {
            Delegates.glStencilOp(fail, zfail, zpass);
        }
        public static void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
        {
            Delegates.glStencilOpSeparate(face, sfail, dpfail, dppass);
        }
        public static void glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
        {
            Delegates.glStencilOpSeparateATI(face, sfail, dpfail, dppass);
        }
        public static void glStopInstrumentsSGIX(GLint marker)
        {
            Delegates.glStopInstrumentsSGIX(marker);
        }
        public static void glStringMarkerGREMEDY(GLsizei len, System.IntPtr @string)
        {
            Delegates.glStringMarkerGREMEDY(len, @string);
        }
        public static void glStringMarkerGREMEDY(GLsizei len, object @string)
        {
            GCHandle h0 = GCHandle.Alloc(@string, GCHandleType.Pinned);
            try
            {
                Delegates.glStringMarkerGREMEDY(len, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glSwizzleEXT(GLuint res, GLuint @in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
        {
            Delegates.glSwizzleEXT(res, @in, outX, outY, outZ, outW);
        }
        public static void glTagSampleBufferSGIX()
        {
            Delegates.glTagSampleBufferSGIX();
        }
        public static void glTangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz)
        {
            Delegates.glTangent3bEXT(tx, ty, tz);
        }
        public static void glTangent3bvEXT(GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3bvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTangent3bvEXT(System.IntPtr v)
        {
            Delegates.glTangent3bvEXT(v);
        }
        public static void glTangent3bvEXT(ref GLbyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3bvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz)
        {
            Delegates.glTangent3dEXT(tx, ty, tz);
        }
        public static void glTangent3dvEXT(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3dvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTangent3dvEXT(System.IntPtr v)
        {
            Delegates.glTangent3dvEXT(v);
        }
        public static void glTangent3dvEXT(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3dvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz)
        {
            Delegates.glTangent3fEXT(tx, ty, tz);
        }
        public static void glTangent3fvEXT(System.IntPtr v)
        {
            Delegates.glTangent3fvEXT(v);
        }
        public static void glTangent3fvEXT(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3fvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTangent3fvEXT(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3fvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTangent3iEXT(GLint tx, GLint ty, GLint tz)
        {
            Delegates.glTangent3iEXT(tx, ty, tz);
        }
        public static void glTangent3ivEXT(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3ivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTangent3ivEXT(System.IntPtr v)
        {
            Delegates.glTangent3ivEXT(v);
        }
        public static void glTangent3ivEXT(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3ivEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTangent3sEXT(GLshort tx, GLshort ty, GLshort tz)
        {
            Delegates.glTangent3sEXT(tx, ty, tz);
        }
        public static void glTangent3svEXT(System.IntPtr v)
        {
            Delegates.glTangent3svEXT(v);
        }
        public static void glTangent3svEXT(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3svEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTangent3svEXT(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTangent3svEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTangentPointerEXT(GLenum type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glTangentPointerEXT(type, stride, pointer);
        }
        public static void glTangentPointerEXT(GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTangentPointerEXT(type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTbufferMask3DFX(GLuint mask)
        {
            Delegates.glTbufferMask3DFX(mask);
        }
        public static GLboolean glTestFenceAPPLE(GLuint fence)
        {
            return Delegates.glTestFenceAPPLE(fence);
        }
        public static GLboolean glTestFenceNV(GLuint fence)
        {
            return Delegates.glTestFenceNV(fence);
        }
        public static GLboolean glTestObjectAPPLE(GLenum @object, GLuint name)
        {
            return Delegates.glTestObjectAPPLE(@object, name);
        }
        public static void glTexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer)
        {
            Delegates.glTexBufferEXT(target, internalformat, buffer);
        }
        public static void glTexBumpParameterfvATI(GLenum pname, System.IntPtr param)
        {
            Delegates.glTexBumpParameterfvATI(pname, param);
        }
        public static void glTexBumpParameterfvATI(GLenum pname, GLfloat[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glTexBumpParameterfvATI(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexBumpParameterfvATI(GLenum pname, ref GLfloat param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glTexBumpParameterfvATI(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexBumpParameterivATI(GLenum pname, ref GLint param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glTexBumpParameterivATI(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexBumpParameterivATI(GLenum pname, System.IntPtr param)
        {
            Delegates.glTexBumpParameterivATI(pname, param);
        }
        public static void glTexBumpParameterivATI(GLenum pname, GLint[] param)
        {
            GCHandle h0 = GCHandle.Alloc(param, GCHandleType.Pinned);
            try
            {
                Delegates.glTexBumpParameterivATI(pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord1d(GLdouble s)
        {
            Delegates.glTexCoord1d(s);
        }
        public static void glTexCoord1dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord1dv(System.IntPtr v)
        {
            Delegates.glTexCoord1dv(v);
        }
        public static void glTexCoord1dv(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord1f(GLfloat s)
        {
            Delegates.glTexCoord1f(s);
        }
        public static void glTexCoord1fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord1fv(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord1fv(System.IntPtr v)
        {
            Delegates.glTexCoord1fv(v);
        }
        public static void glTexCoord1hNV(GLhalfNV s)
        {
            Delegates.glTexCoord1hNV(s);
        }
        public static void glTexCoord1hvNV(ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord1hvNV(System.IntPtr v)
        {
            Delegates.glTexCoord1hvNV(v);
        }
        public static void glTexCoord1hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord1i(GLint s)
        {
            Delegates.glTexCoord1i(s);
        }
        public static void glTexCoord1iv(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord1iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord1iv(System.IntPtr v)
        {
            Delegates.glTexCoord1iv(v);
        }
        public static void glTexCoord1s(GLshort s)
        {
            Delegates.glTexCoord1s(s);
        }
        public static void glTexCoord1sv(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord1sv(System.IntPtr v)
        {
            Delegates.glTexCoord1sv(v);
        }
        public static void glTexCoord1sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord1sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2d(GLdouble s, GLdouble t)
        {
            Delegates.glTexCoord2d(s, t);
        }
        public static void glTexCoord2dv(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2dv(System.IntPtr v)
        {
            Delegates.glTexCoord2dv(v);
        }
        public static void glTexCoord2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2f(GLfloat s, GLfloat t)
        {
            Delegates.glTexCoord2f(s, t);
        }
        public static void glTexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glTexCoord2fColor3fVertex3fSUN(s, t, r, g, b, x, y, z);
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr v)
        {
            Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, c, v);
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(ref GLfloat tc, System.IntPtr c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(ref GLfloat tc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(ref GLfloat tc, System.IntPtr c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(System.IntPtr tc, GLfloat[] c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(System.IntPtr tc, ref GLfloat c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(System.IntPtr tc, ref GLfloat c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(System.IntPtr tc, GLfloat[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(System.IntPtr tc, GLfloat[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, System.IntPtr c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(System.IntPtr tc, ref GLfloat c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor3fVertex3fvSUN(GLfloat[] tc, System.IntPtr c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glTexCoord2fColor4fNormal3fVertex3fSUN(s, t, r, g, b, a, nx, ny, nz, x, y, z);
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, System.IntPtr c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, System.IntPtr c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, System.IntPtr c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, System.IntPtr c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, System.IntPtr c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, GLfloat[] c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, ref GLfloat c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, ref GLfloat c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, GLfloat[] c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, v);
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, System.IntPtr c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, System.IntPtr c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, System.IntPtr c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, System.IntPtr c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, ref GLfloat c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, ref GLfloat c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, ref GLfloat c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(GLfloat[] tc, System.IntPtr c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glTexCoord2fColor4ubVertex3fSUN(s, t, r, g, b, a, x, y, z);
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, ref GLubyte c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(ref GLfloat tc, System.IntPtr c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(ref GLfloat tc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, ref GLubyte c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, ref GLubyte c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(ref GLfloat tc, System.IntPtr c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(ref GLfloat tc, ref GLubyte c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(ref GLfloat tc, ref GLubyte c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(ref GLfloat tc, ref GLubyte c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(ref GLfloat tc, GLubyte[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(ref GLfloat tc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(ref GLfloat tc, GLubyte[] c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(System.IntPtr tc, GLubyte[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(System.IntPtr tc, GLubyte[] c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(System.IntPtr tc, GLubyte[] c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr v)
        {
            Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, c, v);
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(System.IntPtr tc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(System.IntPtr tc, System.IntPtr c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, c, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(System.IntPtr tc, ref GLubyte c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, System.IntPtr c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, System.IntPtr c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, GLubyte[] c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(System.IntPtr tc, ref GLubyte c, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(System.IntPtr tc, ref GLubyte c, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fColor4ubVertex3fvSUN(GLfloat[] tc, System.IntPtr c, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fColor4ubVertex3fvSUN(h0.AddrOfPinnedObject(), c, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glTexCoord2fNormal3fVertex3fSUN(s, t, nx, ny, nz, x, y, z);
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(ref GLfloat tc, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(ref GLfloat tc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(ref GLfloat tc, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(ref GLfloat tc, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(ref GLfloat tc, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(System.IntPtr tc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(System.IntPtr tc, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(System.IntPtr tc, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr n, System.IntPtr v)
        {
            Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, n, v);
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(System.IntPtr tc, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(System.IntPtr tc, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(System.IntPtr tc, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fNormal3fVertex3fvSUN(GLfloat[] tc, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fNormal3fVertex3fvSUN(h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fv(System.IntPtr v)
        {
            Delegates.glTexCoord2fv(v);
        }
        public static void glTexCoord2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fv(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glTexCoord2fVertex3fSUN(s, t, x, y, z);
        }
        public static void glTexCoord2fVertex3fvSUN(ref GLfloat tc, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fVertex3fvSUN(GLfloat[] tc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fVertex3fvSUN(GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fVertex3fvSUN(ref GLfloat tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fVertex3fvSUN(ref GLfloat tc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fVertex3fvSUN(System.IntPtr tc, System.IntPtr v)
        {
            Delegates.glTexCoord2fVertex3fvSUN(tc, v);
        }
        public static void glTexCoord2fVertex3fvSUN(GLfloat[] tc, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fVertex3fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord2fVertex3fvSUN(System.IntPtr tc, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fVertex3fvSUN(tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2fVertex3fvSUN(System.IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2fVertex3fvSUN(tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2hNV(GLhalfNV s, GLhalfNV t)
        {
            Delegates.glTexCoord2hNV(s, t);
        }
        public static void glTexCoord2hvNV(ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2hvNV(System.IntPtr v)
        {
            Delegates.glTexCoord2hvNV(v);
        }
        public static void glTexCoord2hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2i(GLint s, GLint t)
        {
            Delegates.glTexCoord2i(s, t);
        }
        public static void glTexCoord2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2iv(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2iv(System.IntPtr v)
        {
            Delegates.glTexCoord2iv(v);
        }
        public static void glTexCoord2s(GLshort s, GLshort t)
        {
            Delegates.glTexCoord2s(s, t);
        }
        public static void glTexCoord2sv(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord2sv(System.IntPtr v)
        {
            Delegates.glTexCoord2sv(v);
        }
        public static void glTexCoord2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord3d(GLdouble s, GLdouble t, GLdouble r)
        {
            Delegates.glTexCoord3d(s, t, r);
        }
        public static void glTexCoord3dv(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord3dv(System.IntPtr v)
        {
            Delegates.glTexCoord3dv(v);
        }
        public static void glTexCoord3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord3f(GLfloat s, GLfloat t, GLfloat r)
        {
            Delegates.glTexCoord3f(s, t, r);
        }
        public static void glTexCoord3fv(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord3fv(System.IntPtr v)
        {
            Delegates.glTexCoord3fv(v);
        }
        public static void glTexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r)
        {
            Delegates.glTexCoord3hNV(s, t, r);
        }
        public static void glTexCoord3hvNV(System.IntPtr v)
        {
            Delegates.glTexCoord3hvNV(v);
        }
        public static void glTexCoord3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord3hvNV(ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord3i(GLint s, GLint t, GLint r)
        {
            Delegates.glTexCoord3i(s, t, r);
        }
        public static void glTexCoord3iv(System.IntPtr v)
        {
            Delegates.glTexCoord3iv(v);
        }
        public static void glTexCoord3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord3iv(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord3s(GLshort s, GLshort t, GLshort r)
        {
            Delegates.glTexCoord3s(s, t, r);
        }
        public static void glTexCoord3sv(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord3sv(System.IntPtr v)
        {
            Delegates.glTexCoord3sv(v);
        }
        public static void glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q)
        {
            Delegates.glTexCoord4d(s, t, r, q);
        }
        public static void glTexCoord4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4dv(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4dv(System.IntPtr v)
        {
            Delegates.glTexCoord4dv(v);
        }
        public static void glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q)
        {
            Delegates.glTexCoord4f(s, t, r, q);
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glTexCoord4fColor4fNormal3fVertex4fSUN(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, System.IntPtr c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, GLfloat[] c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, System.IntPtr c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, System.IntPtr c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, System.IntPtr c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, ref GLfloat c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, ref GLfloat c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, ref GLfloat c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, ref GLfloat c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, System.IntPtr c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, ref GLfloat c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, GLfloat[] c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat[] c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat[] c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, System.IntPtr c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat[] c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat[] c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, ref GLfloat c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, ref GLfloat c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, ref GLfloat c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, ref GLfloat c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, ref GLfloat c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, System.IntPtr c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, ref GLfloat c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, ref GLfloat c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, ref GLfloat c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, ref GLfloat c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, GLfloat[] c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, ref GLfloat c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, System.IntPtr c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, System.IntPtr c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, System.IntPtr c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, ref GLfloat c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(GLfloat[] tc, ref GLfloat c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(c, GCHandleType.Pinned);
            GCHandle h2 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h3 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject(), h2.AddrOfPinnedObject(), h3.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
                h2.Free();
                h3.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, n, h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(ref GLfloat tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(h0.AddrOfPinnedObject(), c, n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, System.IntPtr c, GLfloat[] n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, System.IntPtr c, GLfloat[] n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, System.IntPtr c, GLfloat[] n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr n, System.IntPtr v)
        {
            Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, v);
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, System.IntPtr c, ref GLfloat n, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, System.IntPtr c, ref GLfloat n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, GLfloat[] c, System.IntPtr n, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(c, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, h0.AddrOfPinnedObject(), n, v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, System.IntPtr c, ref GLfloat n, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(n, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fColor4fNormal3fVertex4fvSUN(tc, c, h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fv(System.IntPtr v)
        {
            Delegates.glTexCoord4fv(v);
        }
        public static void glTexCoord4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4fv(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glTexCoord4fVertex4fSUN(s, t, p, q, x, y, z, w);
        }
        public static void glTexCoord4fVertex4fvSUN(GLfloat[] tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fVertex4fvSUN(GLfloat[] tc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fVertex4fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4fVertex4fvSUN(System.IntPtr tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fVertex4fvSUN(tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4fVertex4fvSUN(System.IntPtr tc, System.IntPtr v)
        {
            Delegates.glTexCoord4fVertex4fvSUN(tc, v);
        }
        public static void glTexCoord4fVertex4fvSUN(System.IntPtr tc, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fVertex4fvSUN(tc, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4fVertex4fvSUN(GLfloat[] tc, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fVertex4fvSUN(ref GLfloat tc, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fVertex4fvSUN(ref GLfloat tc, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            GCHandle h1 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fVertex4fvSUN(h0.AddrOfPinnedObject(), h1.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
                h1.Free();
            }
        }
        public static void glTexCoord4fVertex4fvSUN(ref GLfloat tc, System.IntPtr v)
        {
            GCHandle h0 = GCHandle.Alloc(tc, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4fVertex4fvSUN(h0.AddrOfPinnedObject(), v);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)
        {
            Delegates.glTexCoord4hNV(s, t, r, q);
        }
        public static void glTexCoord4hvNV(ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4hvNV(System.IntPtr v)
        {
            Delegates.glTexCoord4hvNV(v);
        }
        public static void glTexCoord4hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4i(GLint s, GLint t, GLint r, GLint q)
        {
            Delegates.glTexCoord4i(s, t, r, q);
        }
        public static void glTexCoord4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4iv(System.IntPtr v)
        {
            Delegates.glTexCoord4iv(v);
        }
        public static void glTexCoord4iv(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q)
        {
            Delegates.glTexCoord4s(s, t, r, q);
        }
        public static void glTexCoord4sv(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoord4sv(System.IntPtr v)
        {
            Delegates.glTexCoord4sv(v);
        }
        public static void glTexCoord4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoord4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glTexCoordPointer(size, type, stride, pointer);
        }
        public static void glTexCoordPointer(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointer(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, System.IntPtr pointer)
        {
            Delegates.glTexCoordPointerEXT(size, type, stride, count, pointer);
        }
        public static void glTexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glTexCoordPointerEXT(size, type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexCoordPointerListIBM(GLint size, GLenum type, GLint stride, System.IntPtr pointer, GLint ptrstride)
        {
            Delegates.glTexCoordPointerListIBM(size, type, stride, pointer, ptrstride);
        }
        public static void glTexCoordPointervINTEL(GLint size, GLenum type, System.IntPtr pointer)
        {
            Delegates.glTexCoordPointervINTEL(size, type, pointer);
        }
        public static void glTexEnvf(GLenum target, GLenum pname, GLfloat param)
        {
            Delegates.glTexEnvf(target, pname, param);
        }
        public static void glTexEnvfv(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glTexEnvfv(target, pname, @params);
        }
        public static void glTexEnvfv(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexEnvfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexEnvfv(GLenum target, GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexEnvfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexEnvi(GLenum target, GLenum pname, GLint param)
        {
            Delegates.glTexEnvi(target, pname, param);
        }
        public static void glTexEnviv(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glTexEnviv(target, pname, @params);
        }
        public static void glTexEnviv(GLenum target, GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexEnviv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexEnviv(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexEnviv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, GLfloat[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glTexFilterFuncSGIS(target, filter, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, System.IntPtr weights)
        {
            Delegates.glTexFilterFuncSGIS(target, filter, n, weights);
        }
        public static void glTexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, ref GLfloat weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glTexFilterFuncSGIS(target, filter, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexGend(GLenum coord, GLenum pname, GLdouble param)
        {
            Delegates.glTexGend(coord, pname, param);
        }
        public static void glTexGendv(GLenum coord, GLenum pname, System.IntPtr @params)
        {
            Delegates.glTexGendv(coord, pname, @params);
        }
        public static void glTexGendv(GLenum coord, GLenum pname, GLdouble[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexGendv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexGendv(GLenum coord, GLenum pname, ref GLdouble @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexGendv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexGenf(GLenum coord, GLenum pname, GLfloat param)
        {
            Delegates.glTexGenf(coord, pname, param);
        }
        public static void glTexGenfv(GLenum coord, GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexGenfv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexGenfv(GLenum coord, GLenum pname, System.IntPtr @params)
        {
            Delegates.glTexGenfv(coord, pname, @params);
        }
        public static void glTexGenfv(GLenum coord, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexGenfv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexGeni(GLenum coord, GLenum pname, GLint param)
        {
            Delegates.glTexGeni(coord, pname, param);
        }
        public static void glTexGeniv(GLenum coord, GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexGeniv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexGeniv(GLenum coord, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexGeniv(coord, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexGeniv(GLenum coord, GLenum pname, System.IntPtr @params)
        {
            Delegates.glTexGeniv(coord, pname, @params);
        }
        public static void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, System.IntPtr pixels)
        {
            Delegates.glTexImage1D(target, level, internalformat, width, border, format, type, pixels);
        }
        public static void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage1D(target, level, internalformat, width, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, System.IntPtr pixels)
        {
            Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, pixels);
        }
        public static void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage2D(target, level, internalformat, width, height, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, System.IntPtr pixels)
        {
            Delegates.glTexImage3D(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        public static void glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, System.IntPtr pixels)
        {
            Delegates.glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, pixels);
        }
        public static void glTexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage3DEXT(target, level, internalformat, width, height, depth, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, System.IntPtr pixels)
        {
            Delegates.glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
        }
        public static void glTexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexImage4DSGIS(target, level, internalformat, width, height, depth, size4d, border, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexParameterf(GLenum target, GLenum pname, GLfloat param)
        {
            Delegates.glTexParameterf(target, pname, param);
        }
        public static void glTexParameterfv(GLenum target, GLenum pname, ref GLfloat @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexParameterfv(GLenum target, GLenum pname, GLfloat[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexParameterfv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexParameterfv(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glTexParameterfv(target, pname, @params);
        }
        public static void glTexParameteri(GLenum target, GLenum pname, GLint param)
        {
            Delegates.glTexParameteri(target, pname, param);
        }
        public static void glTexParameterIivEXT(GLenum target, GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexParameterIivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexParameterIivEXT(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glTexParameterIivEXT(target, pname, @params);
        }
        public static void glTexParameterIivEXT(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexParameterIivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexParameterIuivEXT(GLenum target, GLenum pname, GLuint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexParameterIuivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexParameterIuivEXT(GLenum target, GLenum pname, ref GLuint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexParameterIuivEXT(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexParameterIuivEXT(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glTexParameterIuivEXT(target, pname, @params);
        }
        public static void glTexParameteriv(GLenum target, GLenum pname, ref GLint @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexParameteriv(GLenum target, GLenum pname, GLint[] @params)
        {
            GCHandle h0 = GCHandle.Alloc(@params, GCHandleType.Pinned);
            try
            {
                Delegates.glTexParameteriv(target, pname, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexParameteriv(GLenum target, GLenum pname, System.IntPtr @params)
        {
            Delegates.glTexParameteriv(target, pname, @params);
        }
        public static void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, System.IntPtr pixels)
        {
            Delegates.glTexSubImage1D(target, level, xoffset, width, format, type, pixels);
        }
        public static void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage1D(target, level, xoffset, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage1DEXT(target, level, xoffset, width, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, System.IntPtr pixels)
        {
            Delegates.glTexSubImage1DEXT(target, level, xoffset, width, format, type, pixels);
        }
        public static void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr pixels)
        {
            Delegates.glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        public static void glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr pixels)
        {
            Delegates.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, pixels);
        }
        public static void glTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage2DEXT(target, level, xoffset, yoffset, width, height, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, System.IntPtr pixels)
        {
            Delegates.glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        public static void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, System.IntPtr pixels)
        {
            Delegates.glTexSubImage3DEXT(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
        }
        public static void glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, object pixels)
        {
            GCHandle h0 = GCHandle.Alloc(pixels, GCHandleType.Pinned);
            try
            {
                Delegates.glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, System.IntPtr pixels)
        {
            Delegates.glTexSubImage4DSGIS(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
        }
        public static void glTextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
        {
            Delegates.glTextureColorMaskSGIS(red, green, blue, alpha);
        }
        public static void glTextureLightEXT(GLenum pname)
        {
            Delegates.glTextureLightEXT(pname);
        }
        public static void glTextureMaterialEXT(GLenum face, GLenum mode)
        {
            Delegates.glTextureMaterialEXT(face, mode);
        }
        public static void glTextureNormalEXT(GLenum mode)
        {
            Delegates.glTextureNormalEXT(mode);
        }
        public static void glTrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform)
        {
            Delegates.glTrackMatrixNV(target, address, matrix, transform);
        }
        public static void glTransformFeedbackAttribsNV(GLuint count, ref GLint attribs, GLenum bufferMode)
        {
            GCHandle h0 = GCHandle.Alloc(attribs, GCHandleType.Pinned);
            try
            {
                Delegates.glTransformFeedbackAttribsNV(count, h0.AddrOfPinnedObject(), bufferMode);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTransformFeedbackAttribsNV(GLuint count, System.IntPtr attribs, GLenum bufferMode)
        {
            Delegates.glTransformFeedbackAttribsNV(count, attribs, bufferMode);
        }
        public static void glTransformFeedbackAttribsNV(GLuint count, GLint[] attribs, GLenum bufferMode)
        {
            GCHandle h0 = GCHandle.Alloc(attribs, GCHandleType.Pinned);
            try
            {
                Delegates.glTransformFeedbackAttribsNV(count, h0.AddrOfPinnedObject(), bufferMode);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, System.IntPtr locations, GLenum bufferMode)
        {
            Delegates.glTransformFeedbackVaryingsNV(program, count, locations, bufferMode);
        }
        public static void glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, GLint[] locations, GLenum bufferMode)
        {
            GCHandle h0 = GCHandle.Alloc(locations, GCHandleType.Pinned);
            try
            {
                Delegates.glTransformFeedbackVaryingsNV(program, count, h0.AddrOfPinnedObject(), bufferMode);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTransformFeedbackVaryingsNV(GLuint program, GLsizei count, ref GLint locations, GLenum bufferMode)
        {
            GCHandle h0 = GCHandle.Alloc(locations, GCHandleType.Pinned);
            try
            {
                Delegates.glTransformFeedbackVaryingsNV(program, count, h0.AddrOfPinnedObject(), bufferMode);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glTranslated(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glTranslated(x, y, z);
        }
        public static void glTranslatef(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glTranslatef(x, y, z);
        }
        public static void glUniform1f(GLint location, GLfloat v0)
        {
            Delegates.glUniform1f(location, v0);
        }
        public static void glUniform1fARB(GLint location, GLfloat v0)
        {
            Delegates.glUniform1fARB(location, v0);
        }
        public static void glUniform1fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform1fv(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform1fv(location, count, value);
        }
        public static void glUniform1fv(GLint location, GLsizei count, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform1fvARB(GLint location, GLsizei count, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform1fvARB(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform1fvARB(location, count, value);
        }
        public static void glUniform1fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform1i(GLint location, GLint v0)
        {
            Delegates.glUniform1i(location, v0);
        }
        public static void glUniform1iARB(GLint location, GLint v0)
        {
            Delegates.glUniform1iARB(location, v0);
        }
        public static void glUniform1iv(GLint location, GLsizei count, ref GLint value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform1iv(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform1iv(location, count, value);
        }
        public static void glUniform1iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform1ivARB(GLint location, GLsizei count, ref GLint value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform1ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform1ivARB(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform1ivARB(location, count, value);
        }
        public static void glUniform1uiEXT(GLint location, GLuint v0)
        {
            Delegates.glUniform1uiEXT(location, v0);
        }
        public static void glUniform1uivEXT(GLint location, GLsizei count, GLuint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1uivEXT(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform1uivEXT(GLint location, GLsizei count, ref GLuint value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform1uivEXT(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform1uivEXT(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform1uivEXT(location, count, value);
        }
        public static void glUniform2f(GLint location, GLfloat v0, GLfloat v1)
        {
            Delegates.glUniform2f(location, v0, v1);
        }
        public static void glUniform2fARB(GLint location, GLfloat v0, GLfloat v1)
        {
            Delegates.glUniform2fARB(location, v0, v1);
        }
        public static void glUniform2fv(GLint location, GLsizei count, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform2fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform2fv(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform2fv(location, count, value);
        }
        public static void glUniform2fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform2fvARB(GLint location, GLsizei count, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform2fvARB(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform2fvARB(location, count, value);
        }
        public static void glUniform2i(GLint location, GLint v0, GLint v1)
        {
            Delegates.glUniform2i(location, v0, v1);
        }
        public static void glUniform2iARB(GLint location, GLint v0, GLint v1)
        {
            Delegates.glUniform2iARB(location, v0, v1);
        }
        public static void glUniform2iv(GLint location, GLsizei count, ref GLint value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform2iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform2iv(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform2iv(location, count, value);
        }
        public static void glUniform2ivARB(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform2ivARB(location, count, value);
        }
        public static void glUniform2ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform2ivARB(GLint location, GLsizei count, ref GLint value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform2uiEXT(GLint location, GLuint v0, GLuint v1)
        {
            Delegates.glUniform2uiEXT(location, v0, v1);
        }
        public static void glUniform2uivEXT(GLint location, GLsizei count, ref GLuint value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2uivEXT(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform2uivEXT(GLint location, GLsizei count, GLuint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform2uivEXT(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform2uivEXT(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform2uivEXT(location, count, value);
        }
        public static void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
        {
            Delegates.glUniform3f(location, v0, v1, v2);
        }
        public static void glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
        {
            Delegates.glUniform3fARB(location, v0, v1, v2);
        }
        public static void glUniform3fv(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform3fv(location, count, value);
        }
        public static void glUniform3fv(GLint location, GLsizei count, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform3fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform3fvARB(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform3fvARB(location, count, value);
        }
        public static void glUniform3fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform3fvARB(GLint location, GLsizei count, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
        {
            Delegates.glUniform3i(location, v0, v1, v2);
        }
        public static void glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2)
        {
            Delegates.glUniform3iARB(location, v0, v1, v2);
        }
        public static void glUniform3iv(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform3iv(location, count, value);
        }
        public static void glUniform3iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform3iv(GLint location, GLsizei count, ref GLint value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform3ivARB(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform3ivARB(location, count, value);
        }
        public static void glUniform3ivARB(GLint location, GLsizei count, ref GLint value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform3ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2)
        {
            Delegates.glUniform3uiEXT(location, v0, v1, v2);
        }
        public static void glUniform3uivEXT(GLint location, GLsizei count, ref GLuint value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3uivEXT(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform3uivEXT(GLint location, GLsizei count, GLuint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform3uivEXT(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform3uivEXT(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform3uivEXT(location, count, value);
        }
        public static void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
        {
            Delegates.glUniform4f(location, v0, v1, v2, v3);
        }
        public static void glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
        {
            Delegates.glUniform4fARB(location, v0, v1, v2, v3);
        }
        public static void glUniform4fv(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform4fv(location, count, value);
        }
        public static void glUniform4fv(GLint location, GLsizei count, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform4fv(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4fv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform4fvARB(GLint location, GLsizei count, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform4fvARB(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform4fvARB(location, count, value);
        }
        public static void glUniform4fvARB(GLint location, GLsizei count, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4fvARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
        {
            Delegates.glUniform4i(location, v0, v1, v2, v3);
        }
        public static void glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
        {
            Delegates.glUniform4iARB(location, v0, v1, v2, v3);
        }
        public static void glUniform4iv(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform4iv(location, count, value);
        }
        public static void glUniform4iv(GLint location, GLsizei count, ref GLint value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform4iv(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4iv(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform4ivARB(GLint location, GLsizei count, GLint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform4ivARB(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform4ivARB(location, count, value);
        }
        public static void glUniform4ivARB(GLint location, GLsizei count, ref GLint value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4ivARB(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
        {
            Delegates.glUniform4uiEXT(location, v0, v1, v2, v3);
        }
        public static void glUniform4uivEXT(GLint location, GLsizei count, System.IntPtr value)
        {
            Delegates.glUniform4uivEXT(location, count, value);
        }
        public static void glUniform4uivEXT(GLint location, GLsizei count, ref GLuint value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4uivEXT(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniform4uivEXT(GLint location, GLsizei count, GLuint[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniform4uivEXT(location, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformBufferEXT(GLuint program, GLint location, GLuint buffer)
        {
            Delegates.glUniformBufferEXT(program, location, buffer);
        }
        public static void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix2fv(location, count, transpose, value);
        }
        public static void glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2fvARB(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix2fvARB(location, count, transpose, value);
        }
        public static void glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2fvARB(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2x3fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2x3fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix2x3fv(location, count, transpose, value);
        }
        public static void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix2x4fv(location, count, transpose, value);
        }
        public static void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2x4fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix2x4fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix3fv(location, count, transpose, value);
        }
        public static void glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3fvARB(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix3fvARB(location, count, transpose, value);
        }
        public static void glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3fvARB(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix3x2fv(location, count, transpose, value);
        }
        public static void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3x2fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3x2fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3x4fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix3x4fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix3x4fv(location, count, transpose, value);
        }
        public static void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix4fv(location, count, transpose, value);
        }
        public static void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix4fvARB(location, count, transpose, value);
        }
        public static void glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4fvARB(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4fvARB(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix4x2fv(location, count, transpose, value);
        }
        public static void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4x2fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4x2fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat[] value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4x3fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value)
        {
            Delegates.glUniformMatrix4x3fv(location, count, transpose, value);
        }
        public static void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, ref GLfloat value)
        {
            GCHandle h0 = GCHandle.Alloc(value, GCHandleType.Pinned);
            try
            {
                Delegates.glUniformMatrix4x3fv(location, count, transpose, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUnlockArraysEXT()
        {
            Delegates.glUnlockArraysEXT();
        }
        public static GLboolean glUnmapBuffer(GLenum target)
        {
            return Delegates.glUnmapBuffer(target);
        }
        public static GLboolean glUnmapBufferARB(GLenum target)
        {
            return Delegates.glUnmapBufferARB(target);
        }
        public static void glUnmapObjectBufferATI(GLuint buffer)
        {
            Delegates.glUnmapObjectBufferATI(buffer);
        }
        public static void glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, System.IntPtr pointer, GLenum preserve)
        {
            Delegates.glUpdateObjectBufferATI(buffer, offset, size, pointer, preserve);
        }
        public static void glUpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, object pointer, GLenum preserve)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glUpdateObjectBufferATI(buffer, offset, size, h0.AddrOfPinnedObject(), preserve);
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glUseProgram(GLuint program)
        {
            Delegates.glUseProgram(program);
        }
        public static void glUseProgramObjectARB(GLhandleARB programObj)
        {
            Delegates.glUseProgramObjectARB(programObj);
        }
        public static void glValidateProgram(GLuint program)
        {
            Delegates.glValidateProgram(program);
        }
        public static void glValidateProgramARB(GLhandleARB programObj)
        {
            Delegates.glValidateProgramARB(programObj);
        }
        public static void glVariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)
        {
            Delegates.glVariantArrayObjectATI(id, type, stride, buffer, offset);
        }
        public static void glVariantbvEXT(GLuint id, ref GLbyte addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantbvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVariantbvEXT(GLuint id, GLbyte[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantbvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVariantbvEXT(GLuint id, System.IntPtr addr)
        {
            Delegates.glVariantbvEXT(id, addr);
        }
        public static void glVariantdvEXT(GLuint id, ref GLdouble addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantdvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVariantdvEXT(GLuint id, GLdouble[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantdvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVariantdvEXT(GLuint id, System.IntPtr addr)
        {
            Delegates.glVariantdvEXT(id, addr);
        }
        public static void glVariantfvEXT(GLuint id, System.IntPtr addr)
        {
            Delegates.glVariantfvEXT(id, addr);
        }
        public static void glVariantfvEXT(GLuint id, GLfloat[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantfvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVariantfvEXT(GLuint id, ref GLfloat addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantfvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVariantivEXT(GLuint id, ref GLint addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantivEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVariantivEXT(GLuint id, GLint[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantivEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVariantivEXT(GLuint id, System.IntPtr addr)
        {
            Delegates.glVariantivEXT(id, addr);
        }
        public static void glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, System.IntPtr addr)
        {
            Delegates.glVariantPointerEXT(id, type, stride, addr);
        }
        public static void glVariantPointerEXT(GLuint id, GLenum type, GLuint stride, object addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantPointerEXT(id, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVariantsvEXT(GLuint id, ref GLshort addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantsvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVariantsvEXT(GLuint id, GLshort[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantsvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVariantsvEXT(GLuint id, System.IntPtr addr)
        {
            Delegates.glVariantsvEXT(id, addr);
        }
        public static void glVariantubvEXT(GLuint id, ref GLubyte addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantubvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVariantubvEXT(GLuint id, GLubyte[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantubvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVariantubvEXT(GLuint id, System.IntPtr addr)
        {
            Delegates.glVariantubvEXT(id, addr);
        }
        public static void glVariantuivEXT(GLuint id, System.IntPtr addr)
        {
            Delegates.glVariantuivEXT(id, addr);
        }
        public static void glVariantuivEXT(GLuint id, GLuint[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantuivEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVariantuivEXT(GLuint id, ref GLuint addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantuivEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVariantusvEXT(GLuint id, System.IntPtr addr)
        {
            Delegates.glVariantusvEXT(id, addr);
        }
        public static void glVariantusvEXT(GLuint id, GLushort[] addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantusvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVariantusvEXT(GLuint id, ref GLushort addr)
        {
            GCHandle h0 = GCHandle.Alloc(addr, GCHandleType.Pinned);
            try
            {
                Delegates.glVariantusvEXT(id, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex2d(GLdouble x, GLdouble y)
        {
            Delegates.glVertex2d(x, y);
        }
        public static void glVertex2dv(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex2dv(System.IntPtr v)
        {
            Delegates.glVertex2dv(v);
        }
        public static void glVertex2f(GLfloat x, GLfloat y)
        {
            Delegates.glVertex2f(x, y);
        }
        public static void glVertex2fv(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex2fv(System.IntPtr v)
        {
            Delegates.glVertex2fv(v);
        }
        public static void glVertex2hNV(GLhalfNV x, GLhalfNV y)
        {
            Delegates.glVertex2hNV(x, y);
        }
        public static void glVertex2hvNV(System.IntPtr v)
        {
            Delegates.glVertex2hvNV(v);
        }
        public static void glVertex2hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex2hvNV(ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex2i(GLint x, GLint y)
        {
            Delegates.glVertex2i(x, y);
        }
        public static void glVertex2iv(System.IntPtr v)
        {
            Delegates.glVertex2iv(v);
        }
        public static void glVertex2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex2iv(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex2s(GLshort x, GLshort y)
        {
            Delegates.glVertex2s(x, y);
        }
        public static void glVertex2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex2sv(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex2sv(System.IntPtr v)
        {
            Delegates.glVertex2sv(v);
        }
        public static void glVertex3d(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glVertex3d(x, y, z);
        }
        public static void glVertex3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex3dv(System.IntPtr v)
        {
            Delegates.glVertex3dv(v);
        }
        public static void glVertex3dv(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex3f(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glVertex3f(x, y, z);
        }
        public static void glVertex3fv(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex3fv(System.IntPtr v)
        {
            Delegates.glVertex3fv(v);
        }
        public static void glVertex3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z)
        {
            Delegates.glVertex3hNV(x, y, z);
        }
        public static void glVertex3hvNV(System.IntPtr v)
        {
            Delegates.glVertex3hvNV(v);
        }
        public static void glVertex3hvNV(ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex3hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex3i(GLint x, GLint y, GLint z)
        {
            Delegates.glVertex3i(x, y, z);
        }
        public static void glVertex3iv(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex3iv(System.IntPtr v)
        {
            Delegates.glVertex3iv(v);
        }
        public static void glVertex3s(GLshort x, GLshort y, GLshort z)
        {
            Delegates.glVertex3s(x, y, z);
        }
        public static void glVertex3sv(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex3sv(System.IntPtr v)
        {
            Delegates.glVertex3sv(v);
        }
        public static void glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glVertex4d(x, y, z, w);
        }
        public static void glVertex4dv(System.IntPtr v)
        {
            Delegates.glVertex4dv(v);
        }
        public static void glVertex4dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex4dv(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glVertex4f(x, y, z, w);
        }
        public static void glVertex4fv(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex4fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex4fv(System.IntPtr v)
        {
            Delegates.glVertex4fv(v);
        }
        public static void glVertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
        {
            Delegates.glVertex4hNV(x, y, z, w);
        }
        public static void glVertex4hvNV(System.IntPtr v)
        {
            Delegates.glVertex4hvNV(v);
        }
        public static void glVertex4hvNV(GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex4hvNV(ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4hvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex4i(GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glVertex4i(x, y, z, w);
        }
        public static void glVertex4iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex4iv(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex4iv(System.IntPtr v)
        {
            Delegates.glVertex4iv(v);
        }
        public static void glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glVertex4s(x, y, z, w);
        }
        public static void glVertex4sv(System.IntPtr v)
        {
            Delegates.glVertex4sv(v);
        }
        public static void glVertex4sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertex4sv(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertex4sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexArrayParameteriAPPLE(GLenum pname, GLint param)
        {
            Delegates.glVertexArrayParameteriAPPLE(pname, param);
        }
        public static void glVertexArrayRangeAPPLE(GLsizei length, [In, Out()] System.IntPtr pointer)
        {
            Delegates.glVertexArrayRangeAPPLE(length, pointer);
        }
        public static void glVertexArrayRangeAPPLE(GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexArrayRangeAPPLE(length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexArrayRangeNV(GLsizei length, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexArrayRangeNV(length, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexArrayRangeNV(GLsizei length, System.IntPtr pointer)
        {
            Delegates.glVertexArrayRangeNV(length, pointer);
        }
        public static void glVertexAttrib1d(GLuint index, GLdouble x)
        {
            Delegates.glVertexAttrib1d(index, x);
        }
        public static void glVertexAttrib1dARB(GLuint index, GLdouble x)
        {
            Delegates.glVertexAttrib1dARB(index, x);
        }
        public static void glVertexAttrib1dNV(GLuint index, GLdouble x)
        {
            Delegates.glVertexAttrib1dNV(index, x);
        }
        public static void glVertexAttrib1dv(GLuint index, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1dv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1dv(index, v);
        }
        public static void glVertexAttrib1dvARB(GLuint index, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1dvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1dvARB(index, v);
        }
        public static void glVertexAttrib1dvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1dvNV(index, v);
        }
        public static void glVertexAttrib1dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1dvNV(GLuint index, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1f(GLuint index, GLfloat x)
        {
            Delegates.glVertexAttrib1f(index, x);
        }
        public static void glVertexAttrib1fARB(GLuint index, GLfloat x)
        {
            Delegates.glVertexAttrib1fARB(index, x);
        }
        public static void glVertexAttrib1fNV(GLuint index, GLfloat x)
        {
            Delegates.glVertexAttrib1fNV(index, x);
        }
        public static void glVertexAttrib1fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1fv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1fv(index, v);
        }
        public static void glVertexAttrib1fv(GLuint index, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1fvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1fvARB(index, v);
        }
        public static void glVertexAttrib1fvARB(GLuint index, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1fvNV(GLuint index, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1fvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1fvNV(index, v);
        }
        public static void glVertexAttrib1hNV(GLuint index, GLhalfNV x)
        {
            Delegates.glVertexAttrib1hNV(index, x);
        }
        public static void glVertexAttrib1hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1hvNV(GLuint index, ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1hvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1hvNV(index, v);
        }
        public static void glVertexAttrib1s(GLuint index, GLshort x)
        {
            Delegates.glVertexAttrib1s(index, x);
        }
        public static void glVertexAttrib1sARB(GLuint index, GLshort x)
        {
            Delegates.glVertexAttrib1sARB(index, x);
        }
        public static void glVertexAttrib1sNV(GLuint index, GLshort x)
        {
            Delegates.glVertexAttrib1sNV(index, x);
        }
        public static void glVertexAttrib1sv(GLuint index, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1sv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1sv(index, v);
        }
        public static void glVertexAttrib1svARB(GLuint index, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1svARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1svARB(index, v);
        }
        public static void glVertexAttrib1svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1svNV(GLuint index, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib1svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib1svNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib1svNV(index, v);
        }
        public static void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)
        {
            Delegates.glVertexAttrib2d(index, x, y);
        }
        public static void glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y)
        {
            Delegates.glVertexAttrib2dARB(index, x, y);
        }
        public static void glVertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y)
        {
            Delegates.glVertexAttrib2dNV(index, x, y);
        }
        public static void glVertexAttrib2dv(GLuint index, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2dv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2dv(index, v);
        }
        public static void glVertexAttrib2dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2dvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2dvARB(index, v);
        }
        public static void glVertexAttrib2dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2dvARB(GLuint index, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2dvNV(GLuint index, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2dvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2dvNV(index, v);
        }
        public static void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)
        {
            Delegates.glVertexAttrib2f(index, x, y);
        }
        public static void glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y)
        {
            Delegates.glVertexAttrib2fARB(index, x, y);
        }
        public static void glVertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y)
        {
            Delegates.glVertexAttrib2fNV(index, x, y);
        }
        public static void glVertexAttrib2fv(GLuint index, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2fv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2fv(index, v);
        }
        public static void glVertexAttrib2fvARB(GLuint index, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2fvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2fvARB(index, v);
        }
        public static void glVertexAttrib2fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2fvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2fvNV(index, v);
        }
        public static void glVertexAttrib2fvNV(GLuint index, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y)
        {
            Delegates.glVertexAttrib2hNV(index, x, y);
        }
        public static void glVertexAttrib2hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2hvNV(GLuint index, ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2hvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2hvNV(index, v);
        }
        public static void glVertexAttrib2s(GLuint index, GLshort x, GLshort y)
        {
            Delegates.glVertexAttrib2s(index, x, y);
        }
        public static void glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y)
        {
            Delegates.glVertexAttrib2sARB(index, x, y);
        }
        public static void glVertexAttrib2sNV(GLuint index, GLshort x, GLshort y)
        {
            Delegates.glVertexAttrib2sNV(index, x, y);
        }
        public static void glVertexAttrib2sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2sv(GLuint index, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2sv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2sv(index, v);
        }
        public static void glVertexAttrib2svARB(GLuint index, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2svARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2svARB(index, v);
        }
        public static void glVertexAttrib2svNV(GLuint index, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib2svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib2svNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib2svNV(index, v);
        }
        public static void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glVertexAttrib3d(index, x, y, z);
        }
        public static void glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glVertexAttrib3dARB(index, x, y, z);
        }
        public static void glVertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glVertexAttrib3dNV(index, x, y, z);
        }
        public static void glVertexAttrib3dv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3dv(index, v);
        }
        public static void glVertexAttrib3dv(GLuint index, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib3dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib3dvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3dvARB(index, v);
        }
        public static void glVertexAttrib3dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib3dvARB(GLuint index, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib3dvNV(GLuint index, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib3dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib3dvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3dvNV(index, v);
        }
        public static void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glVertexAttrib3f(index, x, y, z);
        }
        public static void glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glVertexAttrib3fARB(index, x, y, z);
        }
        public static void glVertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glVertexAttrib3fNV(index, x, y, z);
        }
        public static void glVertexAttrib3fv(GLuint index, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib3fv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3fv(index, v);
        }
        public static void glVertexAttrib3fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib3fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib3fvARB(GLuint index, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib3fvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3fvARB(index, v);
        }
        public static void glVertexAttrib3fvNV(GLuint index, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib3fvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3fvNV(index, v);
        }
        public static void glVertexAttrib3fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)
        {
            Delegates.glVertexAttrib3hNV(index, x, y, z);
        }
        public static void glVertexAttrib3hvNV(GLuint index, ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib3hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib3hvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3hvNV(index, v);
        }
        public static void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)
        {
            Delegates.glVertexAttrib3s(index, x, y, z);
        }
        public static void glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z)
        {
            Delegates.glVertexAttrib3sARB(index, x, y, z);
        }
        public static void glVertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z)
        {
            Delegates.glVertexAttrib3sNV(index, x, y, z);
        }
        public static void glVertexAttrib3sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib3sv(GLuint index, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib3sv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3sv(index, v);
        }
        public static void glVertexAttrib3svARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3svARB(index, v);
        }
        public static void glVertexAttrib3svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib3svARB(GLuint index, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib3svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib3svNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib3svNV(index, v);
        }
        public static void glVertexAttrib3svNV(GLuint index, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib3svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4bv(GLuint index, ref GLbyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4bv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4bv(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4bv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4bv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4bv(index, v);
        }
        public static void glVertexAttrib4bvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4bvARB(index, v);
        }
        public static void glVertexAttrib4bvARB(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4bvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4bvARB(GLuint index, ref GLbyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4bvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glVertexAttrib4d(index, x, y, z, w);
        }
        public static void glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glVertexAttrib4dARB(index, x, y, z, w);
        }
        public static void glVertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glVertexAttrib4dNV(index, x, y, z, w);
        }
        public static void glVertexAttrib4dv(GLuint index, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4dv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4dv(index, v);
        }
        public static void glVertexAttrib4dv(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4dv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4dvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4dvARB(index, v);
        }
        public static void glVertexAttrib4dvARB(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4dvARB(GLuint index, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4dvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4dvNV(GLuint index, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4dvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4dvNV(index, v);
        }
        public static void glVertexAttrib4dvNV(GLuint index, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4dvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glVertexAttrib4f(index, x, y, z, w);
        }
        public static void glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glVertexAttrib4fARB(index, x, y, z, w);
        }
        public static void glVertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glVertexAttrib4fNV(index, x, y, z, w);
        }
        public static void glVertexAttrib4fv(GLuint index, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4fv(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4fv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4fv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4fv(index, v);
        }
        public static void glVertexAttrib4fvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4fvARB(index, v);
        }
        public static void glVertexAttrib4fvARB(GLuint index, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4fvARB(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4fvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4fvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4fvNV(index, v);
        }
        public static void glVertexAttrib4fvNV(GLuint index, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4fvNV(GLuint index, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4fvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)
        {
            Delegates.glVertexAttrib4hNV(index, x, y, z, w);
        }
        public static void glVertexAttrib4hvNV(GLuint index, ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4hvNV(GLuint index, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4hvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4hvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4hvNV(index, v);
        }
        public static void glVertexAttrib4iv(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4iv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4iv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4iv(index, v);
        }
        public static void glVertexAttrib4iv(GLuint index, ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4iv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4ivARB(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4ivARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4ivARB(index, v);
        }
        public static void glVertexAttrib4ivARB(GLuint index, ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4Nbv(GLuint index, ref GLbyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nbv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4Nbv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4Nbv(index, v);
        }
        public static void glVertexAttrib4Nbv(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nbv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4NbvARB(GLuint index, ref GLbyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NbvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4NbvARB(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NbvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4NbvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4NbvARB(index, v);
        }
        public static void glVertexAttrib4Niv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4Niv(index, v);
        }
        public static void glVertexAttrib4Niv(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Niv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4Niv(GLuint index, ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Niv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4NivARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4NivARB(index, v);
        }
        public static void glVertexAttrib4NivARB(GLuint index, ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4NivARB(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4Nsv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4Nsv(index, v);
        }
        public static void glVertexAttrib4Nsv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nsv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4Nsv(GLuint index, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nsv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4NsvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4NsvARB(index, v);
        }
        public static void glVertexAttrib4NsvARB(GLuint index, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NsvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4NsvARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NsvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
        {
            Delegates.glVertexAttrib4Nub(index, x, y, z, w);
        }
        public static void glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
        {
            Delegates.glVertexAttrib4NubARB(index, x, y, z, w);
        }
        public static void glVertexAttrib4Nubv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4Nubv(index, v);
        }
        public static void glVertexAttrib4Nubv(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nubv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4Nubv(GLuint index, ref GLubyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nubv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4NubvARB(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NubvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4NubvARB(GLuint index, ref GLubyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NubvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4NubvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4NubvARB(index, v);
        }
        public static void glVertexAttrib4Nuiv(GLuint index, ref GLuint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nuiv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4Nuiv(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nuiv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4Nuiv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4Nuiv(index, v);
        }
        public static void glVertexAttrib4NuivARB(GLuint index, ref GLuint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NuivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4NuivARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4NuivARB(index, v);
        }
        public static void glVertexAttrib4NuivARB(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NuivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4Nusv(GLuint index, ref GLushort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nusv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4Nusv(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4Nusv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4Nusv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4Nusv(index, v);
        }
        public static void glVertexAttrib4NusvARB(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NusvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4NusvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4NusvARB(index, v);
        }
        public static void glVertexAttrib4NusvARB(GLuint index, ref GLushort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4NusvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glVertexAttrib4s(index, x, y, z, w);
        }
        public static void glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glVertexAttrib4sARB(index, x, y, z, w);
        }
        public static void glVertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glVertexAttrib4sNV(index, x, y, z, w);
        }
        public static void glVertexAttrib4sv(GLuint index, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4sv(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4sv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4sv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4sv(index, v);
        }
        public static void glVertexAttrib4svARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4svARB(index, v);
        }
        public static void glVertexAttrib4svARB(GLuint index, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4svARB(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4svARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4svNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4svNV(index, v);
        }
        public static void glVertexAttrib4svNV(GLuint index, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4svNV(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4svNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)
        {
            Delegates.glVertexAttrib4ubNV(index, x, y, z, w);
        }
        public static void glVertexAttrib4ubv(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ubv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4ubv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4ubv(index, v);
        }
        public static void glVertexAttrib4ubv(GLuint index, ref GLubyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ubv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4ubvARB(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ubvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4ubvARB(GLuint index, ref GLubyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ubvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4ubvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4ubvARB(index, v);
        }
        public static void glVertexAttrib4ubvNV(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4ubvNV(index, v);
        }
        public static void glVertexAttrib4ubvNV(GLuint index, ref GLubyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ubvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4ubvNV(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4ubvNV(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4uiv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4uiv(index, v);
        }
        public static void glVertexAttrib4uiv(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4uiv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4uiv(GLuint index, ref GLuint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4uiv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4uivARB(GLuint index, ref GLuint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4uivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4uivARB(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4uivARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4uivARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4uivARB(index, v);
        }
        public static void glVertexAttrib4usv(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4usv(index, v);
        }
        public static void glVertexAttrib4usv(GLuint index, ref GLushort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4usv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4usv(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4usv(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4usvARB(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4usvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttrib4usvARB(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttrib4usvARB(index, v);
        }
        public static void glVertexAttrib4usvARB(GLuint index, ref GLushort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttrib4usvARB(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)
        {
            Delegates.glVertexAttribArrayObjectATI(index, size, type, normalized, stride, buffer, offset);
        }
        public static void glVertexAttribI1iEXT(GLuint index, GLint x)
        {
            Delegates.glVertexAttribI1iEXT(index, x);
        }
        public static void glVertexAttribI1ivEXT(GLuint index, ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI1ivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI1ivEXT(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI1ivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI1ivEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI1ivEXT(index, v);
        }
        public static void glVertexAttribI1uiEXT(GLuint index, GLuint x)
        {
            Delegates.glVertexAttribI1uiEXT(index, x);
        }
        public static void glVertexAttribI1uivEXT(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI1uivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI1uivEXT(GLuint index, ref GLuint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI1uivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI1uivEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI1uivEXT(index, v);
        }
        public static void glVertexAttribI2iEXT(GLuint index, GLint x, GLint y)
        {
            Delegates.glVertexAttribI2iEXT(index, x, y);
        }
        public static void glVertexAttribI2ivEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI2ivEXT(index, v);
        }
        public static void glVertexAttribI2ivEXT(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI2ivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI2ivEXT(GLuint index, ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI2ivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y)
        {
            Delegates.glVertexAttribI2uiEXT(index, x, y);
        }
        public static void glVertexAttribI2uivEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI2uivEXT(index, v);
        }
        public static void glVertexAttribI2uivEXT(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI2uivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI2uivEXT(GLuint index, ref GLuint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI2uivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z)
        {
            Delegates.glVertexAttribI3iEXT(index, x, y, z);
        }
        public static void glVertexAttribI3ivEXT(GLuint index, ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI3ivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI3ivEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI3ivEXT(index, v);
        }
        public static void glVertexAttribI3ivEXT(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI3ivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z)
        {
            Delegates.glVertexAttribI3uiEXT(index, x, y, z);
        }
        public static void glVertexAttribI3uivEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI3uivEXT(index, v);
        }
        public static void glVertexAttribI3uivEXT(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI3uivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI3uivEXT(GLuint index, ref GLuint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI3uivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI4bvEXT(GLuint index, ref GLbyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI4bvEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI4bvEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI4bvEXT(index, v);
        }
        public static void glVertexAttribI4bvEXT(GLuint index, GLbyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI4bvEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glVertexAttribI4iEXT(index, x, y, z, w);
        }
        public static void glVertexAttribI4ivEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI4ivEXT(index, v);
        }
        public static void glVertexAttribI4ivEXT(GLuint index, GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI4ivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI4ivEXT(GLuint index, ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI4ivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI4svEXT(GLuint index, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI4svEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI4svEXT(GLuint index, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI4svEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI4svEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI4svEXT(index, v);
        }
        public static void glVertexAttribI4ubvEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI4ubvEXT(index, v);
        }
        public static void glVertexAttribI4ubvEXT(GLuint index, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI4ubvEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI4ubvEXT(GLuint index, ref GLubyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI4ubvEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)
        {
            Delegates.glVertexAttribI4uiEXT(index, x, y, z, w);
        }
        public static void glVertexAttribI4uivEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI4uivEXT(index, v);
        }
        public static void glVertexAttribI4uivEXT(GLuint index, GLuint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI4uivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI4uivEXT(GLuint index, ref GLuint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI4uivEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI4usvEXT(GLuint index, ref GLushort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI4usvEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI4usvEXT(GLuint index, GLushort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribI4usvEXT(index, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribI4usvEXT(GLuint index, System.IntPtr v)
        {
            Delegates.glVertexAttribI4usvEXT(index, v);
        }
        public static void glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glVertexAttribIPointerEXT(index, size, type, stride, pointer);
        }
        public static void glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribIPointerEXT(index, size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointer(index, size, type, normalized, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glVertexAttribPointer(index, size, type, normalized, stride, pointer);
        }
        public static void glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glVertexAttribPointerARB(index, size, type, normalized, stride, pointer);
        }
        public static void glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointerARB(index, size, type, normalized, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glVertexAttribPointerNV(index, fsize, type, stride, pointer);
        }
        public static void glVertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribPointerNV(index, fsize, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs1dvNV(GLuint index, GLsizei count, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs1dvNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs1dvNV(index, count, v);
        }
        public static void glVertexAttribs1dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs1fvNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs1fvNV(index, count, v);
        }
        public static void glVertexAttribs1fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs1fvNV(GLuint index, GLsizei count, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs1hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs1hvNV(GLuint index, GLsizei n, System.IntPtr v)
        {
            Delegates.glVertexAttribs1hvNV(index, n, v);
        }
        public static void glVertexAttribs1hvNV(GLuint index, GLsizei n, ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs1svNV(GLuint index, GLsizei count, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs1svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs1svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs1svNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs1svNV(index, count, v);
        }
        public static void glVertexAttribs2dvNV(GLuint index, GLsizei count, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs2dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs2dvNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs2dvNV(index, count, v);
        }
        public static void glVertexAttribs2fvNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs2fvNV(index, count, v);
        }
        public static void glVertexAttribs2fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs2fvNV(GLuint index, GLsizei count, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs2hvNV(GLuint index, GLsizei n, System.IntPtr v)
        {
            Delegates.glVertexAttribs2hvNV(index, n, v);
        }
        public static void glVertexAttribs2hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs2hvNV(GLuint index, GLsizei n, ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs2svNV(GLuint index, GLsizei count, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs2svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs2svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs2svNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs2svNV(index, count, v);
        }
        public static void glVertexAttribs3dvNV(GLuint index, GLsizei count, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs3dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs3dvNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs3dvNV(index, count, v);
        }
        public static void glVertexAttribs3fvNV(GLuint index, GLsizei count, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs3fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs3fvNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs3fvNV(index, count, v);
        }
        public static void glVertexAttribs3hvNV(GLuint index, GLsizei n, ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs3hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs3hvNV(GLuint index, GLsizei n, System.IntPtr v)
        {
            Delegates.glVertexAttribs3hvNV(index, n, v);
        }
        public static void glVertexAttribs3svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs3svNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs3svNV(index, count, v);
        }
        public static void glVertexAttribs3svNV(GLuint index, GLsizei count, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs3svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs4dvNV(GLuint index, GLsizei count, ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs4dvNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs4dvNV(index, count, v);
        }
        public static void glVertexAttribs4dvNV(GLuint index, GLsizei count, GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4dvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs4fvNV(GLuint index, GLsizei count, ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs4fvNV(GLuint index, GLsizei count, GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4fvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs4fvNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs4fvNV(index, count, v);
        }
        public static void glVertexAttribs4hvNV(GLuint index, GLsizei n, System.IntPtr v)
        {
            Delegates.glVertexAttribs4hvNV(index, n, v);
        }
        public static void glVertexAttribs4hvNV(GLuint index, GLsizei n, GLhalfNV[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs4hvNV(GLuint index, GLsizei n, ref GLhalfNV v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4hvNV(index, n, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs4svNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs4svNV(index, count, v);
        }
        public static void glVertexAttribs4svNV(GLuint index, GLsizei count, GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs4svNV(GLuint index, GLsizei count, ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4svNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs4ubvNV(GLuint index, GLsizei count, ref GLubyte v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4ubvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs4ubvNV(GLuint index, GLsizei count, GLubyte[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexAttribs4ubvNV(index, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexAttribs4ubvNV(GLuint index, GLsizei count, System.IntPtr v)
        {
            Delegates.glVertexAttribs4ubvNV(index, count, v);
        }
        public static void glVertexBlendARB(GLint count)
        {
            Delegates.glVertexBlendARB(count);
        }
        public static void glVertexBlendEnvfATI(GLenum pname, GLfloat param)
        {
            Delegates.glVertexBlendEnvfATI(pname, param);
        }
        public static void glVertexBlendEnviATI(GLenum pname, GLint param)
        {
            Delegates.glVertexBlendEnviATI(pname, param);
        }
        public static void glVertexPointer(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointer(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexPointer(GLint size, GLenum type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glVertexPointer(size, type, stride, pointer);
        }
        public static void glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexPointerEXT(size, type, stride, count, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, System.IntPtr pointer)
        {
            Delegates.glVertexPointerEXT(size, type, stride, count, pointer);
        }
        public static void glVertexPointerListIBM(GLint size, GLenum type, GLint stride, System.IntPtr pointer, GLint ptrstride)
        {
            Delegates.glVertexPointerListIBM(size, type, stride, pointer, ptrstride);
        }
        public static void glVertexPointervINTEL(GLint size, GLenum type, System.IntPtr pointer)
        {
            Delegates.glVertexPointervINTEL(size, type, pointer);
        }
        public static void glVertexStream1dATI(GLenum stream, GLdouble x)
        {
            Delegates.glVertexStream1dATI(stream, x);
        }
        public static void glVertexStream1dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream1dvATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glVertexStream1dvATI(stream, coords);
        }
        public static void glVertexStream1dvATI(GLenum stream, ref GLdouble coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream1fATI(GLenum stream, GLfloat x)
        {
            Delegates.glVertexStream1fATI(stream, x);
        }
        public static void glVertexStream1fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream1fvATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glVertexStream1fvATI(stream, coords);
        }
        public static void glVertexStream1fvATI(GLenum stream, ref GLfloat coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream1iATI(GLenum stream, GLint x)
        {
            Delegates.glVertexStream1iATI(stream, x);
        }
        public static void glVertexStream1ivATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glVertexStream1ivATI(stream, coords);
        }
        public static void glVertexStream1ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream1ivATI(GLenum stream, ref GLint coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream1sATI(GLenum stream, GLshort x)
        {
            Delegates.glVertexStream1sATI(stream, x);
        }
        public static void glVertexStream1svATI(GLenum stream, ref GLshort coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream1svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream1svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream1svATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glVertexStream1svATI(stream, coords);
        }
        public static void glVertexStream2dATI(GLenum stream, GLdouble x, GLdouble y)
        {
            Delegates.glVertexStream2dATI(stream, x, y);
        }
        public static void glVertexStream2dvATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glVertexStream2dvATI(stream, coords);
        }
        public static void glVertexStream2dvATI(GLenum stream, ref GLdouble coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream2dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream2fATI(GLenum stream, GLfloat x, GLfloat y)
        {
            Delegates.glVertexStream2fATI(stream, x, y);
        }
        public static void glVertexStream2fvATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glVertexStream2fvATI(stream, coords);
        }
        public static void glVertexStream2fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream2fvATI(GLenum stream, ref GLfloat coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream2iATI(GLenum stream, GLint x, GLint y)
        {
            Delegates.glVertexStream2iATI(stream, x, y);
        }
        public static void glVertexStream2ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream2ivATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glVertexStream2ivATI(stream, coords);
        }
        public static void glVertexStream2ivATI(GLenum stream, ref GLint coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream2sATI(GLenum stream, GLshort x, GLshort y)
        {
            Delegates.glVertexStream2sATI(stream, x, y);
        }
        public static void glVertexStream2svATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glVertexStream2svATI(stream, coords);
        }
        public static void glVertexStream2svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream2svATI(GLenum stream, ref GLshort coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream2svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glVertexStream3dATI(stream, x, y, z);
        }
        public static void glVertexStream3dvATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glVertexStream3dvATI(stream, coords);
        }
        public static void glVertexStream3dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream3dvATI(GLenum stream, ref GLdouble coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glVertexStream3fATI(stream, x, y, z);
        }
        public static void glVertexStream3fvATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glVertexStream3fvATI(stream, coords);
        }
        public static void glVertexStream3fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream3fvATI(GLenum stream, ref GLfloat coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z)
        {
            Delegates.glVertexStream3iATI(stream, x, y, z);
        }
        public static void glVertexStream3ivATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glVertexStream3ivATI(stream, coords);
        }
        public static void glVertexStream3ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream3ivATI(GLenum stream, ref GLint coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z)
        {
            Delegates.glVertexStream3sATI(stream, x, y, z);
        }
        public static void glVertexStream3svATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glVertexStream3svATI(stream, coords);
        }
        public static void glVertexStream3svATI(GLenum stream, ref GLshort coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream3svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream3svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glVertexStream4dATI(stream, x, y, z, w);
        }
        public static void glVertexStream4dvATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glVertexStream4dvATI(stream, coords);
        }
        public static void glVertexStream4dvATI(GLenum stream, ref GLdouble coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream4dvATI(GLenum stream, GLdouble[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4dvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glVertexStream4fATI(stream, x, y, z, w);
        }
        public static void glVertexStream4fvATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glVertexStream4fvATI(stream, coords);
        }
        public static void glVertexStream4fvATI(GLenum stream, ref GLfloat coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream4fvATI(GLenum stream, GLfloat[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4fvATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glVertexStream4iATI(stream, x, y, z, w);
        }
        public static void glVertexStream4ivATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glVertexStream4ivATI(stream, coords);
        }
        public static void glVertexStream4ivATI(GLenum stream, ref GLint coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream4ivATI(GLenum stream, GLint[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4ivATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glVertexStream4sATI(stream, x, y, z, w);
        }
        public static void glVertexStream4svATI(GLenum stream, System.IntPtr coords)
        {
            Delegates.glVertexStream4svATI(stream, coords);
        }
        public static void glVertexStream4svATI(GLenum stream, GLshort[] coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexStream4svATI(GLenum stream, ref GLshort coords)
        {
            GCHandle h0 = GCHandle.Alloc(coords, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexStream4svATI(stream, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexWeightfEXT(GLfloat weight)
        {
            Delegates.glVertexWeightfEXT(weight);
        }
        public static void glVertexWeightfvEXT(ref GLfloat weight)
        {
            GCHandle h0 = GCHandle.Alloc(weight, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexWeightfvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexWeightfvEXT(GLfloat[] weight)
        {
            GCHandle h0 = GCHandle.Alloc(weight, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexWeightfvEXT(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexWeightfvEXT(System.IntPtr weight)
        {
            Delegates.glVertexWeightfvEXT(weight);
        }
        public static void glVertexWeighthNV(GLhalfNV weight)
        {
            Delegates.glVertexWeighthNV(weight);
        }
        public static void glVertexWeighthvNV(System.IntPtr weight)
        {
            Delegates.glVertexWeighthvNV(weight);
        }
        public static void glVertexWeighthvNV(GLhalfNV[] weight)
        {
            GCHandle h0 = GCHandle.Alloc(weight, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexWeighthvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexWeighthvNV(ref GLhalfNV weight)
        {
            GCHandle h0 = GCHandle.Alloc(weight, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexWeighthvNV(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glVertexWeightPointerEXT(size, type, stride, pointer);
        }
        public static void glVertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glVertexWeightPointerEXT(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
        {
            Delegates.glViewport(x, y, width, height);
        }
        public static void glWeightbvARB(GLint size, System.IntPtr weights)
        {
            Delegates.glWeightbvARB(size, weights);
        }
        public static void glWeightbvARB(GLint size, ref GLbyte weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightbvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWeightbvARB(GLint size, GLbyte[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightbvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWeightdvARB(GLint size, GLdouble[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightdvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWeightdvARB(GLint size, ref GLdouble weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightdvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWeightdvARB(GLint size, System.IntPtr weights)
        {
            Delegates.glWeightdvARB(size, weights);
        }
        public static void glWeightfvARB(GLint size, System.IntPtr weights)
        {
            Delegates.glWeightfvARB(size, weights);
        }
        public static void glWeightfvARB(GLint size, GLfloat[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightfvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWeightfvARB(GLint size, ref GLfloat weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightfvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWeightivARB(GLint size, GLint[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightivARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWeightivARB(GLint size, System.IntPtr weights)
        {
            Delegates.glWeightivARB(size, weights);
        }
        public static void glWeightivARB(GLint size, ref GLint weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightivARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWeightPointerARB(GLint size, GLenum type, GLsizei stride, System.IntPtr pointer)
        {
            Delegates.glWeightPointerARB(size, type, stride, pointer);
        }
        public static void glWeightPointerARB(GLint size, GLenum type, GLsizei stride, object pointer)
        {
            GCHandle h0 = GCHandle.Alloc(pointer, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightPointerARB(size, type, stride, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWeightsvARB(GLint size, System.IntPtr weights)
        {
            Delegates.glWeightsvARB(size, weights);
        }
        public static void glWeightsvARB(GLint size, GLshort[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightsvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWeightsvARB(GLint size, ref GLshort weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightsvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWeightubvARB(GLint size, ref GLubyte weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightubvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWeightubvARB(GLint size, GLubyte[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightubvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWeightubvARB(GLint size, System.IntPtr weights)
        {
            Delegates.glWeightubvARB(size, weights);
        }
        public static void glWeightuivARB(GLint size, GLuint[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightuivARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWeightuivARB(GLint size, ref GLuint weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightuivARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWeightuivARB(GLint size, System.IntPtr weights)
        {
            Delegates.glWeightuivARB(size, weights);
        }
        public static void glWeightusvARB(GLint size, System.IntPtr weights)
        {
            Delegates.glWeightusvARB(size, weights);
        }
        public static void glWeightusvARB(GLint size, GLushort[] weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightusvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWeightusvARB(GLint size, ref GLushort weights)
        {
            GCHandle h0 = GCHandle.Alloc(weights, GCHandleType.Pinned);
            try
            {
                Delegates.glWeightusvARB(size, h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2d(GLdouble x, GLdouble y)
        {
            Delegates.glWindowPos2d(x, y);
        }
        public static void glWindowPos2dARB(GLdouble x, GLdouble y)
        {
            Delegates.glWindowPos2dARB(x, y);
        }
        public static void glWindowPos2dMESA(GLdouble x, GLdouble y)
        {
            Delegates.glWindowPos2dMESA(x, y);
        }
        public static void glWindowPos2dv(System.IntPtr v)
        {
            Delegates.glWindowPos2dv(v);
        }
        public static void glWindowPos2dv(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2dvARB(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2dvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2dvARB(System.IntPtr v)
        {
            Delegates.glWindowPos2dvARB(v);
        }
        public static void glWindowPos2dvARB(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2dvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2dvMESA(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2dvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2dvMESA(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2dvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2dvMESA(System.IntPtr v)
        {
            Delegates.glWindowPos2dvMESA(v);
        }
        public static void glWindowPos2f(GLfloat x, GLfloat y)
        {
            Delegates.glWindowPos2f(x, y);
        }
        public static void glWindowPos2fARB(GLfloat x, GLfloat y)
        {
            Delegates.glWindowPos2fARB(x, y);
        }
        public static void glWindowPos2fMESA(GLfloat x, GLfloat y)
        {
            Delegates.glWindowPos2fMESA(x, y);
        }
        public static void glWindowPos2fv(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2fv(System.IntPtr v)
        {
            Delegates.glWindowPos2fv(v);
        }
        public static void glWindowPos2fvARB(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2fvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2fvARB(System.IntPtr v)
        {
            Delegates.glWindowPos2fvARB(v);
        }
        public static void glWindowPos2fvARB(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2fvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2fvMESA(System.IntPtr v)
        {
            Delegates.glWindowPos2fvMESA(v);
        }
        public static void glWindowPos2fvMESA(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2fvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2fvMESA(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2fvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2i(GLint x, GLint y)
        {
            Delegates.glWindowPos2i(x, y);
        }
        public static void glWindowPos2iARB(GLint x, GLint y)
        {
            Delegates.glWindowPos2iARB(x, y);
        }
        public static void glWindowPos2iMESA(GLint x, GLint y)
        {
            Delegates.glWindowPos2iMESA(x, y);
        }
        public static void glWindowPos2iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2iv(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2iv(System.IntPtr v)
        {
            Delegates.glWindowPos2iv(v);
        }
        public static void glWindowPos2ivARB(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2ivARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2ivARB(System.IntPtr v)
        {
            Delegates.glWindowPos2ivARB(v);
        }
        public static void glWindowPos2ivARB(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2ivARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2ivMESA(System.IntPtr v)
        {
            Delegates.glWindowPos2ivMESA(v);
        }
        public static void glWindowPos2ivMESA(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2ivMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2ivMESA(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2ivMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2s(GLshort x, GLshort y)
        {
            Delegates.glWindowPos2s(x, y);
        }
        public static void glWindowPos2sARB(GLshort x, GLshort y)
        {
            Delegates.glWindowPos2sARB(x, y);
        }
        public static void glWindowPos2sMESA(GLshort x, GLshort y)
        {
            Delegates.glWindowPos2sMESA(x, y);
        }
        public static void glWindowPos2sv(System.IntPtr v)
        {
            Delegates.glWindowPos2sv(v);
        }
        public static void glWindowPos2sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2sv(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2svARB(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2svARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2svARB(System.IntPtr v)
        {
            Delegates.glWindowPos2svARB(v);
        }
        public static void glWindowPos2svARB(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2svARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2svMESA(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2svMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2svMESA(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos2svMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos2svMESA(System.IntPtr v)
        {
            Delegates.glWindowPos2svMESA(v);
        }
        public static void glWindowPos3d(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glWindowPos3d(x, y, z);
        }
        public static void glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glWindowPos3dARB(x, y, z);
        }
        public static void glWindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z)
        {
            Delegates.glWindowPos3dMESA(x, y, z);
        }
        public static void glWindowPos3dv(System.IntPtr v)
        {
            Delegates.glWindowPos3dv(v);
        }
        public static void glWindowPos3dv(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3dv(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3dv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3dvARB(System.IntPtr v)
        {
            Delegates.glWindowPos3dvARB(v);
        }
        public static void glWindowPos3dvARB(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3dvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3dvARB(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3dvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3dvMESA(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3dvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3dvMESA(System.IntPtr v)
        {
            Delegates.glWindowPos3dvMESA(v);
        }
        public static void glWindowPos3dvMESA(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3dvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3f(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glWindowPos3f(x, y, z);
        }
        public static void glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glWindowPos3fARB(x, y, z);
        }
        public static void glWindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z)
        {
            Delegates.glWindowPos3fMESA(x, y, z);
        }
        public static void glWindowPos3fv(System.IntPtr v)
        {
            Delegates.glWindowPos3fv(v);
        }
        public static void glWindowPos3fv(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3fv(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3fv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3fvARB(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3fvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3fvARB(System.IntPtr v)
        {
            Delegates.glWindowPos3fvARB(v);
        }
        public static void glWindowPos3fvARB(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3fvARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3fvMESA(System.IntPtr v)
        {
            Delegates.glWindowPos3fvMESA(v);
        }
        public static void glWindowPos3fvMESA(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3fvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3fvMESA(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3fvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3i(GLint x, GLint y, GLint z)
        {
            Delegates.glWindowPos3i(x, y, z);
        }
        public static void glWindowPos3iARB(GLint x, GLint y, GLint z)
        {
            Delegates.glWindowPos3iARB(x, y, z);
        }
        public static void glWindowPos3iMESA(GLint x, GLint y, GLint z)
        {
            Delegates.glWindowPos3iMESA(x, y, z);
        }
        public static void glWindowPos3iv(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3iv(System.IntPtr v)
        {
            Delegates.glWindowPos3iv(v);
        }
        public static void glWindowPos3iv(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3iv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3ivARB(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3ivARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3ivARB(System.IntPtr v)
        {
            Delegates.glWindowPos3ivARB(v);
        }
        public static void glWindowPos3ivARB(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3ivARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3ivMESA(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3ivMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3ivMESA(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3ivMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3ivMESA(System.IntPtr v)
        {
            Delegates.glWindowPos3ivMESA(v);
        }
        public static void glWindowPos3s(GLshort x, GLshort y, GLshort z)
        {
            Delegates.glWindowPos3s(x, y, z);
        }
        public static void glWindowPos3sARB(GLshort x, GLshort y, GLshort z)
        {
            Delegates.glWindowPos3sARB(x, y, z);
        }
        public static void glWindowPos3sMESA(GLshort x, GLshort y, GLshort z)
        {
            Delegates.glWindowPos3sMESA(x, y, z);
        }
        public static void glWindowPos3sv(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3sv(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3sv(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3sv(System.IntPtr v)
        {
            Delegates.glWindowPos3sv(v);
        }
        public static void glWindowPos3svARB(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3svARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3svARB(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3svARB(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3svARB(System.IntPtr v)
        {
            Delegates.glWindowPos3svARB(v);
        }
        public static void glWindowPos3svMESA(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3svMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos3svMESA(System.IntPtr v)
        {
            Delegates.glWindowPos3svMESA(v);
        }
        public static void glWindowPos3svMESA(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos3svMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w)
        {
            Delegates.glWindowPos4dMESA(x, y, z, w);
        }
        public static void glWindowPos4dvMESA(ref GLdouble v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4dvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos4dvMESA(GLdouble[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4dvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos4dvMESA(System.IntPtr v)
        {
            Delegates.glWindowPos4dvMESA(v);
        }
        public static void glWindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
        {
            Delegates.glWindowPos4fMESA(x, y, z, w);
        }
        public static void glWindowPos4fvMESA(System.IntPtr v)
        {
            Delegates.glWindowPos4fvMESA(v);
        }
        public static void glWindowPos4fvMESA(ref GLfloat v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4fvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos4fvMESA(GLfloat[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4fvMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos4iMESA(GLint x, GLint y, GLint z, GLint w)
        {
            Delegates.glWindowPos4iMESA(x, y, z, w);
        }
        public static void glWindowPos4ivMESA(GLint[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4ivMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos4ivMESA(ref GLint v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4ivMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos4ivMESA(System.IntPtr v)
        {
            Delegates.glWindowPos4ivMESA(v);
        }
        public static void glWindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w)
        {
            Delegates.glWindowPos4sMESA(x, y, z, w);
        }
        public static void glWindowPos4svMESA(ref GLshort v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4svMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos4svMESA(GLshort[] v)
        {
            GCHandle h0 = GCHandle.Alloc(v, GCHandleType.Pinned);
            try
            {
                Delegates.glWindowPos4svMESA(h0.AddrOfPinnedObject());
            }
            finally
            {
                h0.Free();
            }
        }
        public static void glWindowPos4svMESA(System.IntPtr v)
        {
            Delegates.glWindowPos4svMESA(v);
        }
        public static void glWriteMaskEXT(GLuint res, GLuint @in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)
        {
            Delegates.glWriteMaskEXT(res, @in, outX, outY, outZ, outW);
        }
        #endregion
    }
    #endregion
    #region Delegates
    internal class Delegates
    {
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Accum(GLenum op, GLfloat value);
        public static Accum glAccum = ((Accum)(Gl.GetDelegateForExtensionMethod("glAccum", typeof(Accum)))) ?? new Accum(Imports.Accum);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ActiveStencilFaceEXT(GLenum face);
        public static ActiveStencilFaceEXT glActiveStencilFaceEXT = ((ActiveStencilFaceEXT)(Gl.GetDelegateForExtensionMethod("glActiveStencilFaceEXT", typeof(ActiveStencilFaceEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ActiveTexture(GLenum texture);
        public static ActiveTexture glActiveTexture = ((ActiveTexture)(Gl.GetDelegateForExtensionMethod("glActiveTexture", typeof(ActiveTexture)))) ?? new ActiveTexture(Imports.ActiveTexture);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ActiveTextureARB(GLenum texture);
        public static ActiveTextureARB glActiveTextureARB = ((ActiveTextureARB)(Gl.GetDelegateForExtensionMethod("glActiveTextureARB", typeof(ActiveTextureARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ActiveVaryingNV(GLuint program, string name);
        public static ActiveVaryingNV glActiveVaryingNV = ((ActiveVaryingNV)(Gl.GetDelegateForExtensionMethod("glActiveVaryingNV", typeof(ActiveVaryingNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void AlphaFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
        public static AlphaFragmentOp1ATI glAlphaFragmentOp1ATI = ((AlphaFragmentOp1ATI)(Gl.GetDelegateForExtensionMethod("glAlphaFragmentOp1ATI", typeof(AlphaFragmentOp1ATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void AlphaFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
        public static AlphaFragmentOp2ATI glAlphaFragmentOp2ATI = ((AlphaFragmentOp2ATI)(Gl.GetDelegateForExtensionMethod("glAlphaFragmentOp2ATI", typeof(AlphaFragmentOp2ATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void AlphaFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
        public static AlphaFragmentOp3ATI glAlphaFragmentOp3ATI = ((AlphaFragmentOp3ATI)(Gl.GetDelegateForExtensionMethod("glAlphaFragmentOp3ATI", typeof(AlphaFragmentOp3ATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void AlphaFunc(GLenum func, GLclampf @ref);
        public static AlphaFunc glAlphaFunc = ((AlphaFunc)(Gl.GetDelegateForExtensionMethod("glAlphaFunc", typeof(AlphaFunc)))) ?? new AlphaFunc(Imports.AlphaFunc);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ApplyTextureEXT(GLenum mode);
        public static ApplyTextureEXT glApplyTextureEXT = ((ApplyTextureEXT)(Gl.GetDelegateForExtensionMethod("glApplyTextureEXT", typeof(ApplyTextureEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean AreProgramsResidentNV(GLsizei n, System.IntPtr programs, [In, Out()] System.IntPtr residences);
        public static AreProgramsResidentNV glAreProgramsResidentNV = ((AreProgramsResidentNV)(Gl.GetDelegateForExtensionMethod("glAreProgramsResidentNV", typeof(AreProgramsResidentNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean AreTexturesResident(GLsizei n, System.IntPtr textures, [In, Out()] System.IntPtr residences);
        public static AreTexturesResident glAreTexturesResident = ((AreTexturesResident)(Gl.GetDelegateForExtensionMethod("glAreTexturesResident", typeof(AreTexturesResident)))) ?? new AreTexturesResident(Imports.AreTexturesResident);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean AreTexturesResidentEXT(GLsizei n, System.IntPtr textures, [In, Out()] System.IntPtr residences);
        public static AreTexturesResidentEXT glAreTexturesResidentEXT = ((AreTexturesResidentEXT)(Gl.GetDelegateForExtensionMethod("glAreTexturesResidentEXT", typeof(AreTexturesResidentEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ArrayElement(GLint i);
        public static ArrayElement glArrayElement = ((ArrayElement)(Gl.GetDelegateForExtensionMethod("glArrayElement", typeof(ArrayElement)))) ?? new ArrayElement(Imports.ArrayElement);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ArrayElementEXT(GLint i);
        public static ArrayElementEXT glArrayElementEXT = ((ArrayElementEXT)(Gl.GetDelegateForExtensionMethod("glArrayElementEXT", typeof(ArrayElementEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ArrayObjectATI(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
        public static ArrayObjectATI glArrayObjectATI = ((ArrayObjectATI)(Gl.GetDelegateForExtensionMethod("glArrayObjectATI", typeof(ArrayObjectATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void AsyncMarkerSGIX(GLuint marker);
        public static AsyncMarkerSGIX glAsyncMarkerSGIX = ((AsyncMarkerSGIX)(Gl.GetDelegateForExtensionMethod("glAsyncMarkerSGIX", typeof(AsyncMarkerSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void AttachObjectARB(GLhandleARB containerObj, GLhandleARB obj);
        public static AttachObjectARB glAttachObjectARB = ((AttachObjectARB)(Gl.GetDelegateForExtensionMethod("glAttachObjectARB", typeof(AttachObjectARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void AttachShader(GLuint program, GLuint shader);
        public static AttachShader glAttachShader = ((AttachShader)(Gl.GetDelegateForExtensionMethod("glAttachShader", typeof(AttachShader)))) ?? new AttachShader(Imports.AttachShader);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Begin(GLenum mode);
        public static Begin glBegin = ((Begin)(Gl.GetDelegateForExtensionMethod("glBegin", typeof(Begin)))) ?? new Begin(Imports.Begin);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BeginFragmentShaderATI();
        public static BeginFragmentShaderATI glBeginFragmentShaderATI = ((BeginFragmentShaderATI)(Gl.GetDelegateForExtensionMethod("glBeginFragmentShaderATI", typeof(BeginFragmentShaderATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BeginOcclusionQueryNV(GLuint id);
        public static BeginOcclusionQueryNV glBeginOcclusionQueryNV = ((BeginOcclusionQueryNV)(Gl.GetDelegateForExtensionMethod("glBeginOcclusionQueryNV", typeof(BeginOcclusionQueryNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BeginQuery(GLenum target, GLuint id);
        public static BeginQuery glBeginQuery = ((BeginQuery)(Gl.GetDelegateForExtensionMethod("glBeginQuery", typeof(BeginQuery)))) ?? new BeginQuery(Imports.BeginQuery);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BeginQueryARB(GLenum target, GLuint id);
        public static BeginQueryARB glBeginQueryARB = ((BeginQueryARB)(Gl.GetDelegateForExtensionMethod("glBeginQueryARB", typeof(BeginQueryARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BeginTransformFeedbackNV(GLenum primitiveMode);
        public static BeginTransformFeedbackNV glBeginTransformFeedbackNV = ((BeginTransformFeedbackNV)(Gl.GetDelegateForExtensionMethod("glBeginTransformFeedbackNV", typeof(BeginTransformFeedbackNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BeginVertexShaderEXT();
        public static BeginVertexShaderEXT glBeginVertexShaderEXT = ((BeginVertexShaderEXT)(Gl.GetDelegateForExtensionMethod("glBeginVertexShaderEXT", typeof(BeginVertexShaderEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindAttribLocation(GLuint program, GLuint index, string name);
        public static BindAttribLocation glBindAttribLocation = ((BindAttribLocation)(Gl.GetDelegateForExtensionMethod("glBindAttribLocation", typeof(BindAttribLocation)))) ?? new BindAttribLocation(Imports.BindAttribLocation);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindAttribLocationARB(GLhandleARB programObj, GLuint index, string name);
        public static BindAttribLocationARB glBindAttribLocationARB = ((BindAttribLocationARB)(Gl.GetDelegateForExtensionMethod("glBindAttribLocationARB", typeof(BindAttribLocationARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindBuffer(GLenum target, GLuint buffer);
        public static BindBuffer glBindBuffer = ((BindBuffer)(Gl.GetDelegateForExtensionMethod("glBindBuffer", typeof(BindBuffer)))) ?? new BindBuffer(Imports.BindBuffer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindBufferARB(GLenum target, GLuint buffer);
        public static BindBufferARB glBindBufferARB = ((BindBufferARB)(Gl.GetDelegateForExtensionMethod("glBindBufferARB", typeof(BindBufferARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindBufferBaseNV(GLenum target, GLuint index, GLuint buffer);
        public static BindBufferBaseNV glBindBufferBaseNV = ((BindBufferBaseNV)(Gl.GetDelegateForExtensionMethod("glBindBufferBaseNV", typeof(BindBufferBaseNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindBufferOffsetNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
        public static BindBufferOffsetNV glBindBufferOffsetNV = ((BindBufferOffsetNV)(Gl.GetDelegateForExtensionMethod("glBindBufferOffsetNV", typeof(BindBufferOffsetNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindBufferRangeNV(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
        public static BindBufferRangeNV glBindBufferRangeNV = ((BindBufferRangeNV)(Gl.GetDelegateForExtensionMethod("glBindBufferRangeNV", typeof(BindBufferRangeNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindFragDataLocationEXT(GLuint program, GLuint color, string name);
        public static BindFragDataLocationEXT glBindFragDataLocationEXT = ((BindFragDataLocationEXT)(Gl.GetDelegateForExtensionMethod("glBindFragDataLocationEXT", typeof(BindFragDataLocationEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindFragmentShaderATI(GLuint id);
        public static BindFragmentShaderATI glBindFragmentShaderATI = ((BindFragmentShaderATI)(Gl.GetDelegateForExtensionMethod("glBindFragmentShaderATI", typeof(BindFragmentShaderATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindFramebufferEXT(GLenum target, GLuint framebuffer);
        public static BindFramebufferEXT glBindFramebufferEXT = ((BindFramebufferEXT)(Gl.GetDelegateForExtensionMethod("glBindFramebufferEXT", typeof(BindFramebufferEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint BindLightParameterEXT(GLenum light, GLenum value);
        public static BindLightParameterEXT glBindLightParameterEXT = ((BindLightParameterEXT)(Gl.GetDelegateForExtensionMethod("glBindLightParameterEXT", typeof(BindLightParameterEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint BindMaterialParameterEXT(GLenum face, GLenum value);
        public static BindMaterialParameterEXT glBindMaterialParameterEXT = ((BindMaterialParameterEXT)(Gl.GetDelegateForExtensionMethod("glBindMaterialParameterEXT", typeof(BindMaterialParameterEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint BindParameterEXT(GLenum value);
        public static BindParameterEXT glBindParameterEXT = ((BindParameterEXT)(Gl.GetDelegateForExtensionMethod("glBindParameterEXT", typeof(BindParameterEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindProgramARB(GLenum target, GLuint program);
        public static BindProgramARB glBindProgramARB = ((BindProgramARB)(Gl.GetDelegateForExtensionMethod("glBindProgramARB", typeof(BindProgramARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindProgramNV(GLenum target, GLuint id);
        public static BindProgramNV glBindProgramNV = ((BindProgramNV)(Gl.GetDelegateForExtensionMethod("glBindProgramNV", typeof(BindProgramNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindRenderbufferEXT(GLenum target, GLuint renderbuffer);
        public static BindRenderbufferEXT glBindRenderbufferEXT = ((BindRenderbufferEXT)(Gl.GetDelegateForExtensionMethod("glBindRenderbufferEXT", typeof(BindRenderbufferEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint BindTexGenParameterEXT(GLenum unit, GLenum coord, GLenum value);
        public static BindTexGenParameterEXT glBindTexGenParameterEXT = ((BindTexGenParameterEXT)(Gl.GetDelegateForExtensionMethod("glBindTexGenParameterEXT", typeof(BindTexGenParameterEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindTexture(GLenum target, GLuint texture);
        public static BindTexture glBindTexture = ((BindTexture)(Gl.GetDelegateForExtensionMethod("glBindTexture", typeof(BindTexture)))) ?? new BindTexture(Imports.BindTexture);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindTextureEXT(GLenum target, GLuint texture);
        public static BindTextureEXT glBindTextureEXT = ((BindTextureEXT)(Gl.GetDelegateForExtensionMethod("glBindTextureEXT", typeof(BindTextureEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint BindTextureUnitParameterEXT(GLenum unit, GLenum value);
        public static BindTextureUnitParameterEXT glBindTextureUnitParameterEXT = ((BindTextureUnitParameterEXT)(Gl.GetDelegateForExtensionMethod("glBindTextureUnitParameterEXT", typeof(BindTextureUnitParameterEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindVertexArrayAPPLE(GLuint array);
        public static BindVertexArrayAPPLE glBindVertexArrayAPPLE = ((BindVertexArrayAPPLE)(Gl.GetDelegateForExtensionMethod("glBindVertexArrayAPPLE", typeof(BindVertexArrayAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BindVertexShaderEXT(GLuint id);
        public static BindVertexShaderEXT glBindVertexShaderEXT = ((BindVertexShaderEXT)(Gl.GetDelegateForExtensionMethod("glBindVertexShaderEXT", typeof(BindVertexShaderEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3bEXT(GLbyte bx, GLbyte by, GLbyte bz);
        public static Binormal3bEXT glBinormal3bEXT = ((Binormal3bEXT)(Gl.GetDelegateForExtensionMethod("glBinormal3bEXT", typeof(Binormal3bEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3bvEXT(System.IntPtr v);
        public static Binormal3bvEXT glBinormal3bvEXT = ((Binormal3bvEXT)(Gl.GetDelegateForExtensionMethod("glBinormal3bvEXT", typeof(Binormal3bvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3dEXT(GLdouble bx, GLdouble by, GLdouble bz);
        public static Binormal3dEXT glBinormal3dEXT = ((Binormal3dEXT)(Gl.GetDelegateForExtensionMethod("glBinormal3dEXT", typeof(Binormal3dEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3dvEXT(System.IntPtr v);
        public static Binormal3dvEXT glBinormal3dvEXT = ((Binormal3dvEXT)(Gl.GetDelegateForExtensionMethod("glBinormal3dvEXT", typeof(Binormal3dvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3fEXT(GLfloat bx, GLfloat by, GLfloat bz);
        public static Binormal3fEXT glBinormal3fEXT = ((Binormal3fEXT)(Gl.GetDelegateForExtensionMethod("glBinormal3fEXT", typeof(Binormal3fEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3fvEXT(System.IntPtr v);
        public static Binormal3fvEXT glBinormal3fvEXT = ((Binormal3fvEXT)(Gl.GetDelegateForExtensionMethod("glBinormal3fvEXT", typeof(Binormal3fvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3iEXT(GLint bx, GLint by, GLint bz);
        public static Binormal3iEXT glBinormal3iEXT = ((Binormal3iEXT)(Gl.GetDelegateForExtensionMethod("glBinormal3iEXT", typeof(Binormal3iEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3ivEXT(System.IntPtr v);
        public static Binormal3ivEXT glBinormal3ivEXT = ((Binormal3ivEXT)(Gl.GetDelegateForExtensionMethod("glBinormal3ivEXT", typeof(Binormal3ivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3sEXT(GLshort bx, GLshort by, GLshort bz);
        public static Binormal3sEXT glBinormal3sEXT = ((Binormal3sEXT)(Gl.GetDelegateForExtensionMethod("glBinormal3sEXT", typeof(Binormal3sEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Binormal3svEXT(System.IntPtr v);
        public static Binormal3svEXT glBinormal3svEXT = ((Binormal3svEXT)(Gl.GetDelegateForExtensionMethod("glBinormal3svEXT", typeof(Binormal3svEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BinormalPointerEXT(GLenum type, GLsizei stride, System.IntPtr pointer);
        public static BinormalPointerEXT glBinormalPointerEXT = ((BinormalPointerEXT)(Gl.GetDelegateForExtensionMethod("glBinormalPointerEXT", typeof(BinormalPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, System.IntPtr bitmap);
        public static Bitmap glBitmap = ((Bitmap)(Gl.GetDelegateForExtensionMethod("glBitmap", typeof(Bitmap)))) ?? new Bitmap(Imports.Bitmap);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
        public static BlendColor glBlendColor = ((BlendColor)(Gl.GetDelegateForExtensionMethod("glBlendColor", typeof(BlendColor)))) ?? new BlendColor(Imports.BlendColor);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
        public static BlendColorEXT glBlendColorEXT = ((BlendColorEXT)(Gl.GetDelegateForExtensionMethod("glBlendColorEXT", typeof(BlendColorEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendEquation(GLenum mode);
        public static BlendEquation glBlendEquation = ((BlendEquation)(Gl.GetDelegateForExtensionMethod("glBlendEquation", typeof(BlendEquation)))) ?? new BlendEquation(Imports.BlendEquation);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendEquationEXT(GLenum mode);
        public static BlendEquationEXT glBlendEquationEXT = ((BlendEquationEXT)(Gl.GetDelegateForExtensionMethod("glBlendEquationEXT", typeof(BlendEquationEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
        public static BlendEquationSeparate glBlendEquationSeparate = ((BlendEquationSeparate)(Gl.GetDelegateForExtensionMethod("glBlendEquationSeparate", typeof(BlendEquationSeparate)))) ?? new BlendEquationSeparate(Imports.BlendEquationSeparate);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha);
        public static BlendEquationSeparateEXT glBlendEquationSeparateEXT = ((BlendEquationSeparateEXT)(Gl.GetDelegateForExtensionMethod("glBlendEquationSeparateEXT", typeof(BlendEquationSeparateEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendFunc(GLenum sfactor, GLenum dfactor);
        public static BlendFunc glBlendFunc = ((BlendFunc)(Gl.GetDelegateForExtensionMethod("glBlendFunc", typeof(BlendFunc)))) ?? new BlendFunc(Imports.BlendFunc);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
        public static BlendFuncSeparate glBlendFuncSeparate = ((BlendFuncSeparate)(Gl.GetDelegateForExtensionMethod("glBlendFuncSeparate", typeof(BlendFuncSeparate)))) ?? new BlendFuncSeparate(Imports.BlendFuncSeparate);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
        public static BlendFuncSeparateEXT glBlendFuncSeparateEXT = ((BlendFuncSeparateEXT)(Gl.GetDelegateForExtensionMethod("glBlendFuncSeparateEXT", typeof(BlendFuncSeparateEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlendFuncSeparateINGR(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
        public static BlendFuncSeparateINGR glBlendFuncSeparateINGR = ((BlendFuncSeparateINGR)(Gl.GetDelegateForExtensionMethod("glBlendFuncSeparateINGR", typeof(BlendFuncSeparateINGR))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
        public static BlitFramebufferEXT glBlitFramebufferEXT = ((BlitFramebufferEXT)(Gl.GetDelegateForExtensionMethod("glBlitFramebufferEXT", typeof(BlitFramebufferEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BufferData(GLenum target, GLsizeiptr size, System.IntPtr data, GLenum usage);
        public static BufferData glBufferData = ((BufferData)(Gl.GetDelegateForExtensionMethod("glBufferData", typeof(BufferData)))) ?? new BufferData(Imports.BufferData);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BufferDataARB(GLenum target, GLsizeiptrARB size, System.IntPtr data, GLenum usage);
        public static BufferDataARB glBufferDataARB = ((BufferDataARB)(Gl.GetDelegateForExtensionMethod("glBufferDataARB", typeof(BufferDataARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BufferParameteriAPPLE(GLenum target, GLenum pname, GLint param);
        public static BufferParameteriAPPLE glBufferParameteriAPPLE = ((BufferParameteriAPPLE)(Gl.GetDelegateForExtensionMethod("glBufferParameteriAPPLE", typeof(BufferParameteriAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, System.IntPtr data);
        public static BufferSubData glBufferSubData = ((BufferSubData)(Gl.GetDelegateForExtensionMethod("glBufferSubData", typeof(BufferSubData)))) ?? new BufferSubData(Imports.BufferSubData);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void BufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, System.IntPtr data);
        public static BufferSubDataARB glBufferSubDataARB = ((BufferSubDataARB)(Gl.GetDelegateForExtensionMethod("glBufferSubDataARB", typeof(BufferSubDataARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CallList(GLuint list);
        public static CallList glCallList = ((CallList)(Gl.GetDelegateForExtensionMethod("glCallList", typeof(CallList)))) ?? new CallList(Imports.CallList);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CallLists(GLsizei n, GLenum type, System.IntPtr lists);
        public static CallLists glCallLists = ((CallLists)(Gl.GetDelegateForExtensionMethod("glCallLists", typeof(CallLists)))) ?? new CallLists(Imports.CallLists);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLenum CheckFramebufferStatusEXT(GLenum target);
        public static CheckFramebufferStatusEXT glCheckFramebufferStatusEXT = ((CheckFramebufferStatusEXT)(Gl.GetDelegateForExtensionMethod("glCheckFramebufferStatusEXT", typeof(CheckFramebufferStatusEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClampColorARB(GLenum target, GLenum clamp);
        public static ClampColorARB glClampColorARB = ((ClampColorARB)(Gl.GetDelegateForExtensionMethod("glClampColorARB", typeof(ClampColorARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Clear(GLbitfield mask);
        public static Clear glClear = ((Clear)(Gl.GetDelegateForExtensionMethod("glClear", typeof(Clear)))) ?? new Clear(Imports.Clear);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
        public static ClearAccum glClearAccum = ((ClearAccum)(Gl.GetDelegateForExtensionMethod("glClearAccum", typeof(ClearAccum)))) ?? new ClearAccum(Imports.ClearAccum);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
        public static ClearColor glClearColor = ((ClearColor)(Gl.GetDelegateForExtensionMethod("glClearColor", typeof(ClearColor)))) ?? new ClearColor(Imports.ClearColor);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClearColorIiEXT(GLint red, GLint green, GLint blue, GLint alpha);
        public static ClearColorIiEXT glClearColorIiEXT = ((ClearColorIiEXT)(Gl.GetDelegateForExtensionMethod("glClearColorIiEXT", typeof(ClearColorIiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClearColorIuiEXT(GLuint red, GLuint green, GLuint blue, GLuint alpha);
        public static ClearColorIuiEXT glClearColorIuiEXT = ((ClearColorIuiEXT)(Gl.GetDelegateForExtensionMethod("glClearColorIuiEXT", typeof(ClearColorIuiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClearDepth(GLclampd depth);
        public static ClearDepth glClearDepth = ((ClearDepth)(Gl.GetDelegateForExtensionMethod("glClearDepth", typeof(ClearDepth)))) ?? new ClearDepth(Imports.ClearDepth);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClearDepthdNV(GLdouble depth);
        public static ClearDepthdNV glClearDepthdNV = ((ClearDepthdNV)(Gl.GetDelegateForExtensionMethod("glClearDepthdNV", typeof(ClearDepthdNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClearIndex(GLfloat c);
        public static ClearIndex glClearIndex = ((ClearIndex)(Gl.GetDelegateForExtensionMethod("glClearIndex", typeof(ClearIndex)))) ?? new ClearIndex(Imports.ClearIndex);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClearStencil(GLint s);
        public static ClearStencil glClearStencil = ((ClearStencil)(Gl.GetDelegateForExtensionMethod("glClearStencil", typeof(ClearStencil)))) ?? new ClearStencil(Imports.ClearStencil);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClientActiveTexture(GLenum texture);
        public static ClientActiveTexture glClientActiveTexture = ((ClientActiveTexture)(Gl.GetDelegateForExtensionMethod("glClientActiveTexture", typeof(ClientActiveTexture)))) ?? new ClientActiveTexture(Imports.ClientActiveTexture);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClientActiveTextureARB(GLenum texture);
        public static ClientActiveTextureARB glClientActiveTextureARB = ((ClientActiveTextureARB)(Gl.GetDelegateForExtensionMethod("glClientActiveTextureARB", typeof(ClientActiveTextureARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClientActiveVertexStreamATI(GLenum stream);
        public static ClientActiveVertexStreamATI glClientActiveVertexStreamATI = ((ClientActiveVertexStreamATI)(Gl.GetDelegateForExtensionMethod("glClientActiveVertexStreamATI", typeof(ClientActiveVertexStreamATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ClipPlane(GLenum plane, System.IntPtr equation);
        public static ClipPlane glClipPlane = ((ClipPlane)(Gl.GetDelegateForExtensionMethod("glClipPlane", typeof(ClipPlane)))) ?? new ClipPlane(Imports.ClipPlane);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3b(GLbyte red, GLbyte green, GLbyte blue);
        public static Color3b glColor3b = ((Color3b)(Gl.GetDelegateForExtensionMethod("glColor3b", typeof(Color3b)))) ?? new Color3b(Imports.Color3b);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3bv(System.IntPtr v);
        public static Color3bv glColor3bv = ((Color3bv)(Gl.GetDelegateForExtensionMethod("glColor3bv", typeof(Color3bv)))) ?? new Color3bv(Imports.Color3bv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3d(GLdouble red, GLdouble green, GLdouble blue);
        public static Color3d glColor3d = ((Color3d)(Gl.GetDelegateForExtensionMethod("glColor3d", typeof(Color3d)))) ?? new Color3d(Imports.Color3d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3dv(System.IntPtr v);
        public static Color3dv glColor3dv = ((Color3dv)(Gl.GetDelegateForExtensionMethod("glColor3dv", typeof(Color3dv)))) ?? new Color3dv(Imports.Color3dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3f(GLfloat red, GLfloat green, GLfloat blue);
        public static Color3f glColor3f = ((Color3f)(Gl.GetDelegateForExtensionMethod("glColor3f", typeof(Color3f)))) ?? new Color3f(Imports.Color3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3fv(System.IntPtr v);
        public static Color3fv glColor3fv = ((Color3fv)(Gl.GetDelegateForExtensionMethod("glColor3fv", typeof(Color3fv)))) ?? new Color3fv(Imports.Color3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
        public static Color3fVertex3fSUN glColor3fVertex3fSUN = ((Color3fVertex3fSUN)(Gl.GetDelegateForExtensionMethod("glColor3fVertex3fSUN", typeof(Color3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3fVertex3fvSUN(System.IntPtr c, System.IntPtr v);
        public static Color3fVertex3fvSUN glColor3fVertex3fvSUN = ((Color3fVertex3fvSUN)(Gl.GetDelegateForExtensionMethod("glColor3fVertex3fvSUN", typeof(Color3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
        public static Color3hNV glColor3hNV = ((Color3hNV)(Gl.GetDelegateForExtensionMethod("glColor3hNV", typeof(Color3hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3hvNV(System.IntPtr v);
        public static Color3hvNV glColor3hvNV = ((Color3hvNV)(Gl.GetDelegateForExtensionMethod("glColor3hvNV", typeof(Color3hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3i(GLint red, GLint green, GLint blue);
        public static Color3i glColor3i = ((Color3i)(Gl.GetDelegateForExtensionMethod("glColor3i", typeof(Color3i)))) ?? new Color3i(Imports.Color3i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3iv(System.IntPtr v);
        public static Color3iv glColor3iv = ((Color3iv)(Gl.GetDelegateForExtensionMethod("glColor3iv", typeof(Color3iv)))) ?? new Color3iv(Imports.Color3iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3s(GLshort red, GLshort green, GLshort blue);
        public static Color3s glColor3s = ((Color3s)(Gl.GetDelegateForExtensionMethod("glColor3s", typeof(Color3s)))) ?? new Color3s(Imports.Color3s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3sv(System.IntPtr v);
        public static Color3sv glColor3sv = ((Color3sv)(Gl.GetDelegateForExtensionMethod("glColor3sv", typeof(Color3sv)))) ?? new Color3sv(Imports.Color3sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3ub(GLubyte red, GLubyte green, GLubyte blue);
        public static Color3ub glColor3ub = ((Color3ub)(Gl.GetDelegateForExtensionMethod("glColor3ub", typeof(Color3ub)))) ?? new Color3ub(Imports.Color3ub);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3ubv(System.IntPtr v);
        public static Color3ubv glColor3ubv = ((Color3ubv)(Gl.GetDelegateForExtensionMethod("glColor3ubv", typeof(Color3ubv)))) ?? new Color3ubv(Imports.Color3ubv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3ui(GLuint red, GLuint green, GLuint blue);
        public static Color3ui glColor3ui = ((Color3ui)(Gl.GetDelegateForExtensionMethod("glColor3ui", typeof(Color3ui)))) ?? new Color3ui(Imports.Color3ui);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3uiv(System.IntPtr v);
        public static Color3uiv glColor3uiv = ((Color3uiv)(Gl.GetDelegateForExtensionMethod("glColor3uiv", typeof(Color3uiv)))) ?? new Color3uiv(Imports.Color3uiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3us(GLushort red, GLushort green, GLushort blue);
        public static Color3us glColor3us = ((Color3us)(Gl.GetDelegateForExtensionMethod("glColor3us", typeof(Color3us)))) ?? new Color3us(Imports.Color3us);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color3usv(System.IntPtr v);
        public static Color3usv glColor3usv = ((Color3usv)(Gl.GetDelegateForExtensionMethod("glColor3usv", typeof(Color3usv)))) ?? new Color3usv(Imports.Color3usv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
        public static Color4b glColor4b = ((Color4b)(Gl.GetDelegateForExtensionMethod("glColor4b", typeof(Color4b)))) ?? new Color4b(Imports.Color4b);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4bv(System.IntPtr v);
        public static Color4bv glColor4bv = ((Color4bv)(Gl.GetDelegateForExtensionMethod("glColor4bv", typeof(Color4bv)))) ?? new Color4bv(Imports.Color4bv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
        public static Color4d glColor4d = ((Color4d)(Gl.GetDelegateForExtensionMethod("glColor4d", typeof(Color4d)))) ?? new Color4d(Imports.Color4d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4dv(System.IntPtr v);
        public static Color4dv glColor4dv = ((Color4dv)(Gl.GetDelegateForExtensionMethod("glColor4dv", typeof(Color4dv)))) ?? new Color4dv(Imports.Color4dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
        public static Color4f glColor4f = ((Color4f)(Gl.GetDelegateForExtensionMethod("glColor4f", typeof(Color4f)))) ?? new Color4f(Imports.Color4f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4fNormal3fVertex3fSUN(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        public static Color4fNormal3fVertex3fSUN glColor4fNormal3fVertex3fSUN = ((Color4fNormal3fVertex3fSUN)(Gl.GetDelegateForExtensionMethod("glColor4fNormal3fVertex3fSUN", typeof(Color4fNormal3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4fNormal3fVertex3fvSUN(System.IntPtr c, System.IntPtr n, System.IntPtr v);
        public static Color4fNormal3fVertex3fvSUN glColor4fNormal3fVertex3fvSUN = ((Color4fNormal3fVertex3fvSUN)(Gl.GetDelegateForExtensionMethod("glColor4fNormal3fVertex3fvSUN", typeof(Color4fNormal3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4fv(System.IntPtr v);
        public static Color4fv glColor4fv = ((Color4fv)(Gl.GetDelegateForExtensionMethod("glColor4fv", typeof(Color4fv)))) ?? new Color4fv(Imports.Color4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
        public static Color4hNV glColor4hNV = ((Color4hNV)(Gl.GetDelegateForExtensionMethod("glColor4hNV", typeof(Color4hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4hvNV(System.IntPtr v);
        public static Color4hvNV glColor4hvNV = ((Color4hvNV)(Gl.GetDelegateForExtensionMethod("glColor4hvNV", typeof(Color4hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4i(GLint red, GLint green, GLint blue, GLint alpha);
        public static Color4i glColor4i = ((Color4i)(Gl.GetDelegateForExtensionMethod("glColor4i", typeof(Color4i)))) ?? new Color4i(Imports.Color4i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4iv(System.IntPtr v);
        public static Color4iv glColor4iv = ((Color4iv)(Gl.GetDelegateForExtensionMethod("glColor4iv", typeof(Color4iv)))) ?? new Color4iv(Imports.Color4iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);
        public static Color4s glColor4s = ((Color4s)(Gl.GetDelegateForExtensionMethod("glColor4s", typeof(Color4s)))) ?? new Color4s(Imports.Color4s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4sv(System.IntPtr v);
        public static Color4sv glColor4sv = ((Color4sv)(Gl.GetDelegateForExtensionMethod("glColor4sv", typeof(Color4sv)))) ?? new Color4sv(Imports.Color4sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
        public static Color4ub glColor4ub = ((Color4ub)(Gl.GetDelegateForExtensionMethod("glColor4ub", typeof(Color4ub)))) ?? new Color4ub(Imports.Color4ub);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4ubv(System.IntPtr v);
        public static Color4ubv glColor4ubv = ((Color4ubv)(Gl.GetDelegateForExtensionMethod("glColor4ubv", typeof(Color4ubv)))) ?? new Color4ubv(Imports.Color4ubv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4ubVertex2fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
        public static Color4ubVertex2fSUN glColor4ubVertex2fSUN = ((Color4ubVertex2fSUN)(Gl.GetDelegateForExtensionMethod("glColor4ubVertex2fSUN", typeof(Color4ubVertex2fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4ubVertex2fvSUN(System.IntPtr c, System.IntPtr v);
        public static Color4ubVertex2fvSUN glColor4ubVertex2fvSUN = ((Color4ubVertex2fvSUN)(Gl.GetDelegateForExtensionMethod("glColor4ubVertex2fvSUN", typeof(Color4ubVertex2fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4ubVertex3fSUN(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
        public static Color4ubVertex3fSUN glColor4ubVertex3fSUN = ((Color4ubVertex3fSUN)(Gl.GetDelegateForExtensionMethod("glColor4ubVertex3fSUN", typeof(Color4ubVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4ubVertex3fvSUN(System.IntPtr c, System.IntPtr v);
        public static Color4ubVertex3fvSUN glColor4ubVertex3fvSUN = ((Color4ubVertex3fvSUN)(Gl.GetDelegateForExtensionMethod("glColor4ubVertex3fvSUN", typeof(Color4ubVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
        public static Color4ui glColor4ui = ((Color4ui)(Gl.GetDelegateForExtensionMethod("glColor4ui", typeof(Color4ui)))) ?? new Color4ui(Imports.Color4ui);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4uiv(System.IntPtr v);
        public static Color4uiv glColor4uiv = ((Color4uiv)(Gl.GetDelegateForExtensionMethod("glColor4uiv", typeof(Color4uiv)))) ?? new Color4uiv(Imports.Color4uiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
        public static Color4us glColor4us = ((Color4us)(Gl.GetDelegateForExtensionMethod("glColor4us", typeof(Color4us)))) ?? new Color4us(Imports.Color4us);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Color4usv(System.IntPtr v);
        public static Color4usv glColor4usv = ((Color4usv)(Gl.GetDelegateForExtensionMethod("glColor4usv", typeof(Color4usv)))) ?? new Color4usv(Imports.Color4usv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorFragmentOp1ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
        public static ColorFragmentOp1ATI glColorFragmentOp1ATI = ((ColorFragmentOp1ATI)(Gl.GetDelegateForExtensionMethod("glColorFragmentOp1ATI", typeof(ColorFragmentOp1ATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorFragmentOp2ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
        public static ColorFragmentOp2ATI glColorFragmentOp2ATI = ((ColorFragmentOp2ATI)(Gl.GetDelegateForExtensionMethod("glColorFragmentOp2ATI", typeof(ColorFragmentOp2ATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorFragmentOp3ATI(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
        public static ColorFragmentOp3ATI glColorFragmentOp3ATI = ((ColorFragmentOp3ATI)(Gl.GetDelegateForExtensionMethod("glColorFragmentOp3ATI", typeof(ColorFragmentOp3ATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
        public static ColorMask glColorMask = ((ColorMask)(Gl.GetDelegateForExtensionMethod("glColorMask", typeof(ColorMask)))) ?? new ColorMask(Imports.ColorMask);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
        public static ColorMaskIndexedEXT glColorMaskIndexedEXT = ((ColorMaskIndexedEXT)(Gl.GetDelegateForExtensionMethod("glColorMaskIndexedEXT", typeof(ColorMaskIndexedEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorMaterial(GLenum face, GLenum mode);
        public static ColorMaterial glColorMaterial = ((ColorMaterial)(Gl.GetDelegateForExtensionMethod("glColorMaterial", typeof(ColorMaterial)))) ?? new ColorMaterial(Imports.ColorMaterial);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorPointer(GLint size, GLenum type, GLsizei stride, System.IntPtr pointer);
        public static ColorPointer glColorPointer = ((ColorPointer)(Gl.GetDelegateForExtensionMethod("glColorPointer", typeof(ColorPointer)))) ?? new ColorPointer(Imports.ColorPointer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, System.IntPtr pointer);
        public static ColorPointerEXT glColorPointerEXT = ((ColorPointerEXT)(Gl.GetDelegateForExtensionMethod("glColorPointerEXT", typeof(ColorPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorPointerListIBM(GLint size, GLenum type, GLint stride, System.IntPtr pointer, GLint ptrstride);
        public static ColorPointerListIBM glColorPointerListIBM = ((ColorPointerListIBM)(Gl.GetDelegateForExtensionMethod("glColorPointerListIBM", typeof(ColorPointerListIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorPointervINTEL(GLint size, GLenum type, System.IntPtr pointer);
        public static ColorPointervINTEL glColorPointervINTEL = ((ColorPointervINTEL)(Gl.GetDelegateForExtensionMethod("glColorPointervINTEL", typeof(ColorPointervINTEL))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, System.IntPtr data);
        public static ColorSubTable glColorSubTable = ((ColorSubTable)(Gl.GetDelegateForExtensionMethod("glColorSubTable", typeof(ColorSubTable)))) ?? new ColorSubTable(Imports.ColorSubTable);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorSubTableEXT(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, System.IntPtr data);
        public static ColorSubTableEXT glColorSubTableEXT = ((ColorSubTableEXT)(Gl.GetDelegateForExtensionMethod("glColorSubTableEXT", typeof(ColorSubTableEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, System.IntPtr table);
        public static ColorTable glColorTable = ((ColorTable)(Gl.GetDelegateForExtensionMethod("glColorTable", typeof(ColorTable)))) ?? new ColorTable(Imports.ColorTable);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorTableEXT(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, System.IntPtr table);
        public static ColorTableEXT glColorTableEXT = ((ColorTableEXT)(Gl.GetDelegateForExtensionMethod("glColorTableEXT", typeof(ColorTableEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorTableParameterfv(GLenum target, GLenum pname, System.IntPtr @params);
        public static ColorTableParameterfv glColorTableParameterfv = ((ColorTableParameterfv)(Gl.GetDelegateForExtensionMethod("glColorTableParameterfv", typeof(ColorTableParameterfv)))) ?? new ColorTableParameterfv(Imports.ColorTableParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorTableParameterfvSGI(GLenum target, GLenum pname, System.IntPtr @params);
        public static ColorTableParameterfvSGI glColorTableParameterfvSGI = ((ColorTableParameterfvSGI)(Gl.GetDelegateForExtensionMethod("glColorTableParameterfvSGI", typeof(ColorTableParameterfvSGI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorTableParameteriv(GLenum target, GLenum pname, System.IntPtr @params);
        public static ColorTableParameteriv glColorTableParameteriv = ((ColorTableParameteriv)(Gl.GetDelegateForExtensionMethod("glColorTableParameteriv", typeof(ColorTableParameteriv)))) ?? new ColorTableParameteriv(Imports.ColorTableParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorTableParameterivSGI(GLenum target, GLenum pname, System.IntPtr @params);
        public static ColorTableParameterivSGI glColorTableParameterivSGI = ((ColorTableParameterivSGI)(Gl.GetDelegateForExtensionMethod("glColorTableParameterivSGI", typeof(ColorTableParameterivSGI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ColorTableSGI(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, System.IntPtr table);
        public static ColorTableSGI glColorTableSGI = ((ColorTableSGI)(Gl.GetDelegateForExtensionMethod("glColorTableSGI", typeof(ColorTableSGI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CombinerInputNV(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
        public static CombinerInputNV glCombinerInputNV = ((CombinerInputNV)(Gl.GetDelegateForExtensionMethod("glCombinerInputNV", typeof(CombinerInputNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CombinerOutputNV(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
        public static CombinerOutputNV glCombinerOutputNV = ((CombinerOutputNV)(Gl.GetDelegateForExtensionMethod("glCombinerOutputNV", typeof(CombinerOutputNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CombinerParameterfNV(GLenum pname, GLfloat param);
        public static CombinerParameterfNV glCombinerParameterfNV = ((CombinerParameterfNV)(Gl.GetDelegateForExtensionMethod("glCombinerParameterfNV", typeof(CombinerParameterfNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CombinerParameterfvNV(GLenum pname, System.IntPtr @params);
        public static CombinerParameterfvNV glCombinerParameterfvNV = ((CombinerParameterfvNV)(Gl.GetDelegateForExtensionMethod("glCombinerParameterfvNV", typeof(CombinerParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CombinerParameteriNV(GLenum pname, GLint param);
        public static CombinerParameteriNV glCombinerParameteriNV = ((CombinerParameteriNV)(Gl.GetDelegateForExtensionMethod("glCombinerParameteriNV", typeof(CombinerParameteriNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CombinerParameterivNV(GLenum pname, System.IntPtr @params);
        public static CombinerParameterivNV glCombinerParameterivNV = ((CombinerParameterivNV)(Gl.GetDelegateForExtensionMethod("glCombinerParameterivNV", typeof(CombinerParameterivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CombinerStageParameterfvNV(GLenum stage, GLenum pname, System.IntPtr @params);
        public static CombinerStageParameterfvNV glCombinerStageParameterfvNV = ((CombinerStageParameterfvNV)(Gl.GetDelegateForExtensionMethod("glCombinerStageParameterfvNV", typeof(CombinerStageParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompileShader(GLuint shader);
        public static CompileShader glCompileShader = ((CompileShader)(Gl.GetDelegateForExtensionMethod("glCompileShader", typeof(CompileShader)))) ?? new CompileShader(Imports.CompileShader);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompileShaderARB(GLhandleARB shaderObj);
        public static CompileShaderARB glCompileShaderARB = ((CompileShaderARB)(Gl.GetDelegateForExtensionMethod("glCompileShaderARB", typeof(CompileShaderARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexImage1D glCompressedTexImage1D = ((CompressedTexImage1D)(Gl.GetDelegateForExtensionMethod("glCompressedTexImage1D", typeof(CompressedTexImage1D)))) ?? new CompressedTexImage1D(Imports.CompressedTexImage1D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexImage1DARB glCompressedTexImage1DARB = ((CompressedTexImage1DARB)(Gl.GetDelegateForExtensionMethod("glCompressedTexImage1DARB", typeof(CompressedTexImage1DARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexImage2D glCompressedTexImage2D = ((CompressedTexImage2D)(Gl.GetDelegateForExtensionMethod("glCompressedTexImage2D", typeof(CompressedTexImage2D)))) ?? new CompressedTexImage2D(Imports.CompressedTexImage2D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexImage2DARB glCompressedTexImage2DARB = ((CompressedTexImage2DARB)(Gl.GetDelegateForExtensionMethod("glCompressedTexImage2DARB", typeof(CompressedTexImage2DARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexImage3D glCompressedTexImage3D = ((CompressedTexImage3D)(Gl.GetDelegateForExtensionMethod("glCompressedTexImage3D", typeof(CompressedTexImage3D)))) ?? new CompressedTexImage3D(Imports.CompressedTexImage3D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexImage3DARB glCompressedTexImage3DARB = ((CompressedTexImage3DARB)(Gl.GetDelegateForExtensionMethod("glCompressedTexImage3DARB", typeof(CompressedTexImage3DARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexSubImage1D glCompressedTexSubImage1D = ((CompressedTexSubImage1D)(Gl.GetDelegateForExtensionMethod("glCompressedTexSubImage1D", typeof(CompressedTexSubImage1D)))) ?? new CompressedTexSubImage1D(Imports.CompressedTexSubImage1D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexSubImage1DARB glCompressedTexSubImage1DARB = ((CompressedTexSubImage1DARB)(Gl.GetDelegateForExtensionMethod("glCompressedTexSubImage1DARB", typeof(CompressedTexSubImage1DARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexSubImage2D glCompressedTexSubImage2D = ((CompressedTexSubImage2D)(Gl.GetDelegateForExtensionMethod("glCompressedTexSubImage2D", typeof(CompressedTexSubImage2D)))) ?? new CompressedTexSubImage2D(Imports.CompressedTexSubImage2D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexSubImage2DARB glCompressedTexSubImage2DARB = ((CompressedTexSubImage2DARB)(Gl.GetDelegateForExtensionMethod("glCompressedTexSubImage2DARB", typeof(CompressedTexSubImage2DARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexSubImage3D glCompressedTexSubImage3D = ((CompressedTexSubImage3D)(Gl.GetDelegateForExtensionMethod("glCompressedTexSubImage3D", typeof(CompressedTexSubImage3D)))) ?? new CompressedTexSubImage3D(Imports.CompressedTexSubImage3D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, System.IntPtr data);
        public static CompressedTexSubImage3DARB glCompressedTexSubImage3DARB = ((CompressedTexSubImage3DARB)(Gl.GetDelegateForExtensionMethod("glCompressedTexSubImage3DARB", typeof(CompressedTexSubImage3DARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, System.IntPtr image);
        public static ConvolutionFilter1D glConvolutionFilter1D = ((ConvolutionFilter1D)(Gl.GetDelegateForExtensionMethod("glConvolutionFilter1D", typeof(ConvolutionFilter1D)))) ?? new ConvolutionFilter1D(Imports.ConvolutionFilter1D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, System.IntPtr image);
        public static ConvolutionFilter1DEXT glConvolutionFilter1DEXT = ((ConvolutionFilter1DEXT)(Gl.GetDelegateForExtensionMethod("glConvolutionFilter1DEXT", typeof(ConvolutionFilter1DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr image);
        public static ConvolutionFilter2D glConvolutionFilter2D = ((ConvolutionFilter2D)(Gl.GetDelegateForExtensionMethod("glConvolutionFilter2D", typeof(ConvolutionFilter2D)))) ?? new ConvolutionFilter2D(Imports.ConvolutionFilter2D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr image);
        public static ConvolutionFilter2DEXT glConvolutionFilter2DEXT = ((ConvolutionFilter2DEXT)(Gl.GetDelegateForExtensionMethod("glConvolutionFilter2DEXT", typeof(ConvolutionFilter2DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionParameterf(GLenum target, GLenum pname, GLfloat @params);
        public static ConvolutionParameterf glConvolutionParameterf = ((ConvolutionParameterf)(Gl.GetDelegateForExtensionMethod("glConvolutionParameterf", typeof(ConvolutionParameterf)))) ?? new ConvolutionParameterf(Imports.ConvolutionParameterf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionParameterfEXT(GLenum target, GLenum pname, GLfloat @params);
        public static ConvolutionParameterfEXT glConvolutionParameterfEXT = ((ConvolutionParameterfEXT)(Gl.GetDelegateForExtensionMethod("glConvolutionParameterfEXT", typeof(ConvolutionParameterfEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionParameterfv(GLenum target, GLenum pname, System.IntPtr @params);
        public static ConvolutionParameterfv glConvolutionParameterfv = ((ConvolutionParameterfv)(Gl.GetDelegateForExtensionMethod("glConvolutionParameterfv", typeof(ConvolutionParameterfv)))) ?? new ConvolutionParameterfv(Imports.ConvolutionParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionParameterfvEXT(GLenum target, GLenum pname, System.IntPtr @params);
        public static ConvolutionParameterfvEXT glConvolutionParameterfvEXT = ((ConvolutionParameterfvEXT)(Gl.GetDelegateForExtensionMethod("glConvolutionParameterfvEXT", typeof(ConvolutionParameterfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionParameteri(GLenum target, GLenum pname, GLint @params);
        public static ConvolutionParameteri glConvolutionParameteri = ((ConvolutionParameteri)(Gl.GetDelegateForExtensionMethod("glConvolutionParameteri", typeof(ConvolutionParameteri)))) ?? new ConvolutionParameteri(Imports.ConvolutionParameteri);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionParameteriEXT(GLenum target, GLenum pname, GLint @params);
        public static ConvolutionParameteriEXT glConvolutionParameteriEXT = ((ConvolutionParameteriEXT)(Gl.GetDelegateForExtensionMethod("glConvolutionParameteriEXT", typeof(ConvolutionParameteriEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionParameteriv(GLenum target, GLenum pname, System.IntPtr @params);
        public static ConvolutionParameteriv glConvolutionParameteriv = ((ConvolutionParameteriv)(Gl.GetDelegateForExtensionMethod("glConvolutionParameteriv", typeof(ConvolutionParameteriv)))) ?? new ConvolutionParameteriv(Imports.ConvolutionParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ConvolutionParameterivEXT(GLenum target, GLenum pname, System.IntPtr @params);
        public static ConvolutionParameterivEXT glConvolutionParameterivEXT = ((ConvolutionParameterivEXT)(Gl.GetDelegateForExtensionMethod("glConvolutionParameterivEXT", typeof(ConvolutionParameterivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
        public static CopyColorSubTable glCopyColorSubTable = ((CopyColorSubTable)(Gl.GetDelegateForExtensionMethod("glCopyColorSubTable", typeof(CopyColorSubTable)))) ?? new CopyColorSubTable(Imports.CopyColorSubTable);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyColorSubTableEXT(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
        public static CopyColorSubTableEXT glCopyColorSubTableEXT = ((CopyColorSubTableEXT)(Gl.GetDelegateForExtensionMethod("glCopyColorSubTableEXT", typeof(CopyColorSubTableEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
        public static CopyColorTable glCopyColorTable = ((CopyColorTable)(Gl.GetDelegateForExtensionMethod("glCopyColorTable", typeof(CopyColorTable)))) ?? new CopyColorTable(Imports.CopyColorTable);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyColorTableSGI(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
        public static CopyColorTableSGI glCopyColorTableSGI = ((CopyColorTableSGI)(Gl.GetDelegateForExtensionMethod("glCopyColorTableSGI", typeof(CopyColorTableSGI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
        public static CopyConvolutionFilter1D glCopyConvolutionFilter1D = ((CopyConvolutionFilter1D)(Gl.GetDelegateForExtensionMethod("glCopyConvolutionFilter1D", typeof(CopyConvolutionFilter1D)))) ?? new CopyConvolutionFilter1D(Imports.CopyConvolutionFilter1D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyConvolutionFilter1DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
        public static CopyConvolutionFilter1DEXT glCopyConvolutionFilter1DEXT = ((CopyConvolutionFilter1DEXT)(Gl.GetDelegateForExtensionMethod("glCopyConvolutionFilter1DEXT", typeof(CopyConvolutionFilter1DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
        public static CopyConvolutionFilter2D glCopyConvolutionFilter2D = ((CopyConvolutionFilter2D)(Gl.GetDelegateForExtensionMethod("glCopyConvolutionFilter2D", typeof(CopyConvolutionFilter2D)))) ?? new CopyConvolutionFilter2D(Imports.CopyConvolutionFilter2D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyConvolutionFilter2DEXT(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
        public static CopyConvolutionFilter2DEXT glCopyConvolutionFilter2DEXT = ((CopyConvolutionFilter2DEXT)(Gl.GetDelegateForExtensionMethod("glCopyConvolutionFilter2DEXT", typeof(CopyConvolutionFilter2DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
        public static CopyPixels glCopyPixels = ((CopyPixels)(Gl.GetDelegateForExtensionMethod("glCopyPixels", typeof(CopyPixels)))) ?? new CopyPixels(Imports.CopyPixels);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
        public static CopyTexImage1D glCopyTexImage1D = ((CopyTexImage1D)(Gl.GetDelegateForExtensionMethod("glCopyTexImage1D", typeof(CopyTexImage1D)))) ?? new CopyTexImage1D(Imports.CopyTexImage1D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexImage1DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
        public static CopyTexImage1DEXT glCopyTexImage1DEXT = ((CopyTexImage1DEXT)(Gl.GetDelegateForExtensionMethod("glCopyTexImage1DEXT", typeof(CopyTexImage1DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
        public static CopyTexImage2D glCopyTexImage2D = ((CopyTexImage2D)(Gl.GetDelegateForExtensionMethod("glCopyTexImage2D", typeof(CopyTexImage2D)))) ?? new CopyTexImage2D(Imports.CopyTexImage2D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexImage2DEXT(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
        public static CopyTexImage2DEXT glCopyTexImage2DEXT = ((CopyTexImage2DEXT)(Gl.GetDelegateForExtensionMethod("glCopyTexImage2DEXT", typeof(CopyTexImage2DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
        public static CopyTexSubImage1D glCopyTexSubImage1D = ((CopyTexSubImage1D)(Gl.GetDelegateForExtensionMethod("glCopyTexSubImage1D", typeof(CopyTexSubImage1D)))) ?? new CopyTexSubImage1D(Imports.CopyTexSubImage1D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
        public static CopyTexSubImage1DEXT glCopyTexSubImage1DEXT = ((CopyTexSubImage1DEXT)(Gl.GetDelegateForExtensionMethod("glCopyTexSubImage1DEXT", typeof(CopyTexSubImage1DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        public static CopyTexSubImage2D glCopyTexSubImage2D = ((CopyTexSubImage2D)(Gl.GetDelegateForExtensionMethod("glCopyTexSubImage2D", typeof(CopyTexSubImage2D)))) ?? new CopyTexSubImage2D(Imports.CopyTexSubImage2D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        public static CopyTexSubImage2DEXT glCopyTexSubImage2DEXT = ((CopyTexSubImage2DEXT)(Gl.GetDelegateForExtensionMethod("glCopyTexSubImage2DEXT", typeof(CopyTexSubImage2DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        public static CopyTexSubImage3D glCopyTexSubImage3D = ((CopyTexSubImage3D)(Gl.GetDelegateForExtensionMethod("glCopyTexSubImage3D", typeof(CopyTexSubImage3D)))) ?? new CopyTexSubImage3D(Imports.CopyTexSubImage3D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CopyTexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        public static CopyTexSubImage3DEXT glCopyTexSubImage3DEXT = ((CopyTexSubImage3DEXT)(Gl.GetDelegateForExtensionMethod("glCopyTexSubImage3DEXT", typeof(CopyTexSubImage3DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint CreateProgram();
        public static CreateProgram glCreateProgram = ((CreateProgram)(Gl.GetDelegateForExtensionMethod("glCreateProgram", typeof(CreateProgram)))) ?? new CreateProgram(Imports.CreateProgram);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLhandleARB CreateProgramObjectARB();
        public static CreateProgramObjectARB glCreateProgramObjectARB = ((CreateProgramObjectARB)(Gl.GetDelegateForExtensionMethod("glCreateProgramObjectARB", typeof(CreateProgramObjectARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint CreateShader(GLenum type);
        public static CreateShader glCreateShader = ((CreateShader)(Gl.GetDelegateForExtensionMethod("glCreateShader", typeof(CreateShader)))) ?? new CreateShader(Imports.CreateShader);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLhandleARB CreateShaderObjectARB(GLenum shaderType);
        public static CreateShaderObjectARB glCreateShaderObjectARB = ((CreateShaderObjectARB)(Gl.GetDelegateForExtensionMethod("glCreateShaderObjectARB", typeof(CreateShaderObjectARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CullFace(GLenum mode);
        public static CullFace glCullFace = ((CullFace)(Gl.GetDelegateForExtensionMethod("glCullFace", typeof(CullFace)))) ?? new CullFace(Imports.CullFace);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CullParameterdvEXT(GLenum pname, [In, Out()] System.IntPtr @params);
        public static CullParameterdvEXT glCullParameterdvEXT = ((CullParameterdvEXT)(Gl.GetDelegateForExtensionMethod("glCullParameterdvEXT", typeof(CullParameterdvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CullParameterfvEXT(GLenum pname, [In, Out()] System.IntPtr @params);
        public static CullParameterfvEXT glCullParameterfvEXT = ((CullParameterfvEXT)(Gl.GetDelegateForExtensionMethod("glCullParameterfvEXT", typeof(CullParameterfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void CurrentPaletteMatrixARB(GLint index);
        public static CurrentPaletteMatrixARB glCurrentPaletteMatrixARB = ((CurrentPaletteMatrixARB)(Gl.GetDelegateForExtensionMethod("glCurrentPaletteMatrixARB", typeof(CurrentPaletteMatrixARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeformationMap3dSGIX(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, System.IntPtr points);
        public static DeformationMap3dSGIX glDeformationMap3dSGIX = ((DeformationMap3dSGIX)(Gl.GetDelegateForExtensionMethod("glDeformationMap3dSGIX", typeof(DeformationMap3dSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeformationMap3fSGIX(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, System.IntPtr points);
        public static DeformationMap3fSGIX glDeformationMap3fSGIX = ((DeformationMap3fSGIX)(Gl.GetDelegateForExtensionMethod("glDeformationMap3fSGIX", typeof(DeformationMap3fSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeformSGIX(GLbitfield mask);
        public static DeformSGIX glDeformSGIX = ((DeformSGIX)(Gl.GetDelegateForExtensionMethod("glDeformSGIX", typeof(DeformSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteAsyncMarkersSGIX(GLuint marker, GLsizei range);
        public static DeleteAsyncMarkersSGIX glDeleteAsyncMarkersSGIX = ((DeleteAsyncMarkersSGIX)(Gl.GetDelegateForExtensionMethod("glDeleteAsyncMarkersSGIX", typeof(DeleteAsyncMarkersSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteBuffers(GLsizei n, System.IntPtr buffers);
        public static DeleteBuffers glDeleteBuffers = ((DeleteBuffers)(Gl.GetDelegateForExtensionMethod("glDeleteBuffers", typeof(DeleteBuffers)))) ?? new DeleteBuffers(Imports.DeleteBuffers);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteBuffersARB(GLsizei n, System.IntPtr buffers);
        public static DeleteBuffersARB glDeleteBuffersARB = ((DeleteBuffersARB)(Gl.GetDelegateForExtensionMethod("glDeleteBuffersARB", typeof(DeleteBuffersARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteFencesAPPLE(GLsizei n, System.IntPtr fences);
        public static DeleteFencesAPPLE glDeleteFencesAPPLE = ((DeleteFencesAPPLE)(Gl.GetDelegateForExtensionMethod("glDeleteFencesAPPLE", typeof(DeleteFencesAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteFencesNV(GLsizei n, System.IntPtr fences);
        public static DeleteFencesNV glDeleteFencesNV = ((DeleteFencesNV)(Gl.GetDelegateForExtensionMethod("glDeleteFencesNV", typeof(DeleteFencesNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteFragmentShaderATI(GLuint id);
        public static DeleteFragmentShaderATI glDeleteFragmentShaderATI = ((DeleteFragmentShaderATI)(Gl.GetDelegateForExtensionMethod("glDeleteFragmentShaderATI", typeof(DeleteFragmentShaderATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteFramebuffersEXT(GLsizei n, System.IntPtr framebuffers);
        public static DeleteFramebuffersEXT glDeleteFramebuffersEXT = ((DeleteFramebuffersEXT)(Gl.GetDelegateForExtensionMethod("glDeleteFramebuffersEXT", typeof(DeleteFramebuffersEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteLists(GLuint list, GLsizei range);
        public static DeleteLists glDeleteLists = ((DeleteLists)(Gl.GetDelegateForExtensionMethod("glDeleteLists", typeof(DeleteLists)))) ?? new DeleteLists(Imports.DeleteLists);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteObjectARB(GLhandleARB obj);
        public static DeleteObjectARB glDeleteObjectARB = ((DeleteObjectARB)(Gl.GetDelegateForExtensionMethod("glDeleteObjectARB", typeof(DeleteObjectARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteOcclusionQueriesNV(GLsizei n, System.IntPtr ids);
        public static DeleteOcclusionQueriesNV glDeleteOcclusionQueriesNV = ((DeleteOcclusionQueriesNV)(Gl.GetDelegateForExtensionMethod("glDeleteOcclusionQueriesNV", typeof(DeleteOcclusionQueriesNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteProgram(GLuint program);
        public static DeleteProgram glDeleteProgram = ((DeleteProgram)(Gl.GetDelegateForExtensionMethod("glDeleteProgram", typeof(DeleteProgram)))) ?? new DeleteProgram(Imports.DeleteProgram);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteProgramsARB(GLsizei n, System.IntPtr programs);
        public static DeleteProgramsARB glDeleteProgramsARB = ((DeleteProgramsARB)(Gl.GetDelegateForExtensionMethod("glDeleteProgramsARB", typeof(DeleteProgramsARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteProgramsNV(GLsizei n, System.IntPtr programs);
        public static DeleteProgramsNV glDeleteProgramsNV = ((DeleteProgramsNV)(Gl.GetDelegateForExtensionMethod("glDeleteProgramsNV", typeof(DeleteProgramsNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteQueries(GLsizei n, System.IntPtr ids);
        public static DeleteQueries glDeleteQueries = ((DeleteQueries)(Gl.GetDelegateForExtensionMethod("glDeleteQueries", typeof(DeleteQueries)))) ?? new DeleteQueries(Imports.DeleteQueries);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteQueriesARB(GLsizei n, System.IntPtr ids);
        public static DeleteQueriesARB glDeleteQueriesARB = ((DeleteQueriesARB)(Gl.GetDelegateForExtensionMethod("glDeleteQueriesARB", typeof(DeleteQueriesARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteRenderbuffersEXT(GLsizei n, System.IntPtr renderbuffers);
        public static DeleteRenderbuffersEXT glDeleteRenderbuffersEXT = ((DeleteRenderbuffersEXT)(Gl.GetDelegateForExtensionMethod("glDeleteRenderbuffersEXT", typeof(DeleteRenderbuffersEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteShader(GLuint shader);
        public static DeleteShader glDeleteShader = ((DeleteShader)(Gl.GetDelegateForExtensionMethod("glDeleteShader", typeof(DeleteShader)))) ?? new DeleteShader(Imports.DeleteShader);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteTextures(GLsizei n, System.IntPtr textures);
        public static DeleteTextures glDeleteTextures = ((DeleteTextures)(Gl.GetDelegateForExtensionMethod("glDeleteTextures", typeof(DeleteTextures)))) ?? new DeleteTextures(Imports.DeleteTextures);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteTexturesEXT(GLsizei n, System.IntPtr textures);
        public static DeleteTexturesEXT glDeleteTexturesEXT = ((DeleteTexturesEXT)(Gl.GetDelegateForExtensionMethod("glDeleteTexturesEXT", typeof(DeleteTexturesEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteVertexArraysAPPLE(GLsizei n, System.IntPtr arrays);
        public static DeleteVertexArraysAPPLE glDeleteVertexArraysAPPLE = ((DeleteVertexArraysAPPLE)(Gl.GetDelegateForExtensionMethod("glDeleteVertexArraysAPPLE", typeof(DeleteVertexArraysAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DeleteVertexShaderEXT(GLuint id);
        public static DeleteVertexShaderEXT glDeleteVertexShaderEXT = ((DeleteVertexShaderEXT)(Gl.GetDelegateForExtensionMethod("glDeleteVertexShaderEXT", typeof(DeleteVertexShaderEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DepthBoundsdNV(GLdouble zmin, GLdouble zmax);
        public static DepthBoundsdNV glDepthBoundsdNV = ((DepthBoundsdNV)(Gl.GetDelegateForExtensionMethod("glDepthBoundsdNV", typeof(DepthBoundsdNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DepthBoundsEXT(GLclampd zmin, GLclampd zmax);
        public static DepthBoundsEXT glDepthBoundsEXT = ((DepthBoundsEXT)(Gl.GetDelegateForExtensionMethod("glDepthBoundsEXT", typeof(DepthBoundsEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DepthFunc(GLenum func);
        public static DepthFunc glDepthFunc = ((DepthFunc)(Gl.GetDelegateForExtensionMethod("glDepthFunc", typeof(DepthFunc)))) ?? new DepthFunc(Imports.DepthFunc);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DepthMask(GLboolean flag);
        public static DepthMask glDepthMask = ((DepthMask)(Gl.GetDelegateForExtensionMethod("glDepthMask", typeof(DepthMask)))) ?? new DepthMask(Imports.DepthMask);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DepthRange(GLclampd near, GLclampd far);
        public static DepthRange glDepthRange = ((DepthRange)(Gl.GetDelegateForExtensionMethod("glDepthRange", typeof(DepthRange)))) ?? new DepthRange(Imports.DepthRange);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DepthRangedNV(GLdouble zNear, GLdouble zFar);
        public static DepthRangedNV glDepthRangedNV = ((DepthRangedNV)(Gl.GetDelegateForExtensionMethod("glDepthRangedNV", typeof(DepthRangedNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj);
        public static DetachObjectARB glDetachObjectARB = ((DetachObjectARB)(Gl.GetDelegateForExtensionMethod("glDetachObjectARB", typeof(DetachObjectARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DetachShader(GLuint program, GLuint shader);
        public static DetachShader glDetachShader = ((DetachShader)(Gl.GetDelegateForExtensionMethod("glDetachShader", typeof(DetachShader)))) ?? new DetachShader(Imports.DetachShader);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DetailTexFuncSGIS(GLenum target, GLsizei n, System.IntPtr points);
        public static DetailTexFuncSGIS glDetailTexFuncSGIS = ((DetailTexFuncSGIS)(Gl.GetDelegateForExtensionMethod("glDetailTexFuncSGIS", typeof(DetailTexFuncSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Disable(GLenum cap);
        public static Disable glDisable = ((Disable)(Gl.GetDelegateForExtensionMethod("glDisable", typeof(Disable)))) ?? new Disable(Imports.Disable);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DisableClientState(GLenum array);
        public static DisableClientState glDisableClientState = ((DisableClientState)(Gl.GetDelegateForExtensionMethod("glDisableClientState", typeof(DisableClientState)))) ?? new DisableClientState(Imports.DisableClientState);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DisableIndexedEXT(GLenum target, GLuint index);
        public static DisableIndexedEXT glDisableIndexedEXT = ((DisableIndexedEXT)(Gl.GetDelegateForExtensionMethod("glDisableIndexedEXT", typeof(DisableIndexedEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DisableVariantClientStateEXT(GLuint id);
        public static DisableVariantClientStateEXT glDisableVariantClientStateEXT = ((DisableVariantClientStateEXT)(Gl.GetDelegateForExtensionMethod("glDisableVariantClientStateEXT", typeof(DisableVariantClientStateEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DisableVertexAttribArray(GLuint index);
        public static DisableVertexAttribArray glDisableVertexAttribArray = ((DisableVertexAttribArray)(Gl.GetDelegateForExtensionMethod("glDisableVertexAttribArray", typeof(DisableVertexAttribArray)))) ?? new DisableVertexAttribArray(Imports.DisableVertexAttribArray);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DisableVertexAttribArrayARB(GLuint index);
        public static DisableVertexAttribArrayARB glDisableVertexAttribArrayARB = ((DisableVertexAttribArrayARB)(Gl.GetDelegateForExtensionMethod("glDisableVertexAttribArrayARB", typeof(DisableVertexAttribArrayARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawArrays(GLenum mode, GLint first, GLsizei count);
        public static DrawArrays glDrawArrays = ((DrawArrays)(Gl.GetDelegateForExtensionMethod("glDrawArrays", typeof(DrawArrays)))) ?? new DrawArrays(Imports.DrawArrays);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawArraysEXT(GLenum mode, GLint first, GLsizei count);
        public static DrawArraysEXT glDrawArraysEXT = ((DrawArraysEXT)(Gl.GetDelegateForExtensionMethod("glDrawArraysEXT", typeof(DrawArraysEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawArraysInstancedEXT(GLenum mode, GLint start, GLsizei count, GLsizei primcount);
        public static DrawArraysInstancedEXT glDrawArraysInstancedEXT = ((DrawArraysInstancedEXT)(Gl.GetDelegateForExtensionMethod("glDrawArraysInstancedEXT", typeof(DrawArraysInstancedEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawBuffer(GLenum mode);
        public static DrawBuffer glDrawBuffer = ((DrawBuffer)(Gl.GetDelegateForExtensionMethod("glDrawBuffer", typeof(DrawBuffer)))) ?? new DrawBuffer(Imports.DrawBuffer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawBuffers(GLsizei n, System.IntPtr bufs);
        public static DrawBuffers glDrawBuffers = ((DrawBuffers)(Gl.GetDelegateForExtensionMethod("glDrawBuffers", typeof(DrawBuffers)))) ?? new DrawBuffers(Imports.DrawBuffers);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawBuffersARB(GLsizei n, System.IntPtr bufs);
        public static DrawBuffersARB glDrawBuffersARB = ((DrawBuffersARB)(Gl.GetDelegateForExtensionMethod("glDrawBuffersARB", typeof(DrawBuffersARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawBuffersATI(GLsizei n, System.IntPtr bufs);
        public static DrawBuffersATI glDrawBuffersATI = ((DrawBuffersATI)(Gl.GetDelegateForExtensionMethod("glDrawBuffersATI", typeof(DrawBuffersATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count);
        public static DrawElementArrayAPPLE glDrawElementArrayAPPLE = ((DrawElementArrayAPPLE)(Gl.GetDelegateForExtensionMethod("glDrawElementArrayAPPLE", typeof(DrawElementArrayAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawElementArrayATI(GLenum mode, GLsizei count);
        public static DrawElementArrayATI glDrawElementArrayATI = ((DrawElementArrayATI)(Gl.GetDelegateForExtensionMethod("glDrawElementArrayATI", typeof(DrawElementArrayATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawElements(GLenum mode, GLsizei count, GLenum type, System.IntPtr indices);
        public static DrawElements glDrawElements = ((DrawElements)(Gl.GetDelegateForExtensionMethod("glDrawElements", typeof(DrawElements)))) ?? new DrawElements(Imports.DrawElements);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawElementsInstancedEXT(GLenum mode, GLsizei count, GLenum type, System.IntPtr indices, GLsizei primcount);
        public static DrawElementsInstancedEXT glDrawElementsInstancedEXT = ((DrawElementsInstancedEXT)(Gl.GetDelegateForExtensionMethod("glDrawElementsInstancedEXT", typeof(DrawElementsInstancedEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawMeshArraysSUN(GLenum mode, GLint first, GLsizei count, GLsizei width);
        public static DrawMeshArraysSUN glDrawMeshArraysSUN = ((DrawMeshArraysSUN)(Gl.GetDelegateForExtensionMethod("glDrawMeshArraysSUN", typeof(DrawMeshArraysSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr pixels);
        public static DrawPixels glDrawPixels = ((DrawPixels)(Gl.GetDelegateForExtensionMethod("glDrawPixels", typeof(DrawPixels)))) ?? new DrawPixels(Imports.DrawPixels);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
        public static DrawRangeElementArrayAPPLE glDrawRangeElementArrayAPPLE = ((DrawRangeElementArrayAPPLE)(Gl.GetDelegateForExtensionMethod("glDrawRangeElementArrayAPPLE", typeof(DrawRangeElementArrayAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawRangeElementArrayATI(GLenum mode, GLuint start, GLuint end, GLsizei count);
        public static DrawRangeElementArrayATI glDrawRangeElementArrayATI = ((DrawRangeElementArrayATI)(Gl.GetDelegateForExtensionMethod("glDrawRangeElementArrayATI", typeof(DrawRangeElementArrayATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, System.IntPtr indices);
        public static DrawRangeElements glDrawRangeElements = ((DrawRangeElements)(Gl.GetDelegateForExtensionMethod("glDrawRangeElements", typeof(DrawRangeElements)))) ?? new DrawRangeElements(Imports.DrawRangeElements);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void DrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, System.IntPtr indices);
        public static DrawRangeElementsEXT glDrawRangeElementsEXT = ((DrawRangeElementsEXT)(Gl.GetDelegateForExtensionMethod("glDrawRangeElementsEXT", typeof(DrawRangeElementsEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EdgeFlag(GLboolean flag);
        public static EdgeFlag glEdgeFlag = ((EdgeFlag)(Gl.GetDelegateForExtensionMethod("glEdgeFlag", typeof(EdgeFlag)))) ?? new EdgeFlag(Imports.EdgeFlag);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EdgeFlagPointer(GLsizei stride, System.IntPtr pointer);
        public static EdgeFlagPointer glEdgeFlagPointer = ((EdgeFlagPointer)(Gl.GetDelegateForExtensionMethod("glEdgeFlagPointer", typeof(EdgeFlagPointer)))) ?? new EdgeFlagPointer(Imports.EdgeFlagPointer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EdgeFlagPointerEXT(GLsizei stride, GLsizei count, System.IntPtr pointer);
        public static EdgeFlagPointerEXT glEdgeFlagPointerEXT = ((EdgeFlagPointerEXT)(Gl.GetDelegateForExtensionMethod("glEdgeFlagPointerEXT", typeof(EdgeFlagPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EdgeFlagPointerListIBM(GLint stride, System.IntPtr pointer, GLint ptrstride);
        public static EdgeFlagPointerListIBM glEdgeFlagPointerListIBM = ((EdgeFlagPointerListIBM)(Gl.GetDelegateForExtensionMethod("glEdgeFlagPointerListIBM", typeof(EdgeFlagPointerListIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EdgeFlagv(System.IntPtr flag);
        public static EdgeFlagv glEdgeFlagv = ((EdgeFlagv)(Gl.GetDelegateForExtensionMethod("glEdgeFlagv", typeof(EdgeFlagv)))) ?? new EdgeFlagv(Imports.EdgeFlagv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ElementPointerAPPLE(GLenum type, System.IntPtr pointer);
        public static ElementPointerAPPLE glElementPointerAPPLE = ((ElementPointerAPPLE)(Gl.GetDelegateForExtensionMethod("glElementPointerAPPLE", typeof(ElementPointerAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ElementPointerATI(GLenum type, System.IntPtr pointer);
        public static ElementPointerATI glElementPointerATI = ((ElementPointerATI)(Gl.GetDelegateForExtensionMethod("glElementPointerATI", typeof(ElementPointerATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Enable(GLenum cap);
        public static Enable glEnable = ((Enable)(Gl.GetDelegateForExtensionMethod("glEnable", typeof(Enable)))) ?? new Enable(Imports.Enable);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EnableClientState(GLenum array);
        public static EnableClientState glEnableClientState = ((EnableClientState)(Gl.GetDelegateForExtensionMethod("glEnableClientState", typeof(EnableClientState)))) ?? new EnableClientState(Imports.EnableClientState);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EnableIndexedEXT(GLenum target, GLuint index);
        public static EnableIndexedEXT glEnableIndexedEXT = ((EnableIndexedEXT)(Gl.GetDelegateForExtensionMethod("glEnableIndexedEXT", typeof(EnableIndexedEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EnableVariantClientStateEXT(GLuint id);
        public static EnableVariantClientStateEXT glEnableVariantClientStateEXT = ((EnableVariantClientStateEXT)(Gl.GetDelegateForExtensionMethod("glEnableVariantClientStateEXT", typeof(EnableVariantClientStateEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EnableVertexAttribArray(GLuint index);
        public static EnableVertexAttribArray glEnableVertexAttribArray = ((EnableVertexAttribArray)(Gl.GetDelegateForExtensionMethod("glEnableVertexAttribArray", typeof(EnableVertexAttribArray)))) ?? new EnableVertexAttribArray(Imports.EnableVertexAttribArray);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EnableVertexAttribArrayARB(GLuint index);
        public static EnableVertexAttribArrayARB glEnableVertexAttribArrayARB = ((EnableVertexAttribArrayARB)(Gl.GetDelegateForExtensionMethod("glEnableVertexAttribArrayARB", typeof(EnableVertexAttribArrayARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void End();
        public static End glEnd = ((End)(Gl.GetDelegateForExtensionMethod("glEnd", typeof(End)))) ?? new End(Imports.End);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EndFragmentShaderATI();
        public static EndFragmentShaderATI glEndFragmentShaderATI = ((EndFragmentShaderATI)(Gl.GetDelegateForExtensionMethod("glEndFragmentShaderATI", typeof(EndFragmentShaderATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EndList();
        public static EndList glEndList = ((EndList)(Gl.GetDelegateForExtensionMethod("glEndList", typeof(EndList)))) ?? new EndList(Imports.EndList);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EndOcclusionQueryNV();
        public static EndOcclusionQueryNV glEndOcclusionQueryNV = ((EndOcclusionQueryNV)(Gl.GetDelegateForExtensionMethod("glEndOcclusionQueryNV", typeof(EndOcclusionQueryNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EndQuery(GLenum target);
        public static EndQuery glEndQuery = ((EndQuery)(Gl.GetDelegateForExtensionMethod("glEndQuery", typeof(EndQuery)))) ?? new EndQuery(Imports.EndQuery);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EndQueryARB(GLenum target);
        public static EndQueryARB glEndQueryARB = ((EndQueryARB)(Gl.GetDelegateForExtensionMethod("glEndQueryARB", typeof(EndQueryARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EndTransformFeedbackNV();
        public static EndTransformFeedbackNV glEndTransformFeedbackNV = ((EndTransformFeedbackNV)(Gl.GetDelegateForExtensionMethod("glEndTransformFeedbackNV", typeof(EndTransformFeedbackNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EndVertexShaderEXT();
        public static EndVertexShaderEXT glEndVertexShaderEXT = ((EndVertexShaderEXT)(Gl.GetDelegateForExtensionMethod("glEndVertexShaderEXT", typeof(EndVertexShaderEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalCoord1d(GLdouble u);
        public static EvalCoord1d glEvalCoord1d = ((EvalCoord1d)(Gl.GetDelegateForExtensionMethod("glEvalCoord1d", typeof(EvalCoord1d)))) ?? new EvalCoord1d(Imports.EvalCoord1d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalCoord1dv(System.IntPtr u);
        public static EvalCoord1dv glEvalCoord1dv = ((EvalCoord1dv)(Gl.GetDelegateForExtensionMethod("glEvalCoord1dv", typeof(EvalCoord1dv)))) ?? new EvalCoord1dv(Imports.EvalCoord1dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalCoord1f(GLfloat u);
        public static EvalCoord1f glEvalCoord1f = ((EvalCoord1f)(Gl.GetDelegateForExtensionMethod("glEvalCoord1f", typeof(EvalCoord1f)))) ?? new EvalCoord1f(Imports.EvalCoord1f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalCoord1fv(System.IntPtr u);
        public static EvalCoord1fv glEvalCoord1fv = ((EvalCoord1fv)(Gl.GetDelegateForExtensionMethod("glEvalCoord1fv", typeof(EvalCoord1fv)))) ?? new EvalCoord1fv(Imports.EvalCoord1fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalCoord2d(GLdouble u, GLdouble v);
        public static EvalCoord2d glEvalCoord2d = ((EvalCoord2d)(Gl.GetDelegateForExtensionMethod("glEvalCoord2d", typeof(EvalCoord2d)))) ?? new EvalCoord2d(Imports.EvalCoord2d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalCoord2dv(System.IntPtr u);
        public static EvalCoord2dv glEvalCoord2dv = ((EvalCoord2dv)(Gl.GetDelegateForExtensionMethod("glEvalCoord2dv", typeof(EvalCoord2dv)))) ?? new EvalCoord2dv(Imports.EvalCoord2dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalCoord2f(GLfloat u, GLfloat v);
        public static EvalCoord2f glEvalCoord2f = ((EvalCoord2f)(Gl.GetDelegateForExtensionMethod("glEvalCoord2f", typeof(EvalCoord2f)))) ?? new EvalCoord2f(Imports.EvalCoord2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalCoord2fv(System.IntPtr u);
        public static EvalCoord2fv glEvalCoord2fv = ((EvalCoord2fv)(Gl.GetDelegateForExtensionMethod("glEvalCoord2fv", typeof(EvalCoord2fv)))) ?? new EvalCoord2fv(Imports.EvalCoord2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalMapsNV(GLenum target, GLenum mode);
        public static EvalMapsNV glEvalMapsNV = ((EvalMapsNV)(Gl.GetDelegateForExtensionMethod("glEvalMapsNV", typeof(EvalMapsNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalMesh1(GLenum mode, GLint i1, GLint i2);
        public static EvalMesh1 glEvalMesh1 = ((EvalMesh1)(Gl.GetDelegateForExtensionMethod("glEvalMesh1", typeof(EvalMesh1)))) ?? new EvalMesh1(Imports.EvalMesh1);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
        public static EvalMesh2 glEvalMesh2 = ((EvalMesh2)(Gl.GetDelegateForExtensionMethod("glEvalMesh2", typeof(EvalMesh2)))) ?? new EvalMesh2(Imports.EvalMesh2);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalPoint1(GLint i);
        public static EvalPoint1 glEvalPoint1 = ((EvalPoint1)(Gl.GetDelegateForExtensionMethod("glEvalPoint1", typeof(EvalPoint1)))) ?? new EvalPoint1(Imports.EvalPoint1);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void EvalPoint2(GLint i, GLint j);
        public static EvalPoint2 glEvalPoint2 = ((EvalPoint2)(Gl.GetDelegateForExtensionMethod("glEvalPoint2", typeof(EvalPoint2)))) ?? new EvalPoint2(Imports.EvalPoint2);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ExecuteProgramNV(GLenum target, GLuint id, System.IntPtr @params);
        public static ExecuteProgramNV glExecuteProgramNV = ((ExecuteProgramNV)(Gl.GetDelegateForExtensionMethod("glExecuteProgramNV", typeof(ExecuteProgramNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ExtractComponentEXT(GLuint res, GLuint src, GLuint num);
        public static ExtractComponentEXT glExtractComponentEXT = ((ExtractComponentEXT)(Gl.GetDelegateForExtensionMethod("glExtractComponentEXT", typeof(ExtractComponentEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FeedbackBuffer(GLsizei size, GLenum type, [In, Out()] System.IntPtr buffer);
        public static FeedbackBuffer glFeedbackBuffer = ((FeedbackBuffer)(Gl.GetDelegateForExtensionMethod("glFeedbackBuffer", typeof(FeedbackBuffer)))) ?? new FeedbackBuffer(Imports.FeedbackBuffer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FinalCombinerInputNV(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
        public static FinalCombinerInputNV glFinalCombinerInputNV = ((FinalCombinerInputNV)(Gl.GetDelegateForExtensionMethod("glFinalCombinerInputNV", typeof(FinalCombinerInputNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Finish();
        public static Finish glFinish = ((Finish)(Gl.GetDelegateForExtensionMethod("glFinish", typeof(Finish)))) ?? new Finish(Imports.Finish);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint FinishAsyncSGIX([In, Out()] System.IntPtr markerp);
        public static FinishAsyncSGIX glFinishAsyncSGIX = ((FinishAsyncSGIX)(Gl.GetDelegateForExtensionMethod("glFinishAsyncSGIX", typeof(FinishAsyncSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FinishFenceAPPLE(GLuint fence);
        public static FinishFenceAPPLE glFinishFenceAPPLE = ((FinishFenceAPPLE)(Gl.GetDelegateForExtensionMethod("glFinishFenceAPPLE", typeof(FinishFenceAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FinishFenceNV(GLuint fence);
        public static FinishFenceNV glFinishFenceNV = ((FinishFenceNV)(Gl.GetDelegateForExtensionMethod("glFinishFenceNV", typeof(FinishFenceNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FinishObjectAPPLE(GLenum @object, GLint name);
        public static FinishObjectAPPLE glFinishObjectAPPLE = ((FinishObjectAPPLE)(Gl.GetDelegateForExtensionMethod("glFinishObjectAPPLE", typeof(FinishObjectAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FinishTextureSUNX();
        public static FinishTextureSUNX glFinishTextureSUNX = ((FinishTextureSUNX)(Gl.GetDelegateForExtensionMethod("glFinishTextureSUNX", typeof(FinishTextureSUNX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Flush();
        public static Flush glFlush = ((Flush)(Gl.GetDelegateForExtensionMethod("glFlush", typeof(Flush)))) ?? new Flush(Imports.Flush);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size);
        public static FlushMappedBufferRangeAPPLE glFlushMappedBufferRangeAPPLE = ((FlushMappedBufferRangeAPPLE)(Gl.GetDelegateForExtensionMethod("glFlushMappedBufferRangeAPPLE", typeof(FlushMappedBufferRangeAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FlushPixelDataRangeNV(GLenum target);
        public static FlushPixelDataRangeNV glFlushPixelDataRangeNV = ((FlushPixelDataRangeNV)(Gl.GetDelegateForExtensionMethod("glFlushPixelDataRangeNV", typeof(FlushPixelDataRangeNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FlushRasterSGIX();
        public static FlushRasterSGIX glFlushRasterSGIX = ((FlushRasterSGIX)(Gl.GetDelegateForExtensionMethod("glFlushRasterSGIX", typeof(FlushRasterSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FlushVertexArrayRangeAPPLE(GLsizei length, [In, Out()] System.IntPtr pointer);
        public static FlushVertexArrayRangeAPPLE glFlushVertexArrayRangeAPPLE = ((FlushVertexArrayRangeAPPLE)(Gl.GetDelegateForExtensionMethod("glFlushVertexArrayRangeAPPLE", typeof(FlushVertexArrayRangeAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FlushVertexArrayRangeNV();
        public static FlushVertexArrayRangeNV glFlushVertexArrayRangeNV = ((FlushVertexArrayRangeNV)(Gl.GetDelegateForExtensionMethod("glFlushVertexArrayRangeNV", typeof(FlushVertexArrayRangeNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordd(GLdouble coord);
        public static FogCoordd glFogCoordd = ((FogCoordd)(Gl.GetDelegateForExtensionMethod("glFogCoordd", typeof(FogCoordd)))) ?? new FogCoordd(Imports.FogCoordd);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoorddEXT(GLdouble coord);
        public static FogCoorddEXT glFogCoorddEXT = ((FogCoorddEXT)(Gl.GetDelegateForExtensionMethod("glFogCoorddEXT", typeof(FogCoorddEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoorddv(System.IntPtr coord);
        public static FogCoorddv glFogCoorddv = ((FogCoorddv)(Gl.GetDelegateForExtensionMethod("glFogCoorddv", typeof(FogCoorddv)))) ?? new FogCoorddv(Imports.FogCoorddv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoorddvEXT(System.IntPtr coord);
        public static FogCoorddvEXT glFogCoorddvEXT = ((FogCoorddvEXT)(Gl.GetDelegateForExtensionMethod("glFogCoorddvEXT", typeof(FogCoorddvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordf(GLfloat coord);
        public static FogCoordf glFogCoordf = ((FogCoordf)(Gl.GetDelegateForExtensionMethod("glFogCoordf", typeof(FogCoordf)))) ?? new FogCoordf(Imports.FogCoordf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordfEXT(GLfloat coord);
        public static FogCoordfEXT glFogCoordfEXT = ((FogCoordfEXT)(Gl.GetDelegateForExtensionMethod("glFogCoordfEXT", typeof(FogCoordfEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordfv(System.IntPtr coord);
        public static FogCoordfv glFogCoordfv = ((FogCoordfv)(Gl.GetDelegateForExtensionMethod("glFogCoordfv", typeof(FogCoordfv)))) ?? new FogCoordfv(Imports.FogCoordfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordfvEXT(System.IntPtr coord);
        public static FogCoordfvEXT glFogCoordfvEXT = ((FogCoordfvEXT)(Gl.GetDelegateForExtensionMethod("glFogCoordfvEXT", typeof(FogCoordfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordhNV(GLhalfNV fog);
        public static FogCoordhNV glFogCoordhNV = ((FogCoordhNV)(Gl.GetDelegateForExtensionMethod("glFogCoordhNV", typeof(FogCoordhNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordhvNV(System.IntPtr fog);
        public static FogCoordhvNV glFogCoordhvNV = ((FogCoordhvNV)(Gl.GetDelegateForExtensionMethod("glFogCoordhvNV", typeof(FogCoordhvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordPointer(GLenum type, GLsizei stride, System.IntPtr pointer);
        public static FogCoordPointer glFogCoordPointer = ((FogCoordPointer)(Gl.GetDelegateForExtensionMethod("glFogCoordPointer", typeof(FogCoordPointer)))) ?? new FogCoordPointer(Imports.FogCoordPointer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordPointerEXT(GLenum type, GLsizei stride, System.IntPtr pointer);
        public static FogCoordPointerEXT glFogCoordPointerEXT = ((FogCoordPointerEXT)(Gl.GetDelegateForExtensionMethod("glFogCoordPointerEXT", typeof(FogCoordPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogCoordPointerListIBM(GLenum type, GLint stride, System.IntPtr pointer, GLint ptrstride);
        public static FogCoordPointerListIBM glFogCoordPointerListIBM = ((FogCoordPointerListIBM)(Gl.GetDelegateForExtensionMethod("glFogCoordPointerListIBM", typeof(FogCoordPointerListIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Fogf(GLenum pname, GLfloat param);
        public static Fogf glFogf = ((Fogf)(Gl.GetDelegateForExtensionMethod("glFogf", typeof(Fogf)))) ?? new Fogf(Imports.Fogf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FogFuncSGIS(GLsizei n, System.IntPtr points);
        public static FogFuncSGIS glFogFuncSGIS = ((FogFuncSGIS)(Gl.GetDelegateForExtensionMethod("glFogFuncSGIS", typeof(FogFuncSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Fogfv(GLenum pname, System.IntPtr @params);
        public static Fogfv glFogfv = ((Fogfv)(Gl.GetDelegateForExtensionMethod("glFogfv", typeof(Fogfv)))) ?? new Fogfv(Imports.Fogfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Fogi(GLenum pname, GLint param);
        public static Fogi glFogi = ((Fogi)(Gl.GetDelegateForExtensionMethod("glFogi", typeof(Fogi)))) ?? new Fogi(Imports.Fogi);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Fogiv(GLenum pname, System.IntPtr @params);
        public static Fogiv glFogiv = ((Fogiv)(Gl.GetDelegateForExtensionMethod("glFogiv", typeof(Fogiv)))) ?? new Fogiv(Imports.Fogiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentColorMaterialSGIX(GLenum face, GLenum mode);
        public static FragmentColorMaterialSGIX glFragmentColorMaterialSGIX = ((FragmentColorMaterialSGIX)(Gl.GetDelegateForExtensionMethod("glFragmentColorMaterialSGIX", typeof(FragmentColorMaterialSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentLightfSGIX(GLenum light, GLenum pname, GLfloat param);
        public static FragmentLightfSGIX glFragmentLightfSGIX = ((FragmentLightfSGIX)(Gl.GetDelegateForExtensionMethod("glFragmentLightfSGIX", typeof(FragmentLightfSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentLightfvSGIX(GLenum light, GLenum pname, System.IntPtr @params);
        public static FragmentLightfvSGIX glFragmentLightfvSGIX = ((FragmentLightfvSGIX)(Gl.GetDelegateForExtensionMethod("glFragmentLightfvSGIX", typeof(FragmentLightfvSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentLightiSGIX(GLenum light, GLenum pname, GLint param);
        public static FragmentLightiSGIX glFragmentLightiSGIX = ((FragmentLightiSGIX)(Gl.GetDelegateForExtensionMethod("glFragmentLightiSGIX", typeof(FragmentLightiSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentLightivSGIX(GLenum light, GLenum pname, System.IntPtr @params);
        public static FragmentLightivSGIX glFragmentLightivSGIX = ((FragmentLightivSGIX)(Gl.GetDelegateForExtensionMethod("glFragmentLightivSGIX", typeof(FragmentLightivSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentLightModelfSGIX(GLenum pname, GLfloat param);
        public static FragmentLightModelfSGIX glFragmentLightModelfSGIX = ((FragmentLightModelfSGIX)(Gl.GetDelegateForExtensionMethod("glFragmentLightModelfSGIX", typeof(FragmentLightModelfSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentLightModelfvSGIX(GLenum pname, System.IntPtr @params);
        public static FragmentLightModelfvSGIX glFragmentLightModelfvSGIX = ((FragmentLightModelfvSGIX)(Gl.GetDelegateForExtensionMethod("glFragmentLightModelfvSGIX", typeof(FragmentLightModelfvSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentLightModeliSGIX(GLenum pname, GLint param);
        public static FragmentLightModeliSGIX glFragmentLightModeliSGIX = ((FragmentLightModeliSGIX)(Gl.GetDelegateForExtensionMethod("glFragmentLightModeliSGIX", typeof(FragmentLightModeliSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentLightModelivSGIX(GLenum pname, System.IntPtr @params);
        public static FragmentLightModelivSGIX glFragmentLightModelivSGIX = ((FragmentLightModelivSGIX)(Gl.GetDelegateForExtensionMethod("glFragmentLightModelivSGIX", typeof(FragmentLightModelivSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentMaterialfSGIX(GLenum face, GLenum pname, GLfloat param);
        public static FragmentMaterialfSGIX glFragmentMaterialfSGIX = ((FragmentMaterialfSGIX)(Gl.GetDelegateForExtensionMethod("glFragmentMaterialfSGIX", typeof(FragmentMaterialfSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentMaterialfvSGIX(GLenum face, GLenum pname, System.IntPtr @params);
        public static FragmentMaterialfvSGIX glFragmentMaterialfvSGIX = ((FragmentMaterialfvSGIX)(Gl.GetDelegateForExtensionMethod("glFragmentMaterialfvSGIX", typeof(FragmentMaterialfvSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentMaterialiSGIX(GLenum face, GLenum pname, GLint param);
        public static FragmentMaterialiSGIX glFragmentMaterialiSGIX = ((FragmentMaterialiSGIX)(Gl.GetDelegateForExtensionMethod("glFragmentMaterialiSGIX", typeof(FragmentMaterialiSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FragmentMaterialivSGIX(GLenum face, GLenum pname, System.IntPtr @params);
        public static FragmentMaterialivSGIX glFragmentMaterialivSGIX = ((FragmentMaterialivSGIX)(Gl.GetDelegateForExtensionMethod("glFragmentMaterialivSGIX", typeof(FragmentMaterialivSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
        public static FramebufferRenderbufferEXT glFramebufferRenderbufferEXT = ((FramebufferRenderbufferEXT)(Gl.GetDelegateForExtensionMethod("glFramebufferRenderbufferEXT", typeof(FramebufferRenderbufferEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
        public static FramebufferTexture1DEXT glFramebufferTexture1DEXT = ((FramebufferTexture1DEXT)(Gl.GetDelegateForExtensionMethod("glFramebufferTexture1DEXT", typeof(FramebufferTexture1DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
        public static FramebufferTexture2DEXT glFramebufferTexture2DEXT = ((FramebufferTexture2DEXT)(Gl.GetDelegateForExtensionMethod("glFramebufferTexture2DEXT", typeof(FramebufferTexture2DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
        public static FramebufferTexture3DEXT glFramebufferTexture3DEXT = ((FramebufferTexture3DEXT)(Gl.GetDelegateForExtensionMethod("glFramebufferTexture3DEXT", typeof(FramebufferTexture3DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level);
        public static FramebufferTextureEXT glFramebufferTextureEXT = ((FramebufferTextureEXT)(Gl.GetDelegateForExtensionMethod("glFramebufferTextureEXT", typeof(FramebufferTextureEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
        public static FramebufferTextureFaceEXT glFramebufferTextureFaceEXT = ((FramebufferTextureFaceEXT)(Gl.GetDelegateForExtensionMethod("glFramebufferTextureFaceEXT", typeof(FramebufferTextureFaceEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
        public static FramebufferTextureLayerEXT glFramebufferTextureLayerEXT = ((FramebufferTextureLayerEXT)(Gl.GetDelegateForExtensionMethod("glFramebufferTextureLayerEXT", typeof(FramebufferTextureLayerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FrameZoomSGIX(GLint factor);
        public static FrameZoomSGIX glFrameZoomSGIX = ((FrameZoomSGIX)(Gl.GetDelegateForExtensionMethod("glFrameZoomSGIX", typeof(FrameZoomSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FreeObjectBufferATI(GLuint buffer);
        public static FreeObjectBufferATI glFreeObjectBufferATI = ((FreeObjectBufferATI)(Gl.GetDelegateForExtensionMethod("glFreeObjectBufferATI", typeof(FreeObjectBufferATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void FrontFace(GLenum mode);
        public static FrontFace glFrontFace = ((FrontFace)(Gl.GetDelegateForExtensionMethod("glFrontFace", typeof(FrontFace)))) ?? new FrontFace(Imports.FrontFace);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Frustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
        public static Frustum glFrustum = ((Frustum)(Gl.GetDelegateForExtensionMethod("glFrustum", typeof(Frustum)))) ?? new Frustum(Imports.Frustum);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint GenAsyncMarkersSGIX(GLsizei range);
        public static GenAsyncMarkersSGIX glGenAsyncMarkersSGIX = ((GenAsyncMarkersSGIX)(Gl.GetDelegateForExtensionMethod("glGenAsyncMarkersSGIX", typeof(GenAsyncMarkersSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenBuffers(GLsizei n, [In, Out()] System.IntPtr buffers);
        public static GenBuffers glGenBuffers = ((GenBuffers)(Gl.GetDelegateForExtensionMethod("glGenBuffers", typeof(GenBuffers)))) ?? new GenBuffers(Imports.GenBuffers);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenBuffersARB(GLsizei n, [In, Out()] System.IntPtr buffers);
        public static GenBuffersARB glGenBuffersARB = ((GenBuffersARB)(Gl.GetDelegateForExtensionMethod("glGenBuffersARB", typeof(GenBuffersARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenerateMipmapEXT(GLenum target);
        public static GenerateMipmapEXT glGenerateMipmapEXT = ((GenerateMipmapEXT)(Gl.GetDelegateForExtensionMethod("glGenerateMipmapEXT", typeof(GenerateMipmapEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenFencesAPPLE(GLsizei n, [In, Out()] System.IntPtr fences);
        public static GenFencesAPPLE glGenFencesAPPLE = ((GenFencesAPPLE)(Gl.GetDelegateForExtensionMethod("glGenFencesAPPLE", typeof(GenFencesAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenFencesNV(GLsizei n, [In, Out()] System.IntPtr fences);
        public static GenFencesNV glGenFencesNV = ((GenFencesNV)(Gl.GetDelegateForExtensionMethod("glGenFencesNV", typeof(GenFencesNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint GenFragmentShadersATI(GLuint range);
        public static GenFragmentShadersATI glGenFragmentShadersATI = ((GenFragmentShadersATI)(Gl.GetDelegateForExtensionMethod("glGenFragmentShadersATI", typeof(GenFragmentShadersATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenFramebuffersEXT(GLsizei n, [In, Out()] System.IntPtr framebuffers);
        public static GenFramebuffersEXT glGenFramebuffersEXT = ((GenFramebuffersEXT)(Gl.GetDelegateForExtensionMethod("glGenFramebuffersEXT", typeof(GenFramebuffersEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint GenLists(GLsizei range);
        public static GenLists glGenLists = ((GenLists)(Gl.GetDelegateForExtensionMethod("glGenLists", typeof(GenLists)))) ?? new GenLists(Imports.GenLists);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenOcclusionQueriesNV(GLsizei n, [In, Out()] System.IntPtr ids);
        public static GenOcclusionQueriesNV glGenOcclusionQueriesNV = ((GenOcclusionQueriesNV)(Gl.GetDelegateForExtensionMethod("glGenOcclusionQueriesNV", typeof(GenOcclusionQueriesNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenProgramsARB(GLsizei n, [In, Out()] System.IntPtr programs);
        public static GenProgramsARB glGenProgramsARB = ((GenProgramsARB)(Gl.GetDelegateForExtensionMethod("glGenProgramsARB", typeof(GenProgramsARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenProgramsNV(GLsizei n, [In, Out()] System.IntPtr programs);
        public static GenProgramsNV glGenProgramsNV = ((GenProgramsNV)(Gl.GetDelegateForExtensionMethod("glGenProgramsNV", typeof(GenProgramsNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenQueries(GLsizei n, [In, Out()] System.IntPtr ids);
        public static GenQueries glGenQueries = ((GenQueries)(Gl.GetDelegateForExtensionMethod("glGenQueries", typeof(GenQueries)))) ?? new GenQueries(Imports.GenQueries);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenQueriesARB(GLsizei n, [In, Out()] System.IntPtr ids);
        public static GenQueriesARB glGenQueriesARB = ((GenQueriesARB)(Gl.GetDelegateForExtensionMethod("glGenQueriesARB", typeof(GenQueriesARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenRenderbuffersEXT(GLsizei n, [In, Out()] System.IntPtr renderbuffers);
        public static GenRenderbuffersEXT glGenRenderbuffersEXT = ((GenRenderbuffersEXT)(Gl.GetDelegateForExtensionMethod("glGenRenderbuffersEXT", typeof(GenRenderbuffersEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint GenSymbolsEXT(GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
        public static GenSymbolsEXT glGenSymbolsEXT = ((GenSymbolsEXT)(Gl.GetDelegateForExtensionMethod("glGenSymbolsEXT", typeof(GenSymbolsEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenTextures(GLsizei n, [In, Out()] System.IntPtr textures);
        public static GenTextures glGenTextures = ((GenTextures)(Gl.GetDelegateForExtensionMethod("glGenTextures", typeof(GenTextures)))) ?? new GenTextures(Imports.GenTextures);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenTexturesEXT(GLsizei n, [In, Out()] System.IntPtr textures);
        public static GenTexturesEXT glGenTexturesEXT = ((GenTexturesEXT)(Gl.GetDelegateForExtensionMethod("glGenTexturesEXT", typeof(GenTexturesEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GenVertexArraysAPPLE(GLsizei n, [In, Out()] System.IntPtr arrays);
        public static GenVertexArraysAPPLE glGenVertexArraysAPPLE = ((GenVertexArraysAPPLE)(Gl.GetDelegateForExtensionMethod("glGenVertexArraysAPPLE", typeof(GenVertexArraysAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint GenVertexShadersEXT(GLuint range);
        public static GenVertexShadersEXT glGenVertexShadersEXT = ((GenVertexShadersEXT)(Gl.GetDelegateForExtensionMethod("glGenVertexShadersEXT", typeof(GenVertexShadersEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name);
        public static GetActiveAttrib glGetActiveAttrib = ((GetActiveAttrib)(Gl.GetDelegateForExtensionMethod("glGetActiveAttrib", typeof(GetActiveAttrib)))) ?? new GetActiveAttrib(Imports.GetActiveAttrib);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name);
        public static GetActiveAttribARB glGetActiveAttribARB = ((GetActiveAttribARB)(Gl.GetDelegateForExtensionMethod("glGetActiveAttribARB", typeof(GetActiveAttribARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name);
        public static GetActiveUniform glGetActiveUniform = ((GetActiveUniform)(Gl.GetDelegateForExtensionMethod("glGetActiveUniform", typeof(GetActiveUniform)))) ?? new GetActiveUniform(Imports.GetActiveUniform);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name);
        public static GetActiveUniformARB glGetActiveUniformARB = ((GetActiveUniformARB)(Gl.GetDelegateForExtensionMethod("glGetActiveUniformARB", typeof(GetActiveUniformARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetActiveVaryingNV(GLuint program, GLuint index, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.IntPtr size, [In, Out()] System.IntPtr type, [In, Out()] System.Text.StringBuilder name);
        public static GetActiveVaryingNV glGetActiveVaryingNV = ((GetActiveVaryingNV)(Gl.GetDelegateForExtensionMethod("glGetActiveVaryingNV", typeof(GetActiveVaryingNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetArrayObjectfvATI(GLenum array, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetArrayObjectfvATI glGetArrayObjectfvATI = ((GetArrayObjectfvATI)(Gl.GetDelegateForExtensionMethod("glGetArrayObjectfvATI", typeof(GetArrayObjectfvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetArrayObjectivATI(GLenum array, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetArrayObjectivATI glGetArrayObjectivATI = ((GetArrayObjectivATI)(Gl.GetDelegateForExtensionMethod("glGetArrayObjectivATI", typeof(GetArrayObjectivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, [In, Out()] System.IntPtr count, [In, Out()] System.IntPtr obj);
        public static GetAttachedObjectsARB glGetAttachedObjectsARB = ((GetAttachedObjectsARB)(Gl.GetDelegateForExtensionMethod("glGetAttachedObjectsARB", typeof(GetAttachedObjectsARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetAttachedShaders(GLuint program, GLsizei maxCount, [In, Out()] System.IntPtr count, [In, Out()] System.IntPtr obj);
        public static GetAttachedShaders glGetAttachedShaders = ((GetAttachedShaders)(Gl.GetDelegateForExtensionMethod("glGetAttachedShaders", typeof(GetAttachedShaders)))) ?? new GetAttachedShaders(Imports.GetAttachedShaders);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint GetAttribLocation(GLuint program, string name);
        public static GetAttribLocation glGetAttribLocation = ((GetAttribLocation)(Gl.GetDelegateForExtensionMethod("glGetAttribLocation", typeof(GetAttribLocation)))) ?? new GetAttribLocation(Imports.GetAttribLocation);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint GetAttribLocationARB(GLhandleARB programObj, string name);
        public static GetAttribLocationARB glGetAttribLocationARB = ((GetAttribLocationARB)(Gl.GetDelegateForExtensionMethod("glGetAttribLocationARB", typeof(GetAttribLocationARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetBooleanIndexedvEXT(GLenum target, GLuint index, [In, Out()] System.IntPtr data);
        public static GetBooleanIndexedvEXT glGetBooleanIndexedvEXT = ((GetBooleanIndexedvEXT)(Gl.GetDelegateForExtensionMethod("glGetBooleanIndexedvEXT", typeof(GetBooleanIndexedvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetBooleanv(GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetBooleanv glGetBooleanv = ((GetBooleanv)(Gl.GetDelegateForExtensionMethod("glGetBooleanv", typeof(GetBooleanv)))) ?? new GetBooleanv(Imports.GetBooleanv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetBufferParameteriv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetBufferParameteriv glGetBufferParameteriv = ((GetBufferParameteriv)(Gl.GetDelegateForExtensionMethod("glGetBufferParameteriv", typeof(GetBufferParameteriv)))) ?? new GetBufferParameteriv(Imports.GetBufferParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetBufferParameterivARB(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetBufferParameterivARB glGetBufferParameterivARB = ((GetBufferParameterivARB)(Gl.GetDelegateForExtensionMethod("glGetBufferParameterivARB", typeof(GetBufferParameterivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetBufferPointerv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetBufferPointerv glGetBufferPointerv = ((GetBufferPointerv)(Gl.GetDelegateForExtensionMethod("glGetBufferPointerv", typeof(GetBufferPointerv)))) ?? new GetBufferPointerv(Imports.GetBufferPointerv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetBufferPointervARB(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetBufferPointervARB glGetBufferPointervARB = ((GetBufferPointervARB)(Gl.GetDelegateForExtensionMethod("glGetBufferPointervARB", typeof(GetBufferPointervARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, [In, Out()] System.IntPtr data);
        public static GetBufferSubData glGetBufferSubData = ((GetBufferSubData)(Gl.GetDelegateForExtensionMethod("glGetBufferSubData", typeof(GetBufferSubData)))) ?? new GetBufferSubData(Imports.GetBufferSubData);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, [In, Out()] System.IntPtr data);
        public static GetBufferSubDataARB glGetBufferSubDataARB = ((GetBufferSubDataARB)(Gl.GetDelegateForExtensionMethod("glGetBufferSubDataARB", typeof(GetBufferSubDataARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetClipPlane(GLenum plane, [In, Out()] System.IntPtr equation);
        public static GetClipPlane glGetClipPlane = ((GetClipPlane)(Gl.GetDelegateForExtensionMethod("glGetClipPlane", typeof(GetClipPlane)))) ?? new GetClipPlane(Imports.GetClipPlane);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetColorTable(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr table);
        public static GetColorTable glGetColorTable = ((GetColorTable)(Gl.GetDelegateForExtensionMethod("glGetColorTable", typeof(GetColorTable)))) ?? new GetColorTable(Imports.GetColorTable);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetColorTableEXT(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr data);
        public static GetColorTableEXT glGetColorTableEXT = ((GetColorTableEXT)(Gl.GetDelegateForExtensionMethod("glGetColorTableEXT", typeof(GetColorTableEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetColorTableParameterfv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetColorTableParameterfv glGetColorTableParameterfv = ((GetColorTableParameterfv)(Gl.GetDelegateForExtensionMethod("glGetColorTableParameterfv", typeof(GetColorTableParameterfv)))) ?? new GetColorTableParameterfv(Imports.GetColorTableParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetColorTableParameterfvEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetColorTableParameterfvEXT glGetColorTableParameterfvEXT = ((GetColorTableParameterfvEXT)(Gl.GetDelegateForExtensionMethod("glGetColorTableParameterfvEXT", typeof(GetColorTableParameterfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetColorTableParameterfvSGI(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetColorTableParameterfvSGI glGetColorTableParameterfvSGI = ((GetColorTableParameterfvSGI)(Gl.GetDelegateForExtensionMethod("glGetColorTableParameterfvSGI", typeof(GetColorTableParameterfvSGI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetColorTableParameteriv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetColorTableParameteriv glGetColorTableParameteriv = ((GetColorTableParameteriv)(Gl.GetDelegateForExtensionMethod("glGetColorTableParameteriv", typeof(GetColorTableParameteriv)))) ?? new GetColorTableParameteriv(Imports.GetColorTableParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetColorTableParameterivEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetColorTableParameterivEXT glGetColorTableParameterivEXT = ((GetColorTableParameterivEXT)(Gl.GetDelegateForExtensionMethod("glGetColorTableParameterivEXT", typeof(GetColorTableParameterivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetColorTableParameterivSGI(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetColorTableParameterivSGI glGetColorTableParameterivSGI = ((GetColorTableParameterivSGI)(Gl.GetDelegateForExtensionMethod("glGetColorTableParameterivSGI", typeof(GetColorTableParameterivSGI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetColorTableSGI(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr table);
        public static GetColorTableSGI glGetColorTableSGI = ((GetColorTableSGI)(Gl.GetDelegateForExtensionMethod("glGetColorTableSGI", typeof(GetColorTableSGI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetCombinerInputParameterfvNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetCombinerInputParameterfvNV glGetCombinerInputParameterfvNV = ((GetCombinerInputParameterfvNV)(Gl.GetDelegateForExtensionMethod("glGetCombinerInputParameterfvNV", typeof(GetCombinerInputParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetCombinerInputParameterivNV(GLenum stage, GLenum portion, GLenum variable, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetCombinerInputParameterivNV glGetCombinerInputParameterivNV = ((GetCombinerInputParameterivNV)(Gl.GetDelegateForExtensionMethod("glGetCombinerInputParameterivNV", typeof(GetCombinerInputParameterivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetCombinerOutputParameterfvNV(GLenum stage, GLenum portion, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetCombinerOutputParameterfvNV glGetCombinerOutputParameterfvNV = ((GetCombinerOutputParameterfvNV)(Gl.GetDelegateForExtensionMethod("glGetCombinerOutputParameterfvNV", typeof(GetCombinerOutputParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetCombinerOutputParameterivNV(GLenum stage, GLenum portion, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetCombinerOutputParameterivNV glGetCombinerOutputParameterivNV = ((GetCombinerOutputParameterivNV)(Gl.GetDelegateForExtensionMethod("glGetCombinerOutputParameterivNV", typeof(GetCombinerOutputParameterivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetCombinerStageParameterfvNV(GLenum stage, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetCombinerStageParameterfvNV glGetCombinerStageParameterfvNV = ((GetCombinerStageParameterfvNV)(Gl.GetDelegateForExtensionMethod("glGetCombinerStageParameterfvNV", typeof(GetCombinerStageParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetCompressedTexImage(GLenum target, GLint level, [In, Out()] System.IntPtr img);
        public static GetCompressedTexImage glGetCompressedTexImage = ((GetCompressedTexImage)(Gl.GetDelegateForExtensionMethod("glGetCompressedTexImage", typeof(GetCompressedTexImage)))) ?? new GetCompressedTexImage(Imports.GetCompressedTexImage);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetCompressedTexImageARB(GLenum target, GLint level, [In, Out()] System.IntPtr img);
        public static GetCompressedTexImageARB glGetCompressedTexImageARB = ((GetCompressedTexImageARB)(Gl.GetDelegateForExtensionMethod("glGetCompressedTexImageARB", typeof(GetCompressedTexImageARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetConvolutionFilter(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr image);
        public static GetConvolutionFilter glGetConvolutionFilter = ((GetConvolutionFilter)(Gl.GetDelegateForExtensionMethod("glGetConvolutionFilter", typeof(GetConvolutionFilter)))) ?? new GetConvolutionFilter(Imports.GetConvolutionFilter);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetConvolutionFilterEXT(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr image);
        public static GetConvolutionFilterEXT glGetConvolutionFilterEXT = ((GetConvolutionFilterEXT)(Gl.GetDelegateForExtensionMethod("glGetConvolutionFilterEXT", typeof(GetConvolutionFilterEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetConvolutionParameterfv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetConvolutionParameterfv glGetConvolutionParameterfv = ((GetConvolutionParameterfv)(Gl.GetDelegateForExtensionMethod("glGetConvolutionParameterfv", typeof(GetConvolutionParameterfv)))) ?? new GetConvolutionParameterfv(Imports.GetConvolutionParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetConvolutionParameterfvEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetConvolutionParameterfvEXT glGetConvolutionParameterfvEXT = ((GetConvolutionParameterfvEXT)(Gl.GetDelegateForExtensionMethod("glGetConvolutionParameterfvEXT", typeof(GetConvolutionParameterfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetConvolutionParameteriv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetConvolutionParameteriv glGetConvolutionParameteriv = ((GetConvolutionParameteriv)(Gl.GetDelegateForExtensionMethod("glGetConvolutionParameteriv", typeof(GetConvolutionParameteriv)))) ?? new GetConvolutionParameteriv(Imports.GetConvolutionParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetConvolutionParameterivEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetConvolutionParameterivEXT glGetConvolutionParameterivEXT = ((GetConvolutionParameterivEXT)(Gl.GetDelegateForExtensionMethod("glGetConvolutionParameterivEXT", typeof(GetConvolutionParameterivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetDetailTexFuncSGIS(GLenum target, [In, Out()] System.IntPtr points);
        public static GetDetailTexFuncSGIS glGetDetailTexFuncSGIS = ((GetDetailTexFuncSGIS)(Gl.GetDelegateForExtensionMethod("glGetDetailTexFuncSGIS", typeof(GetDetailTexFuncSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetDoublev(GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetDoublev glGetDoublev = ((GetDoublev)(Gl.GetDelegateForExtensionMethod("glGetDoublev", typeof(GetDoublev)))) ?? new GetDoublev(Imports.GetDoublev);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLenum GetError();
        public static GetError glGetError = ((GetError)(Gl.GetDelegateForExtensionMethod("glGetError", typeof(GetError)))) ?? new GetError(Imports.GetError);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFenceivNV(GLuint fence, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetFenceivNV glGetFenceivNV = ((GetFenceivNV)(Gl.GetDelegateForExtensionMethod("glGetFenceivNV", typeof(GetFenceivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFinalCombinerInputParameterfvNV(GLenum variable, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetFinalCombinerInputParameterfvNV glGetFinalCombinerInputParameterfvNV = ((GetFinalCombinerInputParameterfvNV)(Gl.GetDelegateForExtensionMethod("glGetFinalCombinerInputParameterfvNV", typeof(GetFinalCombinerInputParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFinalCombinerInputParameterivNV(GLenum variable, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetFinalCombinerInputParameterivNV glGetFinalCombinerInputParameterivNV = ((GetFinalCombinerInputParameterivNV)(Gl.GetDelegateForExtensionMethod("glGetFinalCombinerInputParameterivNV", typeof(GetFinalCombinerInputParameterivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFloatv(GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetFloatv glGetFloatv = ((GetFloatv)(Gl.GetDelegateForExtensionMethod("glGetFloatv", typeof(GetFloatv)))) ?? new GetFloatv(Imports.GetFloatv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFogFuncSGIS([In, Out()] System.IntPtr points);
        public static GetFogFuncSGIS glGetFogFuncSGIS = ((GetFogFuncSGIS)(Gl.GetDelegateForExtensionMethod("glGetFogFuncSGIS", typeof(GetFogFuncSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint GetFragDataLocationEXT(GLuint program, string name);
        public static GetFragDataLocationEXT glGetFragDataLocationEXT = ((GetFragDataLocationEXT)(Gl.GetDelegateForExtensionMethod("glGetFragDataLocationEXT", typeof(GetFragDataLocationEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFragmentLightfvSGIX(GLenum light, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetFragmentLightfvSGIX glGetFragmentLightfvSGIX = ((GetFragmentLightfvSGIX)(Gl.GetDelegateForExtensionMethod("glGetFragmentLightfvSGIX", typeof(GetFragmentLightfvSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFragmentLightivSGIX(GLenum light, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetFragmentLightivSGIX glGetFragmentLightivSGIX = ((GetFragmentLightivSGIX)(Gl.GetDelegateForExtensionMethod("glGetFragmentLightivSGIX", typeof(GetFragmentLightivSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFragmentMaterialfvSGIX(GLenum face, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetFragmentMaterialfvSGIX glGetFragmentMaterialfvSGIX = ((GetFragmentMaterialfvSGIX)(Gl.GetDelegateForExtensionMethod("glGetFragmentMaterialfvSGIX", typeof(GetFragmentMaterialfvSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFragmentMaterialivSGIX(GLenum face, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetFragmentMaterialivSGIX glGetFragmentMaterialivSGIX = ((GetFragmentMaterialivSGIX)(Gl.GetDelegateForExtensionMethod("glGetFragmentMaterialivSGIX", typeof(GetFragmentMaterialivSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetFramebufferAttachmentParameterivEXT glGetFramebufferAttachmentParameterivEXT = ((GetFramebufferAttachmentParameterivEXT)(Gl.GetDelegateForExtensionMethod("glGetFramebufferAttachmentParameterivEXT", typeof(GetFramebufferAttachmentParameterivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLhandleARB GetHandleARB(GLenum pname);
        public static GetHandleARB glGetHandleARB = ((GetHandleARB)(Gl.GetDelegateForExtensionMethod("glGetHandleARB", typeof(GetHandleARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, [In, Out()] System.IntPtr values);
        public static GetHistogram glGetHistogram = ((GetHistogram)(Gl.GetDelegateForExtensionMethod("glGetHistogram", typeof(GetHistogram)))) ?? new GetHistogram(Imports.GetHistogram);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetHistogramEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, [In, Out()] System.IntPtr values);
        public static GetHistogramEXT glGetHistogramEXT = ((GetHistogramEXT)(Gl.GetDelegateForExtensionMethod("glGetHistogramEXT", typeof(GetHistogramEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetHistogramParameterfv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetHistogramParameterfv glGetHistogramParameterfv = ((GetHistogramParameterfv)(Gl.GetDelegateForExtensionMethod("glGetHistogramParameterfv", typeof(GetHistogramParameterfv)))) ?? new GetHistogramParameterfv(Imports.GetHistogramParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetHistogramParameterfvEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetHistogramParameterfvEXT glGetHistogramParameterfvEXT = ((GetHistogramParameterfvEXT)(Gl.GetDelegateForExtensionMethod("glGetHistogramParameterfvEXT", typeof(GetHistogramParameterfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetHistogramParameteriv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetHistogramParameteriv glGetHistogramParameteriv = ((GetHistogramParameteriv)(Gl.GetDelegateForExtensionMethod("glGetHistogramParameteriv", typeof(GetHistogramParameteriv)))) ?? new GetHistogramParameteriv(Imports.GetHistogramParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetHistogramParameterivEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetHistogramParameterivEXT glGetHistogramParameterivEXT = ((GetHistogramParameterivEXT)(Gl.GetDelegateForExtensionMethod("glGetHistogramParameterivEXT", typeof(GetHistogramParameterivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetImageTransformParameterfvHP(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetImageTransformParameterfvHP glGetImageTransformParameterfvHP = ((GetImageTransformParameterfvHP)(Gl.GetDelegateForExtensionMethod("glGetImageTransformParameterfvHP", typeof(GetImageTransformParameterfvHP))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetImageTransformParameterivHP(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetImageTransformParameterivHP glGetImageTransformParameterivHP = ((GetImageTransformParameterivHP)(Gl.GetDelegateForExtensionMethod("glGetImageTransformParameterivHP", typeof(GetImageTransformParameterivHP))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetInfoLogARB(GLhandleARB obj, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder infoLog);
        public static GetInfoLogARB glGetInfoLogARB = ((GetInfoLogARB)(Gl.GetDelegateForExtensionMethod("glGetInfoLogARB", typeof(GetInfoLogARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint GetInstrumentsSGIX();
        public static GetInstrumentsSGIX glGetInstrumentsSGIX = ((GetInstrumentsSGIX)(Gl.GetDelegateForExtensionMethod("glGetInstrumentsSGIX", typeof(GetInstrumentsSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetIntegerIndexedvEXT(GLenum target, GLuint index, [In, Out()] System.IntPtr data);
        public static GetIntegerIndexedvEXT glGetIntegerIndexedvEXT = ((GetIntegerIndexedvEXT)(Gl.GetDelegateForExtensionMethod("glGetIntegerIndexedvEXT", typeof(GetIntegerIndexedvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetIntegerv(GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetIntegerv glGetIntegerv = ((GetIntegerv)(Gl.GetDelegateForExtensionMethod("glGetIntegerv", typeof(GetIntegerv)))) ?? new GetIntegerv(Imports.GetIntegerv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetInvariantBooleanvEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data);
        public static GetInvariantBooleanvEXT glGetInvariantBooleanvEXT = ((GetInvariantBooleanvEXT)(Gl.GetDelegateForExtensionMethod("glGetInvariantBooleanvEXT", typeof(GetInvariantBooleanvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetInvariantFloatvEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data);
        public static GetInvariantFloatvEXT glGetInvariantFloatvEXT = ((GetInvariantFloatvEXT)(Gl.GetDelegateForExtensionMethod("glGetInvariantFloatvEXT", typeof(GetInvariantFloatvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetInvariantIntegervEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data);
        public static GetInvariantIntegervEXT glGetInvariantIntegervEXT = ((GetInvariantIntegervEXT)(Gl.GetDelegateForExtensionMethod("glGetInvariantIntegervEXT", typeof(GetInvariantIntegervEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetLightfv(GLenum light, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetLightfv glGetLightfv = ((GetLightfv)(Gl.GetDelegateForExtensionMethod("glGetLightfv", typeof(GetLightfv)))) ?? new GetLightfv(Imports.GetLightfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetLightiv(GLenum light, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetLightiv glGetLightiv = ((GetLightiv)(Gl.GetDelegateForExtensionMethod("glGetLightiv", typeof(GetLightiv)))) ?? new GetLightiv(Imports.GetLightiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetListParameterfvSGIX(GLuint list, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetListParameterfvSGIX glGetListParameterfvSGIX = ((GetListParameterfvSGIX)(Gl.GetDelegateForExtensionMethod("glGetListParameterfvSGIX", typeof(GetListParameterfvSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetListParameterivSGIX(GLuint list, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetListParameterivSGIX glGetListParameterivSGIX = ((GetListParameterivSGIX)(Gl.GetDelegateForExtensionMethod("glGetListParameterivSGIX", typeof(GetListParameterivSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetLocalConstantBooleanvEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data);
        public static GetLocalConstantBooleanvEXT glGetLocalConstantBooleanvEXT = ((GetLocalConstantBooleanvEXT)(Gl.GetDelegateForExtensionMethod("glGetLocalConstantBooleanvEXT", typeof(GetLocalConstantBooleanvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetLocalConstantFloatvEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data);
        public static GetLocalConstantFloatvEXT glGetLocalConstantFloatvEXT = ((GetLocalConstantFloatvEXT)(Gl.GetDelegateForExtensionMethod("glGetLocalConstantFloatvEXT", typeof(GetLocalConstantFloatvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetLocalConstantIntegervEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data);
        public static GetLocalConstantIntegervEXT glGetLocalConstantIntegervEXT = ((GetLocalConstantIntegervEXT)(Gl.GetDelegateForExtensionMethod("glGetLocalConstantIntegervEXT", typeof(GetLocalConstantIntegervEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMapAttribParameterfvNV(GLenum target, GLuint index, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetMapAttribParameterfvNV glGetMapAttribParameterfvNV = ((GetMapAttribParameterfvNV)(Gl.GetDelegateForExtensionMethod("glGetMapAttribParameterfvNV", typeof(GetMapAttribParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMapAttribParameterivNV(GLenum target, GLuint index, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetMapAttribParameterivNV glGetMapAttribParameterivNV = ((GetMapAttribParameterivNV)(Gl.GetDelegateForExtensionMethod("glGetMapAttribParameterivNV", typeof(GetMapAttribParameterivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, [In, Out()] System.IntPtr points);
        public static GetMapControlPointsNV glGetMapControlPointsNV = ((GetMapControlPointsNV)(Gl.GetDelegateForExtensionMethod("glGetMapControlPointsNV", typeof(GetMapControlPointsNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMapdv(GLenum target, GLenum query, [In, Out()] System.IntPtr v);
        public static GetMapdv glGetMapdv = ((GetMapdv)(Gl.GetDelegateForExtensionMethod("glGetMapdv", typeof(GetMapdv)))) ?? new GetMapdv(Imports.GetMapdv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMapfv(GLenum target, GLenum query, [In, Out()] System.IntPtr v);
        public static GetMapfv glGetMapfv = ((GetMapfv)(Gl.GetDelegateForExtensionMethod("glGetMapfv", typeof(GetMapfv)))) ?? new GetMapfv(Imports.GetMapfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMapiv(GLenum target, GLenum query, [In, Out()] System.IntPtr v);
        public static GetMapiv glGetMapiv = ((GetMapiv)(Gl.GetDelegateForExtensionMethod("glGetMapiv", typeof(GetMapiv)))) ?? new GetMapiv(Imports.GetMapiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMapParameterfvNV(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetMapParameterfvNV glGetMapParameterfvNV = ((GetMapParameterfvNV)(Gl.GetDelegateForExtensionMethod("glGetMapParameterfvNV", typeof(GetMapParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMapParameterivNV(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetMapParameterivNV glGetMapParameterivNV = ((GetMapParameterivNV)(Gl.GetDelegateForExtensionMethod("glGetMapParameterivNV", typeof(GetMapParameterivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMaterialfv(GLenum face, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetMaterialfv glGetMaterialfv = ((GetMaterialfv)(Gl.GetDelegateForExtensionMethod("glGetMaterialfv", typeof(GetMaterialfv)))) ?? new GetMaterialfv(Imports.GetMaterialfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMaterialiv(GLenum face, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetMaterialiv glGetMaterialiv = ((GetMaterialiv)(Gl.GetDelegateForExtensionMethod("glGetMaterialiv", typeof(GetMaterialiv)))) ?? new GetMaterialiv(Imports.GetMaterialiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, [In, Out()] System.IntPtr values);
        public static GetMinmax glGetMinmax = ((GetMinmax)(Gl.GetDelegateForExtensionMethod("glGetMinmax", typeof(GetMinmax)))) ?? new GetMinmax(Imports.GetMinmax);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMinmaxEXT(GLenum target, GLboolean reset, GLenum format, GLenum type, [In, Out()] System.IntPtr values);
        public static GetMinmaxEXT glGetMinmaxEXT = ((GetMinmaxEXT)(Gl.GetDelegateForExtensionMethod("glGetMinmaxEXT", typeof(GetMinmaxEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMinmaxParameterfv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetMinmaxParameterfv glGetMinmaxParameterfv = ((GetMinmaxParameterfv)(Gl.GetDelegateForExtensionMethod("glGetMinmaxParameterfv", typeof(GetMinmaxParameterfv)))) ?? new GetMinmaxParameterfv(Imports.GetMinmaxParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMinmaxParameterfvEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetMinmaxParameterfvEXT glGetMinmaxParameterfvEXT = ((GetMinmaxParameterfvEXT)(Gl.GetDelegateForExtensionMethod("glGetMinmaxParameterfvEXT", typeof(GetMinmaxParameterfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMinmaxParameteriv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetMinmaxParameteriv glGetMinmaxParameteriv = ((GetMinmaxParameteriv)(Gl.GetDelegateForExtensionMethod("glGetMinmaxParameteriv", typeof(GetMinmaxParameteriv)))) ?? new GetMinmaxParameteriv(Imports.GetMinmaxParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetMinmaxParameterivEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetMinmaxParameterivEXT glGetMinmaxParameterivEXT = ((GetMinmaxParameterivEXT)(Gl.GetDelegateForExtensionMethod("glGetMinmaxParameterivEXT", typeof(GetMinmaxParameterivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetObjectBufferfvATI(GLuint buffer, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetObjectBufferfvATI glGetObjectBufferfvATI = ((GetObjectBufferfvATI)(Gl.GetDelegateForExtensionMethod("glGetObjectBufferfvATI", typeof(GetObjectBufferfvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetObjectBufferivATI(GLuint buffer, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetObjectBufferivATI glGetObjectBufferivATI = ((GetObjectBufferivATI)(Gl.GetDelegateForExtensionMethod("glGetObjectBufferivATI", typeof(GetObjectBufferivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetObjectParameterfvARB(GLhandleARB obj, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetObjectParameterfvARB glGetObjectParameterfvARB = ((GetObjectParameterfvARB)(Gl.GetDelegateForExtensionMethod("glGetObjectParameterfvARB", typeof(GetObjectParameterfvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetObjectParameterivARB(GLhandleARB obj, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetObjectParameterivARB glGetObjectParameterivARB = ((GetObjectParameterivARB)(Gl.GetDelegateForExtensionMethod("glGetObjectParameterivARB", typeof(GetObjectParameterivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetOcclusionQueryivNV(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetOcclusionQueryivNV glGetOcclusionQueryivNV = ((GetOcclusionQueryivNV)(Gl.GetDelegateForExtensionMethod("glGetOcclusionQueryivNV", typeof(GetOcclusionQueryivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetOcclusionQueryuivNV(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetOcclusionQueryuivNV glGetOcclusionQueryuivNV = ((GetOcclusionQueryuivNV)(Gl.GetDelegateForExtensionMethod("glGetOcclusionQueryuivNV", typeof(GetOcclusionQueryuivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetPixelMapfv(GLenum map, [In, Out()] System.IntPtr values);
        public static GetPixelMapfv glGetPixelMapfv = ((GetPixelMapfv)(Gl.GetDelegateForExtensionMethod("glGetPixelMapfv", typeof(GetPixelMapfv)))) ?? new GetPixelMapfv(Imports.GetPixelMapfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetPixelMapuiv(GLenum map, [In, Out()] System.IntPtr values);
        public static GetPixelMapuiv glGetPixelMapuiv = ((GetPixelMapuiv)(Gl.GetDelegateForExtensionMethod("glGetPixelMapuiv", typeof(GetPixelMapuiv)))) ?? new GetPixelMapuiv(Imports.GetPixelMapuiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetPixelMapusv(GLenum map, [In, Out()] System.IntPtr values);
        public static GetPixelMapusv glGetPixelMapusv = ((GetPixelMapusv)(Gl.GetDelegateForExtensionMethod("glGetPixelMapusv", typeof(GetPixelMapusv)))) ?? new GetPixelMapusv(Imports.GetPixelMapusv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetPixelTexGenParameterfvSGIS(GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetPixelTexGenParameterfvSGIS glGetPixelTexGenParameterfvSGIS = ((GetPixelTexGenParameterfvSGIS)(Gl.GetDelegateForExtensionMethod("glGetPixelTexGenParameterfvSGIS", typeof(GetPixelTexGenParameterfvSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetPixelTexGenParameterivSGIS(GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetPixelTexGenParameterivSGIS glGetPixelTexGenParameterivSGIS = ((GetPixelTexGenParameterivSGIS)(Gl.GetDelegateForExtensionMethod("glGetPixelTexGenParameterivSGIS", typeof(GetPixelTexGenParameterivSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetPointerv(GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetPointerv glGetPointerv = ((GetPointerv)(Gl.GetDelegateForExtensionMethod("glGetPointerv", typeof(GetPointerv)))) ?? new GetPointerv(Imports.GetPointerv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetPointervEXT(GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetPointervEXT glGetPointervEXT = ((GetPointervEXT)(Gl.GetDelegateForExtensionMethod("glGetPointervEXT", typeof(GetPointervEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetPolygonStipple([In, Out()] System.IntPtr mask);
        public static GetPolygonStipple glGetPolygonStipple = ((GetPolygonStipple)(Gl.GetDelegateForExtensionMethod("glGetPolygonStipple", typeof(GetPolygonStipple)))) ?? new GetPolygonStipple(Imports.GetPolygonStipple);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramEnvParameterdvARB(GLenum target, GLuint index, [In, Out()] System.IntPtr @params);
        public static GetProgramEnvParameterdvARB glGetProgramEnvParameterdvARB = ((GetProgramEnvParameterdvARB)(Gl.GetDelegateForExtensionMethod("glGetProgramEnvParameterdvARB", typeof(GetProgramEnvParameterdvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramEnvParameterfvARB(GLenum target, GLuint index, [In, Out()] System.IntPtr @params);
        public static GetProgramEnvParameterfvARB glGetProgramEnvParameterfvARB = ((GetProgramEnvParameterfvARB)(Gl.GetDelegateForExtensionMethod("glGetProgramEnvParameterfvARB", typeof(GetProgramEnvParameterfvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramEnvParameterIivNV(GLenum target, GLuint index, [In, Out()] System.IntPtr @params);
        public static GetProgramEnvParameterIivNV glGetProgramEnvParameterIivNV = ((GetProgramEnvParameterIivNV)(Gl.GetDelegateForExtensionMethod("glGetProgramEnvParameterIivNV", typeof(GetProgramEnvParameterIivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramEnvParameterIuivNV(GLenum target, GLuint index, [In, Out()] System.IntPtr @params);
        public static GetProgramEnvParameterIuivNV glGetProgramEnvParameterIuivNV = ((GetProgramEnvParameterIuivNV)(Gl.GetDelegateForExtensionMethod("glGetProgramEnvParameterIuivNV", typeof(GetProgramEnvParameterIuivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramInfoLog(GLuint program, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder infoLog);
        public static GetProgramInfoLog glGetProgramInfoLog = ((GetProgramInfoLog)(Gl.GetDelegateForExtensionMethod("glGetProgramInfoLog", typeof(GetProgramInfoLog)))) ?? new GetProgramInfoLog(Imports.GetProgramInfoLog);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramiv(GLuint program, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetProgramiv glGetProgramiv = ((GetProgramiv)(Gl.GetDelegateForExtensionMethod("glGetProgramiv", typeof(GetProgramiv)))) ?? new GetProgramiv(Imports.GetProgramiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramivARB(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetProgramivARB glGetProgramivARB = ((GetProgramivARB)(Gl.GetDelegateForExtensionMethod("glGetProgramivARB", typeof(GetProgramivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramivNV(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetProgramivNV glGetProgramivNV = ((GetProgramivNV)(Gl.GetDelegateForExtensionMethod("glGetProgramivNV", typeof(GetProgramivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramLocalParameterdvARB(GLenum target, GLuint index, [In, Out()] System.IntPtr @params);
        public static GetProgramLocalParameterdvARB glGetProgramLocalParameterdvARB = ((GetProgramLocalParameterdvARB)(Gl.GetDelegateForExtensionMethod("glGetProgramLocalParameterdvARB", typeof(GetProgramLocalParameterdvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramLocalParameterfvARB(GLenum target, GLuint index, [In, Out()] System.IntPtr @params);
        public static GetProgramLocalParameterfvARB glGetProgramLocalParameterfvARB = ((GetProgramLocalParameterfvARB)(Gl.GetDelegateForExtensionMethod("glGetProgramLocalParameterfvARB", typeof(GetProgramLocalParameterfvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramLocalParameterIivNV(GLenum target, GLuint index, [In, Out()] System.IntPtr @params);
        public static GetProgramLocalParameterIivNV glGetProgramLocalParameterIivNV = ((GetProgramLocalParameterIivNV)(Gl.GetDelegateForExtensionMethod("glGetProgramLocalParameterIivNV", typeof(GetProgramLocalParameterIivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramLocalParameterIuivNV(GLenum target, GLuint index, [In, Out()] System.IntPtr @params);
        public static GetProgramLocalParameterIuivNV glGetProgramLocalParameterIuivNV = ((GetProgramLocalParameterIuivNV)(Gl.GetDelegateForExtensionMethod("glGetProgramLocalParameterIuivNV", typeof(GetProgramLocalParameterIuivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramNamedParameterdvNV(GLuint id, GLsizei len, System.IntPtr name, [In, Out()] System.IntPtr @params);
        public static GetProgramNamedParameterdvNV glGetProgramNamedParameterdvNV = ((GetProgramNamedParameterdvNV)(Gl.GetDelegateForExtensionMethod("glGetProgramNamedParameterdvNV", typeof(GetProgramNamedParameterdvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramNamedParameterfvNV(GLuint id, GLsizei len, System.IntPtr name, [In, Out()] System.IntPtr @params);
        public static GetProgramNamedParameterfvNV glGetProgramNamedParameterfvNV = ((GetProgramNamedParameterfvNV)(Gl.GetDelegateForExtensionMethod("glGetProgramNamedParameterfvNV", typeof(GetProgramNamedParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramParameterdvNV(GLenum target, GLuint index, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetProgramParameterdvNV glGetProgramParameterdvNV = ((GetProgramParameterdvNV)(Gl.GetDelegateForExtensionMethod("glGetProgramParameterdvNV", typeof(GetProgramParameterdvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramParameterfvNV(GLenum target, GLuint index, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetProgramParameterfvNV glGetProgramParameterfvNV = ((GetProgramParameterfvNV)(Gl.GetDelegateForExtensionMethod("glGetProgramParameterfvNV", typeof(GetProgramParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramStringARB(GLenum target, GLenum pname, [In, Out()] System.IntPtr @string);
        public static GetProgramStringARB glGetProgramStringARB = ((GetProgramStringARB)(Gl.GetDelegateForExtensionMethod("glGetProgramStringARB", typeof(GetProgramStringARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetProgramStringNV(GLuint id, GLenum pname, [In, Out()] System.IntPtr program);
        public static GetProgramStringNV glGetProgramStringNV = ((GetProgramStringNV)(Gl.GetDelegateForExtensionMethod("glGetProgramStringNV", typeof(GetProgramStringNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetQueryiv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetQueryiv glGetQueryiv = ((GetQueryiv)(Gl.GetDelegateForExtensionMethod("glGetQueryiv", typeof(GetQueryiv)))) ?? new GetQueryiv(Imports.GetQueryiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetQueryivARB(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetQueryivARB glGetQueryivARB = ((GetQueryivARB)(Gl.GetDelegateForExtensionMethod("glGetQueryivARB", typeof(GetQueryivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetQueryObjecti64vEXT(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetQueryObjecti64vEXT glGetQueryObjecti64vEXT = ((GetQueryObjecti64vEXT)(Gl.GetDelegateForExtensionMethod("glGetQueryObjecti64vEXT", typeof(GetQueryObjecti64vEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetQueryObjectiv(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetQueryObjectiv glGetQueryObjectiv = ((GetQueryObjectiv)(Gl.GetDelegateForExtensionMethod("glGetQueryObjectiv", typeof(GetQueryObjectiv)))) ?? new GetQueryObjectiv(Imports.GetQueryObjectiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetQueryObjectivARB(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetQueryObjectivARB glGetQueryObjectivARB = ((GetQueryObjectivARB)(Gl.GetDelegateForExtensionMethod("glGetQueryObjectivARB", typeof(GetQueryObjectivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetQueryObjectui64vEXT(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetQueryObjectui64vEXT glGetQueryObjectui64vEXT = ((GetQueryObjectui64vEXT)(Gl.GetDelegateForExtensionMethod("glGetQueryObjectui64vEXT", typeof(GetQueryObjectui64vEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetQueryObjectuiv(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetQueryObjectuiv glGetQueryObjectuiv = ((GetQueryObjectuiv)(Gl.GetDelegateForExtensionMethod("glGetQueryObjectuiv", typeof(GetQueryObjectuiv)))) ?? new GetQueryObjectuiv(Imports.GetQueryObjectuiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetQueryObjectuivARB(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetQueryObjectuivARB glGetQueryObjectuivARB = ((GetQueryObjectuivARB)(Gl.GetDelegateForExtensionMethod("glGetQueryObjectuivARB", typeof(GetQueryObjectuivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetRenderbufferParameterivEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetRenderbufferParameterivEXT glGetRenderbufferParameterivEXT = ((GetRenderbufferParameterivEXT)(Gl.GetDelegateForExtensionMethod("glGetRenderbufferParameterivEXT", typeof(GetRenderbufferParameterivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetSeparableFilter(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr row, [In, Out()] System.IntPtr column, [In, Out()] System.IntPtr span);
        public static GetSeparableFilter glGetSeparableFilter = ((GetSeparableFilter)(Gl.GetDelegateForExtensionMethod("glGetSeparableFilter", typeof(GetSeparableFilter)))) ?? new GetSeparableFilter(Imports.GetSeparableFilter);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetSeparableFilterEXT(GLenum target, GLenum format, GLenum type, [In, Out()] System.IntPtr row, [In, Out()] System.IntPtr column, [In, Out()] System.IntPtr span);
        public static GetSeparableFilterEXT glGetSeparableFilterEXT = ((GetSeparableFilterEXT)(Gl.GetDelegateForExtensionMethod("glGetSeparableFilterEXT", typeof(GetSeparableFilterEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetShaderInfoLog(GLuint shader, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder infoLog);
        public static GetShaderInfoLog glGetShaderInfoLog = ((GetShaderInfoLog)(Gl.GetDelegateForExtensionMethod("glGetShaderInfoLog", typeof(GetShaderInfoLog)))) ?? new GetShaderInfoLog(Imports.GetShaderInfoLog);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetShaderiv(GLuint shader, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetShaderiv glGetShaderiv = ((GetShaderiv)(Gl.GetDelegateForExtensionMethod("glGetShaderiv", typeof(GetShaderiv)))) ?? new GetShaderiv(Imports.GetShaderiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetShaderSource(GLuint shader, GLsizei bufSize, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder source);
        public static GetShaderSource glGetShaderSource = ((GetShaderSource)(Gl.GetDelegateForExtensionMethod("glGetShaderSource", typeof(GetShaderSource)))) ?? new GetShaderSource(Imports.GetShaderSource);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, [In, Out()] System.IntPtr length, [In, Out()] System.Text.StringBuilder source);
        public static GetShaderSourceARB glGetShaderSourceARB = ((GetShaderSourceARB)(Gl.GetDelegateForExtensionMethod("glGetShaderSourceARB", typeof(GetShaderSourceARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetSharpenTexFuncSGIS(GLenum target, [In, Out()] System.IntPtr points);
        public static GetSharpenTexFuncSGIS glGetSharpenTexFuncSGIS = ((GetSharpenTexFuncSGIS)(Gl.GetDelegateForExtensionMethod("glGetSharpenTexFuncSGIS", typeof(GetSharpenTexFuncSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate IntPtr GetString(GLenum name);
        public static GetString glGetString = ((GetString)(Gl.GetDelegateForExtensionMethod("glGetString", typeof(GetString)))) ?? new GetString(Imports.GetString);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexBumpParameterfvATI(GLenum pname, [In, Out()] System.IntPtr param);
        public static GetTexBumpParameterfvATI glGetTexBumpParameterfvATI = ((GetTexBumpParameterfvATI)(Gl.GetDelegateForExtensionMethod("glGetTexBumpParameterfvATI", typeof(GetTexBumpParameterfvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexBumpParameterivATI(GLenum pname, [In, Out()] System.IntPtr param);
        public static GetTexBumpParameterivATI glGetTexBumpParameterivATI = ((GetTexBumpParameterivATI)(Gl.GetDelegateForExtensionMethod("glGetTexBumpParameterivATI", typeof(GetTexBumpParameterivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexEnvfv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetTexEnvfv glGetTexEnvfv = ((GetTexEnvfv)(Gl.GetDelegateForExtensionMethod("glGetTexEnvfv", typeof(GetTexEnvfv)))) ?? new GetTexEnvfv(Imports.GetTexEnvfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexEnviv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetTexEnviv glGetTexEnviv = ((GetTexEnviv)(Gl.GetDelegateForExtensionMethod("glGetTexEnviv", typeof(GetTexEnviv)))) ?? new GetTexEnviv(Imports.GetTexEnviv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexFilterFuncSGIS(GLenum target, GLenum filter, [In, Out()] System.IntPtr weights);
        public static GetTexFilterFuncSGIS glGetTexFilterFuncSGIS = ((GetTexFilterFuncSGIS)(Gl.GetDelegateForExtensionMethod("glGetTexFilterFuncSGIS", typeof(GetTexFilterFuncSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexGendv(GLenum coord, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetTexGendv glGetTexGendv = ((GetTexGendv)(Gl.GetDelegateForExtensionMethod("glGetTexGendv", typeof(GetTexGendv)))) ?? new GetTexGendv(Imports.GetTexGendv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexGenfv(GLenum coord, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetTexGenfv glGetTexGenfv = ((GetTexGenfv)(Gl.GetDelegateForExtensionMethod("glGetTexGenfv", typeof(GetTexGenfv)))) ?? new GetTexGenfv(Imports.GetTexGenfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexGeniv(GLenum coord, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetTexGeniv glGetTexGeniv = ((GetTexGeniv)(Gl.GetDelegateForExtensionMethod("glGetTexGeniv", typeof(GetTexGeniv)))) ?? new GetTexGeniv(Imports.GetTexGeniv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexImage(GLenum target, GLint level, GLenum format, GLenum type, [In, Out()] System.IntPtr pixels);
        public static GetTexImage glGetTexImage = ((GetTexImage)(Gl.GetDelegateForExtensionMethod("glGetTexImage", typeof(GetTexImage)))) ?? new GetTexImage(Imports.GetTexImage);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetTexLevelParameterfv glGetTexLevelParameterfv = ((GetTexLevelParameterfv)(Gl.GetDelegateForExtensionMethod("glGetTexLevelParameterfv", typeof(GetTexLevelParameterfv)))) ?? new GetTexLevelParameterfv(Imports.GetTexLevelParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetTexLevelParameteriv glGetTexLevelParameteriv = ((GetTexLevelParameteriv)(Gl.GetDelegateForExtensionMethod("glGetTexLevelParameteriv", typeof(GetTexLevelParameteriv)))) ?? new GetTexLevelParameteriv(Imports.GetTexLevelParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexParameterfv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetTexParameterfv glGetTexParameterfv = ((GetTexParameterfv)(Gl.GetDelegateForExtensionMethod("glGetTexParameterfv", typeof(GetTexParameterfv)))) ?? new GetTexParameterfv(Imports.GetTexParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexParameterIivEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetTexParameterIivEXT glGetTexParameterIivEXT = ((GetTexParameterIivEXT)(Gl.GetDelegateForExtensionMethod("glGetTexParameterIivEXT", typeof(GetTexParameterIivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexParameterIuivEXT(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetTexParameterIuivEXT glGetTexParameterIuivEXT = ((GetTexParameterIuivEXT)(Gl.GetDelegateForExtensionMethod("glGetTexParameterIuivEXT", typeof(GetTexParameterIuivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTexParameteriv(GLenum target, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetTexParameteriv glGetTexParameteriv = ((GetTexParameteriv)(Gl.GetDelegateForExtensionMethod("glGetTexParameteriv", typeof(GetTexParameteriv)))) ?? new GetTexParameteriv(Imports.GetTexParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTrackMatrixivNV(GLenum target, GLuint address, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetTrackMatrixivNV glGetTrackMatrixivNV = ((GetTrackMatrixivNV)(Gl.GetDelegateForExtensionMethod("glGetTrackMatrixivNV", typeof(GetTrackMatrixivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetTransformFeedbackVaryingNV(GLuint program, GLuint index, [In, Out()] System.IntPtr location);
        public static GetTransformFeedbackVaryingNV glGetTransformFeedbackVaryingNV = ((GetTransformFeedbackVaryingNV)(Gl.GetDelegateForExtensionMethod("glGetTransformFeedbackVaryingNV", typeof(GetTransformFeedbackVaryingNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint GetUniformBufferSizeEXT(GLuint program, GLint location);
        public static GetUniformBufferSizeEXT glGetUniformBufferSizeEXT = ((GetUniformBufferSizeEXT)(Gl.GetDelegateForExtensionMethod("glGetUniformBufferSizeEXT", typeof(GetUniformBufferSizeEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetUniformfv(GLuint program, GLint location, [In, Out()] System.IntPtr @params);
        public static GetUniformfv glGetUniformfv = ((GetUniformfv)(Gl.GetDelegateForExtensionMethod("glGetUniformfv", typeof(GetUniformfv)))) ?? new GetUniformfv(Imports.GetUniformfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetUniformfvARB(GLhandleARB programObj, GLint location, [In, Out()] System.IntPtr @params);
        public static GetUniformfvARB glGetUniformfvARB = ((GetUniformfvARB)(Gl.GetDelegateForExtensionMethod("glGetUniformfvARB", typeof(GetUniformfvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetUniformiv(GLuint program, GLint location, [In, Out()] System.IntPtr @params);
        public static GetUniformiv glGetUniformiv = ((GetUniformiv)(Gl.GetDelegateForExtensionMethod("glGetUniformiv", typeof(GetUniformiv)))) ?? new GetUniformiv(Imports.GetUniformiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetUniformivARB(GLhandleARB programObj, GLint location, [In, Out()] System.IntPtr @params);
        public static GetUniformivARB glGetUniformivARB = ((GetUniformivARB)(Gl.GetDelegateForExtensionMethod("glGetUniformivARB", typeof(GetUniformivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint GetUniformLocation(GLuint program, string name);
        public static GetUniformLocation glGetUniformLocation = ((GetUniformLocation)(Gl.GetDelegateForExtensionMethod("glGetUniformLocation", typeof(GetUniformLocation)))) ?? new GetUniformLocation(Imports.GetUniformLocation);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint GetUniformLocationARB(GLhandleARB programObj, string name);
        public static GetUniformLocationARB glGetUniformLocationARB = ((GetUniformLocationARB)(Gl.GetDelegateForExtensionMethod("glGetUniformLocationARB", typeof(GetUniformLocationARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLintptr GetUniformOffsetEXT(GLuint program, GLint location);
        public static GetUniformOffsetEXT glGetUniformOffsetEXT = ((GetUniformOffsetEXT)(Gl.GetDelegateForExtensionMethod("glGetUniformOffsetEXT", typeof(GetUniformOffsetEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetUniformuivEXT(GLuint program, GLint location, [In, Out()] System.IntPtr @params);
        public static GetUniformuivEXT glGetUniformuivEXT = ((GetUniformuivEXT)(Gl.GetDelegateForExtensionMethod("glGetUniformuivEXT", typeof(GetUniformuivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVariantArrayObjectfvATI(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetVariantArrayObjectfvATI glGetVariantArrayObjectfvATI = ((GetVariantArrayObjectfvATI)(Gl.GetDelegateForExtensionMethod("glGetVariantArrayObjectfvATI", typeof(GetVariantArrayObjectfvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVariantArrayObjectivATI(GLuint id, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetVariantArrayObjectivATI glGetVariantArrayObjectivATI = ((GetVariantArrayObjectivATI)(Gl.GetDelegateForExtensionMethod("glGetVariantArrayObjectivATI", typeof(GetVariantArrayObjectivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVariantBooleanvEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data);
        public static GetVariantBooleanvEXT glGetVariantBooleanvEXT = ((GetVariantBooleanvEXT)(Gl.GetDelegateForExtensionMethod("glGetVariantBooleanvEXT", typeof(GetVariantBooleanvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVariantFloatvEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data);
        public static GetVariantFloatvEXT glGetVariantFloatvEXT = ((GetVariantFloatvEXT)(Gl.GetDelegateForExtensionMethod("glGetVariantFloatvEXT", typeof(GetVariantFloatvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVariantIntegervEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data);
        public static GetVariantIntegervEXT glGetVariantIntegervEXT = ((GetVariantIntegervEXT)(Gl.GetDelegateForExtensionMethod("glGetVariantIntegervEXT", typeof(GetVariantIntegervEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVariantPointervEXT(GLuint id, GLenum value, [In, Out()] System.IntPtr data);
        public static GetVariantPointervEXT glGetVariantPointervEXT = ((GetVariantPointervEXT)(Gl.GetDelegateForExtensionMethod("glGetVariantPointervEXT", typeof(GetVariantPointervEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint GetVaryingLocationNV(GLuint program, string name);
        public static GetVaryingLocationNV glGetVaryingLocationNV = ((GetVaryingLocationNV)(Gl.GetDelegateForExtensionMethod("glGetVaryingLocationNV", typeof(GetVaryingLocationNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribArrayObjectfvATI(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribArrayObjectfvATI glGetVertexAttribArrayObjectfvATI = ((GetVertexAttribArrayObjectfvATI)(Gl.GetDelegateForExtensionMethod("glGetVertexAttribArrayObjectfvATI", typeof(GetVertexAttribArrayObjectfvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribArrayObjectivATI(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribArrayObjectivATI glGetVertexAttribArrayObjectivATI = ((GetVertexAttribArrayObjectivATI)(Gl.GetDelegateForExtensionMethod("glGetVertexAttribArrayObjectivATI", typeof(GetVertexAttribArrayObjectivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribdv(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribdv glGetVertexAttribdv = ((GetVertexAttribdv)(Gl.GetDelegateForExtensionMethod("glGetVertexAttribdv", typeof(GetVertexAttribdv)))) ?? new GetVertexAttribdv(Imports.GetVertexAttribdv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribdvARB(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribdvARB glGetVertexAttribdvARB = ((GetVertexAttribdvARB)(Gl.GetDelegateForExtensionMethod("glGetVertexAttribdvARB", typeof(GetVertexAttribdvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribdvNV(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribdvNV glGetVertexAttribdvNV = ((GetVertexAttribdvNV)(Gl.GetDelegateForExtensionMethod("glGetVertexAttribdvNV", typeof(GetVertexAttribdvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribfv(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribfv glGetVertexAttribfv = ((GetVertexAttribfv)(Gl.GetDelegateForExtensionMethod("glGetVertexAttribfv", typeof(GetVertexAttribfv)))) ?? new GetVertexAttribfv(Imports.GetVertexAttribfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribfvARB(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribfvARB glGetVertexAttribfvARB = ((GetVertexAttribfvARB)(Gl.GetDelegateForExtensionMethod("glGetVertexAttribfvARB", typeof(GetVertexAttribfvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribfvNV(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribfvNV glGetVertexAttribfvNV = ((GetVertexAttribfvNV)(Gl.GetDelegateForExtensionMethod("glGetVertexAttribfvNV", typeof(GetVertexAttribfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribIivEXT(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribIivEXT glGetVertexAttribIivEXT = ((GetVertexAttribIivEXT)(Gl.GetDelegateForExtensionMethod("glGetVertexAttribIivEXT", typeof(GetVertexAttribIivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribIuivEXT(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribIuivEXT glGetVertexAttribIuivEXT = ((GetVertexAttribIuivEXT)(Gl.GetDelegateForExtensionMethod("glGetVertexAttribIuivEXT", typeof(GetVertexAttribIuivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribiv(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribiv glGetVertexAttribiv = ((GetVertexAttribiv)(Gl.GetDelegateForExtensionMethod("glGetVertexAttribiv", typeof(GetVertexAttribiv)))) ?? new GetVertexAttribiv(Imports.GetVertexAttribiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribivARB(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribivARB glGetVertexAttribivARB = ((GetVertexAttribivARB)(Gl.GetDelegateForExtensionMethod("glGetVertexAttribivARB", typeof(GetVertexAttribivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribivNV(GLuint index, GLenum pname, [In, Out()] System.IntPtr @params);
        public static GetVertexAttribivNV glGetVertexAttribivNV = ((GetVertexAttribivNV)(Gl.GetDelegateForExtensionMethod("glGetVertexAttribivNV", typeof(GetVertexAttribivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribPointerv(GLuint index, GLenum pname, [In, Out()] System.IntPtr pointer);
        public static GetVertexAttribPointerv glGetVertexAttribPointerv = ((GetVertexAttribPointerv)(Gl.GetDelegateForExtensionMethod("glGetVertexAttribPointerv", typeof(GetVertexAttribPointerv)))) ?? new GetVertexAttribPointerv(Imports.GetVertexAttribPointerv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribPointervARB(GLuint index, GLenum pname, [In, Out()] System.IntPtr pointer);
        public static GetVertexAttribPointervARB glGetVertexAttribPointervARB = ((GetVertexAttribPointervARB)(Gl.GetDelegateForExtensionMethod("glGetVertexAttribPointervARB", typeof(GetVertexAttribPointervARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GetVertexAttribPointervNV(GLuint index, GLenum pname, [In, Out()] System.IntPtr pointer);
        public static GetVertexAttribPointervNV glGetVertexAttribPointervNV = ((GetVertexAttribPointervNV)(Gl.GetDelegateForExtensionMethod("glGetVertexAttribPointervNV", typeof(GetVertexAttribPointervNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GlobalAlphaFactorbSUN(GLbyte factor);
        public static GlobalAlphaFactorbSUN glGlobalAlphaFactorbSUN = ((GlobalAlphaFactorbSUN)(Gl.GetDelegateForExtensionMethod("glGlobalAlphaFactorbSUN", typeof(GlobalAlphaFactorbSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GlobalAlphaFactordSUN(GLdouble factor);
        public static GlobalAlphaFactordSUN glGlobalAlphaFactordSUN = ((GlobalAlphaFactordSUN)(Gl.GetDelegateForExtensionMethod("glGlobalAlphaFactordSUN", typeof(GlobalAlphaFactordSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GlobalAlphaFactorfSUN(GLfloat factor);
        public static GlobalAlphaFactorfSUN glGlobalAlphaFactorfSUN = ((GlobalAlphaFactorfSUN)(Gl.GetDelegateForExtensionMethod("glGlobalAlphaFactorfSUN", typeof(GlobalAlphaFactorfSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GlobalAlphaFactoriSUN(GLint factor);
        public static GlobalAlphaFactoriSUN glGlobalAlphaFactoriSUN = ((GlobalAlphaFactoriSUN)(Gl.GetDelegateForExtensionMethod("glGlobalAlphaFactoriSUN", typeof(GlobalAlphaFactoriSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GlobalAlphaFactorsSUN(GLshort factor);
        public static GlobalAlphaFactorsSUN glGlobalAlphaFactorsSUN = ((GlobalAlphaFactorsSUN)(Gl.GetDelegateForExtensionMethod("glGlobalAlphaFactorsSUN", typeof(GlobalAlphaFactorsSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GlobalAlphaFactorubSUN(GLubyte factor);
        public static GlobalAlphaFactorubSUN glGlobalAlphaFactorubSUN = ((GlobalAlphaFactorubSUN)(Gl.GetDelegateForExtensionMethod("glGlobalAlphaFactorubSUN", typeof(GlobalAlphaFactorubSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GlobalAlphaFactoruiSUN(GLuint factor);
        public static GlobalAlphaFactoruiSUN glGlobalAlphaFactoruiSUN = ((GlobalAlphaFactoruiSUN)(Gl.GetDelegateForExtensionMethod("glGlobalAlphaFactoruiSUN", typeof(GlobalAlphaFactoruiSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void GlobalAlphaFactorusSUN(GLushort factor);
        public static GlobalAlphaFactorusSUN glGlobalAlphaFactorusSUN = ((GlobalAlphaFactorusSUN)(Gl.GetDelegateForExtensionMethod("glGlobalAlphaFactorusSUN", typeof(GlobalAlphaFactorusSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Hint(GLenum target, GLenum mode);
        public static Hint glHint = ((Hint)(Gl.GetDelegateForExtensionMethod("glHint", typeof(Hint)))) ?? new Hint(Imports.Hint);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void HintPGI(GLenum target, GLint mode);
        public static HintPGI glHintPGI = ((HintPGI)(Gl.GetDelegateForExtensionMethod("glHintPGI", typeof(HintPGI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Histogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
        public static Histogram glHistogram = ((Histogram)(Gl.GetDelegateForExtensionMethod("glHistogram", typeof(Histogram)))) ?? new Histogram(Imports.Histogram);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void HistogramEXT(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
        public static HistogramEXT glHistogramEXT = ((HistogramEXT)(Gl.GetDelegateForExtensionMethod("glHistogramEXT", typeof(HistogramEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void IglooInterfaceSGIX(GLenum pname, System.IntPtr @params);
        public static IglooInterfaceSGIX glIglooInterfaceSGIX = ((IglooInterfaceSGIX)(Gl.GetDelegateForExtensionMethod("glIglooInterfaceSGIX", typeof(IglooInterfaceSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ImageTransformParameterfHP(GLenum target, GLenum pname, GLfloat param);
        public static ImageTransformParameterfHP glImageTransformParameterfHP = ((ImageTransformParameterfHP)(Gl.GetDelegateForExtensionMethod("glImageTransformParameterfHP", typeof(ImageTransformParameterfHP))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ImageTransformParameterfvHP(GLenum target, GLenum pname, System.IntPtr @params);
        public static ImageTransformParameterfvHP glImageTransformParameterfvHP = ((ImageTransformParameterfvHP)(Gl.GetDelegateForExtensionMethod("glImageTransformParameterfvHP", typeof(ImageTransformParameterfvHP))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ImageTransformParameteriHP(GLenum target, GLenum pname, GLint param);
        public static ImageTransformParameteriHP glImageTransformParameteriHP = ((ImageTransformParameteriHP)(Gl.GetDelegateForExtensionMethod("glImageTransformParameteriHP", typeof(ImageTransformParameteriHP))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ImageTransformParameterivHP(GLenum target, GLenum pname, System.IntPtr @params);
        public static ImageTransformParameterivHP glImageTransformParameterivHP = ((ImageTransformParameterivHP)(Gl.GetDelegateForExtensionMethod("glImageTransformParameterivHP", typeof(ImageTransformParameterivHP))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexd(GLdouble c);
        public static Indexd glIndexd = ((Indexd)(Gl.GetDelegateForExtensionMethod("glIndexd", typeof(Indexd)))) ?? new Indexd(Imports.Indexd);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexdv(System.IntPtr c);
        public static Indexdv glIndexdv = ((Indexdv)(Gl.GetDelegateForExtensionMethod("glIndexdv", typeof(Indexdv)))) ?? new Indexdv(Imports.Indexdv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexf(GLfloat c);
        public static Indexf glIndexf = ((Indexf)(Gl.GetDelegateForExtensionMethod("glIndexf", typeof(Indexf)))) ?? new Indexf(Imports.Indexf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void IndexFuncEXT(GLenum func, GLclampf @ref);
        public static IndexFuncEXT glIndexFuncEXT = ((IndexFuncEXT)(Gl.GetDelegateForExtensionMethod("glIndexFuncEXT", typeof(IndexFuncEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexfv(System.IntPtr c);
        public static Indexfv glIndexfv = ((Indexfv)(Gl.GetDelegateForExtensionMethod("glIndexfv", typeof(Indexfv)))) ?? new Indexfv(Imports.Indexfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexi(GLint c);
        public static Indexi glIndexi = ((Indexi)(Gl.GetDelegateForExtensionMethod("glIndexi", typeof(Indexi)))) ?? new Indexi(Imports.Indexi);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexiv(System.IntPtr c);
        public static Indexiv glIndexiv = ((Indexiv)(Gl.GetDelegateForExtensionMethod("glIndexiv", typeof(Indexiv)))) ?? new Indexiv(Imports.Indexiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void IndexMask(GLuint mask);
        public static IndexMask glIndexMask = ((IndexMask)(Gl.GetDelegateForExtensionMethod("glIndexMask", typeof(IndexMask)))) ?? new IndexMask(Imports.IndexMask);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void IndexMaterialEXT(GLenum face, GLenum mode);
        public static IndexMaterialEXT glIndexMaterialEXT = ((IndexMaterialEXT)(Gl.GetDelegateForExtensionMethod("glIndexMaterialEXT", typeof(IndexMaterialEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void IndexPointer(GLenum type, GLsizei stride, System.IntPtr pointer);
        public static IndexPointer glIndexPointer = ((IndexPointer)(Gl.GetDelegateForExtensionMethod("glIndexPointer", typeof(IndexPointer)))) ?? new IndexPointer(Imports.IndexPointer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void IndexPointerEXT(GLenum type, GLsizei stride, GLsizei count, System.IntPtr pointer);
        public static IndexPointerEXT glIndexPointerEXT = ((IndexPointerEXT)(Gl.GetDelegateForExtensionMethod("glIndexPointerEXT", typeof(IndexPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void IndexPointerListIBM(GLenum type, GLint stride, System.IntPtr pointer, GLint ptrstride);
        public static IndexPointerListIBM glIndexPointerListIBM = ((IndexPointerListIBM)(Gl.GetDelegateForExtensionMethod("glIndexPointerListIBM", typeof(IndexPointerListIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexs(GLshort c);
        public static Indexs glIndexs = ((Indexs)(Gl.GetDelegateForExtensionMethod("glIndexs", typeof(Indexs)))) ?? new Indexs(Imports.Indexs);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexsv(System.IntPtr c);
        public static Indexsv glIndexsv = ((Indexsv)(Gl.GetDelegateForExtensionMethod("glIndexsv", typeof(Indexsv)))) ?? new Indexsv(Imports.Indexsv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexub(GLubyte c);
        public static Indexub glIndexub = ((Indexub)(Gl.GetDelegateForExtensionMethod("glIndexub", typeof(Indexub)))) ?? new Indexub(Imports.Indexub);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Indexubv(System.IntPtr c);
        public static Indexubv glIndexubv = ((Indexubv)(Gl.GetDelegateForExtensionMethod("glIndexubv", typeof(Indexubv)))) ?? new Indexubv(Imports.Indexubv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void InitNames();
        public static InitNames glInitNames = ((InitNames)(Gl.GetDelegateForExtensionMethod("glInitNames", typeof(InitNames)))) ?? new InitNames(Imports.InitNames);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void InsertComponentEXT(GLuint res, GLuint src, GLuint num);
        public static InsertComponentEXT glInsertComponentEXT = ((InsertComponentEXT)(Gl.GetDelegateForExtensionMethod("glInsertComponentEXT", typeof(InsertComponentEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void InstrumentsBufferSGIX(GLsizei size, [In, Out()] System.IntPtr buffer);
        public static InstrumentsBufferSGIX glInstrumentsBufferSGIX = ((InstrumentsBufferSGIX)(Gl.GetDelegateForExtensionMethod("glInstrumentsBufferSGIX", typeof(InstrumentsBufferSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void InterleavedArrays(GLenum format, GLsizei stride, System.IntPtr pointer);
        public static InterleavedArrays glInterleavedArrays = ((InterleavedArrays)(Gl.GetDelegateForExtensionMethod("glInterleavedArrays", typeof(InterleavedArrays)))) ?? new InterleavedArrays(Imports.InterleavedArrays);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsAsyncMarkerSGIX(GLuint marker);
        public static IsAsyncMarkerSGIX glIsAsyncMarkerSGIX = ((IsAsyncMarkerSGIX)(Gl.GetDelegateForExtensionMethod("glIsAsyncMarkerSGIX", typeof(IsAsyncMarkerSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsBuffer(GLuint buffer);
        public static IsBuffer glIsBuffer = ((IsBuffer)(Gl.GetDelegateForExtensionMethod("glIsBuffer", typeof(IsBuffer)))) ?? new IsBuffer(Imports.IsBuffer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsBufferARB(GLuint buffer);
        public static IsBufferARB glIsBufferARB = ((IsBufferARB)(Gl.GetDelegateForExtensionMethod("glIsBufferARB", typeof(IsBufferARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsEnabled(GLenum cap);
        public static IsEnabled glIsEnabled = ((IsEnabled)(Gl.GetDelegateForExtensionMethod("glIsEnabled", typeof(IsEnabled)))) ?? new IsEnabled(Imports.IsEnabled);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsEnabledIndexedEXT(GLenum target, GLuint index);
        public static IsEnabledIndexedEXT glIsEnabledIndexedEXT = ((IsEnabledIndexedEXT)(Gl.GetDelegateForExtensionMethod("glIsEnabledIndexedEXT", typeof(IsEnabledIndexedEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsFenceAPPLE(GLuint fence);
        public static IsFenceAPPLE glIsFenceAPPLE = ((IsFenceAPPLE)(Gl.GetDelegateForExtensionMethod("glIsFenceAPPLE", typeof(IsFenceAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsFenceNV(GLuint fence);
        public static IsFenceNV glIsFenceNV = ((IsFenceNV)(Gl.GetDelegateForExtensionMethod("glIsFenceNV", typeof(IsFenceNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsFramebufferEXT(GLuint framebuffer);
        public static IsFramebufferEXT glIsFramebufferEXT = ((IsFramebufferEXT)(Gl.GetDelegateForExtensionMethod("glIsFramebufferEXT", typeof(IsFramebufferEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsList(GLuint list);
        public static IsList glIsList = ((IsList)(Gl.GetDelegateForExtensionMethod("glIsList", typeof(IsList)))) ?? new IsList(Imports.IsList);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsObjectBufferATI(GLuint buffer);
        public static IsObjectBufferATI glIsObjectBufferATI = ((IsObjectBufferATI)(Gl.GetDelegateForExtensionMethod("glIsObjectBufferATI", typeof(IsObjectBufferATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsOcclusionQueryNV(GLuint id);
        public static IsOcclusionQueryNV glIsOcclusionQueryNV = ((IsOcclusionQueryNV)(Gl.GetDelegateForExtensionMethod("glIsOcclusionQueryNV", typeof(IsOcclusionQueryNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsProgram(GLuint program);
        public static IsProgram glIsProgram = ((IsProgram)(Gl.GetDelegateForExtensionMethod("glIsProgram", typeof(IsProgram)))) ?? new IsProgram(Imports.IsProgram);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsProgramARB(GLuint program);
        public static IsProgramARB glIsProgramARB = ((IsProgramARB)(Gl.GetDelegateForExtensionMethod("glIsProgramARB", typeof(IsProgramARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsProgramNV(GLuint id);
        public static IsProgramNV glIsProgramNV = ((IsProgramNV)(Gl.GetDelegateForExtensionMethod("glIsProgramNV", typeof(IsProgramNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsQuery(GLuint id);
        public static IsQuery glIsQuery = ((IsQuery)(Gl.GetDelegateForExtensionMethod("glIsQuery", typeof(IsQuery)))) ?? new IsQuery(Imports.IsQuery);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsQueryARB(GLuint id);
        public static IsQueryARB glIsQueryARB = ((IsQueryARB)(Gl.GetDelegateForExtensionMethod("glIsQueryARB", typeof(IsQueryARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsRenderbufferEXT(GLuint renderbuffer);
        public static IsRenderbufferEXT glIsRenderbufferEXT = ((IsRenderbufferEXT)(Gl.GetDelegateForExtensionMethod("glIsRenderbufferEXT", typeof(IsRenderbufferEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsShader(GLuint shader);
        public static IsShader glIsShader = ((IsShader)(Gl.GetDelegateForExtensionMethod("glIsShader", typeof(IsShader)))) ?? new IsShader(Imports.IsShader);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsTexture(GLuint texture);
        public static IsTexture glIsTexture = ((IsTexture)(Gl.GetDelegateForExtensionMethod("glIsTexture", typeof(IsTexture)))) ?? new IsTexture(Imports.IsTexture);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsTextureEXT(GLuint texture);
        public static IsTextureEXT glIsTextureEXT = ((IsTextureEXT)(Gl.GetDelegateForExtensionMethod("glIsTextureEXT", typeof(IsTextureEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsVariantEnabledEXT(GLuint id, GLenum cap);
        public static IsVariantEnabledEXT glIsVariantEnabledEXT = ((IsVariantEnabledEXT)(Gl.GetDelegateForExtensionMethod("glIsVariantEnabledEXT", typeof(IsVariantEnabledEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean IsVertexArrayAPPLE(GLuint array);
        public static IsVertexArrayAPPLE glIsVertexArrayAPPLE = ((IsVertexArrayAPPLE)(Gl.GetDelegateForExtensionMethod("glIsVertexArrayAPPLE", typeof(IsVertexArrayAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LightEnviSGIX(GLenum pname, GLint param);
        public static LightEnviSGIX glLightEnviSGIX = ((LightEnviSGIX)(Gl.GetDelegateForExtensionMethod("glLightEnviSGIX", typeof(LightEnviSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Lightf(GLenum light, GLenum pname, GLfloat param);
        public static Lightf glLightf = ((Lightf)(Gl.GetDelegateForExtensionMethod("glLightf", typeof(Lightf)))) ?? new Lightf(Imports.Lightf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Lightfv(GLenum light, GLenum pname, System.IntPtr @params);
        public static Lightfv glLightfv = ((Lightfv)(Gl.GetDelegateForExtensionMethod("glLightfv", typeof(Lightfv)))) ?? new Lightfv(Imports.Lightfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Lighti(GLenum light, GLenum pname, GLint param);
        public static Lighti glLighti = ((Lighti)(Gl.GetDelegateForExtensionMethod("glLighti", typeof(Lighti)))) ?? new Lighti(Imports.Lighti);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Lightiv(GLenum light, GLenum pname, System.IntPtr @params);
        public static Lightiv glLightiv = ((Lightiv)(Gl.GetDelegateForExtensionMethod("glLightiv", typeof(Lightiv)))) ?? new Lightiv(Imports.Lightiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LightModelf(GLenum pname, GLfloat param);
        public static LightModelf glLightModelf = ((LightModelf)(Gl.GetDelegateForExtensionMethod("glLightModelf", typeof(LightModelf)))) ?? new LightModelf(Imports.LightModelf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LightModelfv(GLenum pname, System.IntPtr @params);
        public static LightModelfv glLightModelfv = ((LightModelfv)(Gl.GetDelegateForExtensionMethod("glLightModelfv", typeof(LightModelfv)))) ?? new LightModelfv(Imports.LightModelfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LightModeli(GLenum pname, GLint param);
        public static LightModeli glLightModeli = ((LightModeli)(Gl.GetDelegateForExtensionMethod("glLightModeli", typeof(LightModeli)))) ?? new LightModeli(Imports.LightModeli);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LightModeliv(GLenum pname, System.IntPtr @params);
        public static LightModeliv glLightModeliv = ((LightModeliv)(Gl.GetDelegateForExtensionMethod("glLightModeliv", typeof(LightModeliv)))) ?? new LightModeliv(Imports.LightModeliv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LineStipple(GLint factor, GLushort pattern);
        public static LineStipple glLineStipple = ((LineStipple)(Gl.GetDelegateForExtensionMethod("glLineStipple", typeof(LineStipple)))) ?? new LineStipple(Imports.LineStipple);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LineWidth(GLfloat width);
        public static LineWidth glLineWidth = ((LineWidth)(Gl.GetDelegateForExtensionMethod("glLineWidth", typeof(LineWidth)))) ?? new LineWidth(Imports.LineWidth);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LinkProgram(GLuint program);
        public static LinkProgram glLinkProgram = ((LinkProgram)(Gl.GetDelegateForExtensionMethod("glLinkProgram", typeof(LinkProgram)))) ?? new LinkProgram(Imports.LinkProgram);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LinkProgramARB(GLhandleARB programObj);
        public static LinkProgramARB glLinkProgramARB = ((LinkProgramARB)(Gl.GetDelegateForExtensionMethod("glLinkProgramARB", typeof(LinkProgramARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ListBase(GLuint @base);
        public static ListBase glListBase = ((ListBase)(Gl.GetDelegateForExtensionMethod("glListBase", typeof(ListBase)))) ?? new ListBase(Imports.ListBase);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ListParameterfSGIX(GLuint list, GLenum pname, GLfloat param);
        public static ListParameterfSGIX glListParameterfSGIX = ((ListParameterfSGIX)(Gl.GetDelegateForExtensionMethod("glListParameterfSGIX", typeof(ListParameterfSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ListParameterfvSGIX(GLuint list, GLenum pname, System.IntPtr @params);
        public static ListParameterfvSGIX glListParameterfvSGIX = ((ListParameterfvSGIX)(Gl.GetDelegateForExtensionMethod("glListParameterfvSGIX", typeof(ListParameterfvSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ListParameteriSGIX(GLuint list, GLenum pname, GLint param);
        public static ListParameteriSGIX glListParameteriSGIX = ((ListParameteriSGIX)(Gl.GetDelegateForExtensionMethod("glListParameteriSGIX", typeof(ListParameteriSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ListParameterivSGIX(GLuint list, GLenum pname, System.IntPtr @params);
        public static ListParameterivSGIX glListParameterivSGIX = ((ListParameterivSGIX)(Gl.GetDelegateForExtensionMethod("glListParameterivSGIX", typeof(ListParameterivSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadIdentity();
        public static LoadIdentity glLoadIdentity = ((LoadIdentity)(Gl.GetDelegateForExtensionMethod("glLoadIdentity", typeof(LoadIdentity)))) ?? new LoadIdentity(Imports.LoadIdentity);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadIdentityDeformationMapSGIX(GLbitfield mask);
        public static LoadIdentityDeformationMapSGIX glLoadIdentityDeformationMapSGIX = ((LoadIdentityDeformationMapSGIX)(Gl.GetDelegateForExtensionMethod("glLoadIdentityDeformationMapSGIX", typeof(LoadIdentityDeformationMapSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadMatrixd(System.IntPtr m);
        public static LoadMatrixd glLoadMatrixd = ((LoadMatrixd)(Gl.GetDelegateForExtensionMethod("glLoadMatrixd", typeof(LoadMatrixd)))) ?? new LoadMatrixd(Imports.LoadMatrixd);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadMatrixf(System.IntPtr m);
        public static LoadMatrixf glLoadMatrixf = ((LoadMatrixf)(Gl.GetDelegateForExtensionMethod("glLoadMatrixf", typeof(LoadMatrixf)))) ?? new LoadMatrixf(Imports.LoadMatrixf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadName(GLuint name);
        public static LoadName glLoadName = ((LoadName)(Gl.GetDelegateForExtensionMethod("glLoadName", typeof(LoadName)))) ?? new LoadName(Imports.LoadName);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadProgramNV(GLenum target, GLuint id, GLsizei len, System.IntPtr program);
        public static LoadProgramNV glLoadProgramNV = ((LoadProgramNV)(Gl.GetDelegateForExtensionMethod("glLoadProgramNV", typeof(LoadProgramNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadTransposeMatrixd(System.IntPtr m);
        public static LoadTransposeMatrixd glLoadTransposeMatrixd = ((LoadTransposeMatrixd)(Gl.GetDelegateForExtensionMethod("glLoadTransposeMatrixd", typeof(LoadTransposeMatrixd)))) ?? new LoadTransposeMatrixd(Imports.LoadTransposeMatrixd);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadTransposeMatrixdARB(System.IntPtr m);
        public static LoadTransposeMatrixdARB glLoadTransposeMatrixdARB = ((LoadTransposeMatrixdARB)(Gl.GetDelegateForExtensionMethod("glLoadTransposeMatrixdARB", typeof(LoadTransposeMatrixdARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadTransposeMatrixf(System.IntPtr m);
        public static LoadTransposeMatrixf glLoadTransposeMatrixf = ((LoadTransposeMatrixf)(Gl.GetDelegateForExtensionMethod("glLoadTransposeMatrixf", typeof(LoadTransposeMatrixf)))) ?? new LoadTransposeMatrixf(Imports.LoadTransposeMatrixf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LoadTransposeMatrixfARB(System.IntPtr m);
        public static LoadTransposeMatrixfARB glLoadTransposeMatrixfARB = ((LoadTransposeMatrixfARB)(Gl.GetDelegateForExtensionMethod("glLoadTransposeMatrixfARB", typeof(LoadTransposeMatrixfARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LockArraysEXT(GLint first, GLsizei count);
        public static LockArraysEXT glLockArraysEXT = ((LockArraysEXT)(Gl.GetDelegateForExtensionMethod("glLockArraysEXT", typeof(LockArraysEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void LogicOp(GLenum opcode);
        public static LogicOp glLogicOp = ((LogicOp)(Gl.GetDelegateForExtensionMethod("glLogicOp", typeof(LogicOp)))) ?? new LogicOp(Imports.LogicOp);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Map1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, System.IntPtr points);
        public static Map1d glMap1d = ((Map1d)(Gl.GetDelegateForExtensionMethod("glMap1d", typeof(Map1d)))) ?? new Map1d(Imports.Map1d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Map1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, System.IntPtr points);
        public static Map1f glMap1f = ((Map1f)(Gl.GetDelegateForExtensionMethod("glMap1f", typeof(Map1f)))) ?? new Map1f(Imports.Map1f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Map2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, System.IntPtr points);
        public static Map2d glMap2d = ((Map2d)(Gl.GetDelegateForExtensionMethod("glMap2d", typeof(Map2d)))) ?? new Map2d(Imports.Map2d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Map2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, System.IntPtr points);
        public static Map2f glMap2f = ((Map2f)(Gl.GetDelegateForExtensionMethod("glMap2f", typeof(Map2f)))) ?? new Map2f(Imports.Map2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate IntPtr MapBuffer(GLenum target, GLenum access);
        public static MapBuffer glMapBuffer = ((MapBuffer)(Gl.GetDelegateForExtensionMethod("glMapBuffer", typeof(MapBuffer)))) ?? new MapBuffer(Imports.MapBuffer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate IntPtr MapBufferARB(GLenum target, GLenum access);
        public static MapBufferARB glMapBufferARB = ((MapBufferARB)(Gl.GetDelegateForExtensionMethod("glMapBufferARB", typeof(MapBufferARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MapControlPointsNV(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, System.IntPtr points);
        public static MapControlPointsNV glMapControlPointsNV = ((MapControlPointsNV)(Gl.GetDelegateForExtensionMethod("glMapControlPointsNV", typeof(MapControlPointsNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MapGrid1d(GLint un, GLdouble u1, GLdouble u2);
        public static MapGrid1d glMapGrid1d = ((MapGrid1d)(Gl.GetDelegateForExtensionMethod("glMapGrid1d", typeof(MapGrid1d)))) ?? new MapGrid1d(Imports.MapGrid1d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MapGrid1f(GLint un, GLfloat u1, GLfloat u2);
        public static MapGrid1f glMapGrid1f = ((MapGrid1f)(Gl.GetDelegateForExtensionMethod("glMapGrid1f", typeof(MapGrid1f)))) ?? new MapGrid1f(Imports.MapGrid1f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
        public static MapGrid2d glMapGrid2d = ((MapGrid2d)(Gl.GetDelegateForExtensionMethod("glMapGrid2d", typeof(MapGrid2d)))) ?? new MapGrid2d(Imports.MapGrid2d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
        public static MapGrid2f glMapGrid2f = ((MapGrid2f)(Gl.GetDelegateForExtensionMethod("glMapGrid2f", typeof(MapGrid2f)))) ?? new MapGrid2f(Imports.MapGrid2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate IntPtr MapObjectBufferATI(GLuint buffer);
        public static MapObjectBufferATI glMapObjectBufferATI = ((MapObjectBufferATI)(Gl.GetDelegateForExtensionMethod("glMapObjectBufferATI", typeof(MapObjectBufferATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MapParameterfvNV(GLenum target, GLenum pname, System.IntPtr @params);
        public static MapParameterfvNV glMapParameterfvNV = ((MapParameterfvNV)(Gl.GetDelegateForExtensionMethod("glMapParameterfvNV", typeof(MapParameterfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MapParameterivNV(GLenum target, GLenum pname, System.IntPtr @params);
        public static MapParameterivNV glMapParameterivNV = ((MapParameterivNV)(Gl.GetDelegateForExtensionMethod("glMapParameterivNV", typeof(MapParameterivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Materialf(GLenum face, GLenum pname, GLfloat param);
        public static Materialf glMaterialf = ((Materialf)(Gl.GetDelegateForExtensionMethod("glMaterialf", typeof(Materialf)))) ?? new Materialf(Imports.Materialf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Materialfv(GLenum face, GLenum pname, System.IntPtr @params);
        public static Materialfv glMaterialfv = ((Materialfv)(Gl.GetDelegateForExtensionMethod("glMaterialfv", typeof(Materialfv)))) ?? new Materialfv(Imports.Materialfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Materiali(GLenum face, GLenum pname, GLint param);
        public static Materiali glMateriali = ((Materiali)(Gl.GetDelegateForExtensionMethod("glMateriali", typeof(Materiali)))) ?? new Materiali(Imports.Materiali);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Materialiv(GLenum face, GLenum pname, System.IntPtr @params);
        public static Materialiv glMaterialiv = ((Materialiv)(Gl.GetDelegateForExtensionMethod("glMaterialiv", typeof(Materialiv)))) ?? new Materialiv(Imports.Materialiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MatrixIndexPointerARB(GLint size, GLenum type, GLsizei stride, System.IntPtr pointer);
        public static MatrixIndexPointerARB glMatrixIndexPointerARB = ((MatrixIndexPointerARB)(Gl.GetDelegateForExtensionMethod("glMatrixIndexPointerARB", typeof(MatrixIndexPointerARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MatrixIndexubvARB(GLint size, System.IntPtr indices);
        public static MatrixIndexubvARB glMatrixIndexubvARB = ((MatrixIndexubvARB)(Gl.GetDelegateForExtensionMethod("glMatrixIndexubvARB", typeof(MatrixIndexubvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MatrixIndexuivARB(GLint size, System.IntPtr indices);
        public static MatrixIndexuivARB glMatrixIndexuivARB = ((MatrixIndexuivARB)(Gl.GetDelegateForExtensionMethod("glMatrixIndexuivARB", typeof(MatrixIndexuivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MatrixIndexusvARB(GLint size, System.IntPtr indices);
        public static MatrixIndexusvARB glMatrixIndexusvARB = ((MatrixIndexusvARB)(Gl.GetDelegateForExtensionMethod("glMatrixIndexusvARB", typeof(MatrixIndexusvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MatrixMode(GLenum mode);
        public static MatrixMode glMatrixMode = ((MatrixMode)(Gl.GetDelegateForExtensionMethod("glMatrixMode", typeof(MatrixMode)))) ?? new MatrixMode(Imports.MatrixMode);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Minmax(GLenum target, GLenum internalformat, GLboolean sink);
        public static Minmax glMinmax = ((Minmax)(Gl.GetDelegateForExtensionMethod("glMinmax", typeof(Minmax)))) ?? new Minmax(Imports.Minmax);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MinmaxEXT(GLenum target, GLenum internalformat, GLboolean sink);
        public static MinmaxEXT glMinmaxEXT = ((MinmaxEXT)(Gl.GetDelegateForExtensionMethod("glMinmaxEXT", typeof(MinmaxEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiDrawArrays(GLenum mode, [In, Out()] System.IntPtr first, [In, Out()] System.IntPtr count, GLsizei primcount);
        public static MultiDrawArrays glMultiDrawArrays = ((MultiDrawArrays)(Gl.GetDelegateForExtensionMethod("glMultiDrawArrays", typeof(MultiDrawArrays)))) ?? new MultiDrawArrays(Imports.MultiDrawArrays);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiDrawArraysEXT(GLenum mode, [In, Out()] System.IntPtr first, [In, Out()] System.IntPtr count, GLsizei primcount);
        public static MultiDrawArraysEXT glMultiDrawArraysEXT = ((MultiDrawArraysEXT)(Gl.GetDelegateForExtensionMethod("glMultiDrawArraysEXT", typeof(MultiDrawArraysEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiDrawElementArrayAPPLE(GLenum mode, System.IntPtr first, System.IntPtr count, GLsizei primcount);
        public static MultiDrawElementArrayAPPLE glMultiDrawElementArrayAPPLE = ((MultiDrawElementArrayAPPLE)(Gl.GetDelegateForExtensionMethod("glMultiDrawElementArrayAPPLE", typeof(MultiDrawElementArrayAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiDrawElements(GLenum mode, System.IntPtr count, GLenum type, System.IntPtr indices, GLsizei primcount);
        public static MultiDrawElements glMultiDrawElements = ((MultiDrawElements)(Gl.GetDelegateForExtensionMethod("glMultiDrawElements", typeof(MultiDrawElements)))) ?? new MultiDrawElements(Imports.MultiDrawElements);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiDrawElementsEXT(GLenum mode, System.IntPtr count, GLenum type, System.IntPtr indices, GLsizei primcount);
        public static MultiDrawElementsEXT glMultiDrawElementsEXT = ((MultiDrawElementsEXT)(Gl.GetDelegateForExtensionMethod("glMultiDrawElementsEXT", typeof(MultiDrawElementsEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, System.IntPtr first, System.IntPtr count, GLsizei primcount);
        public static MultiDrawRangeElementArrayAPPLE glMultiDrawRangeElementArrayAPPLE = ((MultiDrawRangeElementArrayAPPLE)(Gl.GetDelegateForExtensionMethod("glMultiDrawRangeElementArrayAPPLE", typeof(MultiDrawRangeElementArrayAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiModeDrawArraysIBM(System.IntPtr mode, System.IntPtr first, System.IntPtr count, GLsizei primcount, GLint modestride);
        public static MultiModeDrawArraysIBM glMultiModeDrawArraysIBM = ((MultiModeDrawArraysIBM)(Gl.GetDelegateForExtensionMethod("glMultiModeDrawArraysIBM", typeof(MultiModeDrawArraysIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiModeDrawElementsIBM(System.IntPtr mode, System.IntPtr count, GLenum type, System.IntPtr indices, GLsizei primcount, GLint modestride);
        public static MultiModeDrawElementsIBM glMultiModeDrawElementsIBM = ((MultiModeDrawElementsIBM)(Gl.GetDelegateForExtensionMethod("glMultiModeDrawElementsIBM", typeof(MultiModeDrawElementsIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1d(GLenum target, GLdouble s);
        public static MultiTexCoord1d glMultiTexCoord1d = ((MultiTexCoord1d)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord1d", typeof(MultiTexCoord1d)))) ?? new MultiTexCoord1d(Imports.MultiTexCoord1d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1dARB(GLenum target, GLdouble s);
        public static MultiTexCoord1dARB glMultiTexCoord1dARB = ((MultiTexCoord1dARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord1dARB", typeof(MultiTexCoord1dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1dv(GLenum target, System.IntPtr v);
        public static MultiTexCoord1dv glMultiTexCoord1dv = ((MultiTexCoord1dv)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord1dv", typeof(MultiTexCoord1dv)))) ?? new MultiTexCoord1dv(Imports.MultiTexCoord1dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1dvARB(GLenum target, System.IntPtr v);
        public static MultiTexCoord1dvARB glMultiTexCoord1dvARB = ((MultiTexCoord1dvARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord1dvARB", typeof(MultiTexCoord1dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1f(GLenum target, GLfloat s);
        public static MultiTexCoord1f glMultiTexCoord1f = ((MultiTexCoord1f)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord1f", typeof(MultiTexCoord1f)))) ?? new MultiTexCoord1f(Imports.MultiTexCoord1f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1fARB(GLenum target, GLfloat s);
        public static MultiTexCoord1fARB glMultiTexCoord1fARB = ((MultiTexCoord1fARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord1fARB", typeof(MultiTexCoord1fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1fv(GLenum target, System.IntPtr v);
        public static MultiTexCoord1fv glMultiTexCoord1fv = ((MultiTexCoord1fv)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord1fv", typeof(MultiTexCoord1fv)))) ?? new MultiTexCoord1fv(Imports.MultiTexCoord1fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1fvARB(GLenum target, System.IntPtr v);
        public static MultiTexCoord1fvARB glMultiTexCoord1fvARB = ((MultiTexCoord1fvARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord1fvARB", typeof(MultiTexCoord1fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1hNV(GLenum target, GLhalfNV s);
        public static MultiTexCoord1hNV glMultiTexCoord1hNV = ((MultiTexCoord1hNV)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord1hNV", typeof(MultiTexCoord1hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1hvNV(GLenum target, System.IntPtr v);
        public static MultiTexCoord1hvNV glMultiTexCoord1hvNV = ((MultiTexCoord1hvNV)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord1hvNV", typeof(MultiTexCoord1hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1i(GLenum target, GLint s);
        public static MultiTexCoord1i glMultiTexCoord1i = ((MultiTexCoord1i)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord1i", typeof(MultiTexCoord1i)))) ?? new MultiTexCoord1i(Imports.MultiTexCoord1i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1iARB(GLenum target, GLint s);
        public static MultiTexCoord1iARB glMultiTexCoord1iARB = ((MultiTexCoord1iARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord1iARB", typeof(MultiTexCoord1iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1iv(GLenum target, System.IntPtr v);
        public static MultiTexCoord1iv glMultiTexCoord1iv = ((MultiTexCoord1iv)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord1iv", typeof(MultiTexCoord1iv)))) ?? new MultiTexCoord1iv(Imports.MultiTexCoord1iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1ivARB(GLenum target, System.IntPtr v);
        public static MultiTexCoord1ivARB glMultiTexCoord1ivARB = ((MultiTexCoord1ivARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord1ivARB", typeof(MultiTexCoord1ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1s(GLenum target, GLshort s);
        public static MultiTexCoord1s glMultiTexCoord1s = ((MultiTexCoord1s)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord1s", typeof(MultiTexCoord1s)))) ?? new MultiTexCoord1s(Imports.MultiTexCoord1s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1sARB(GLenum target, GLshort s);
        public static MultiTexCoord1sARB glMultiTexCoord1sARB = ((MultiTexCoord1sARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord1sARB", typeof(MultiTexCoord1sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1sv(GLenum target, System.IntPtr v);
        public static MultiTexCoord1sv glMultiTexCoord1sv = ((MultiTexCoord1sv)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord1sv", typeof(MultiTexCoord1sv)))) ?? new MultiTexCoord1sv(Imports.MultiTexCoord1sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord1svARB(GLenum target, System.IntPtr v);
        public static MultiTexCoord1svARB glMultiTexCoord1svARB = ((MultiTexCoord1svARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord1svARB", typeof(MultiTexCoord1svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2d(GLenum target, GLdouble s, GLdouble t);
        public static MultiTexCoord2d glMultiTexCoord2d = ((MultiTexCoord2d)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord2d", typeof(MultiTexCoord2d)))) ?? new MultiTexCoord2d(Imports.MultiTexCoord2d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t);
        public static MultiTexCoord2dARB glMultiTexCoord2dARB = ((MultiTexCoord2dARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord2dARB", typeof(MultiTexCoord2dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2dv(GLenum target, System.IntPtr v);
        public static MultiTexCoord2dv glMultiTexCoord2dv = ((MultiTexCoord2dv)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord2dv", typeof(MultiTexCoord2dv)))) ?? new MultiTexCoord2dv(Imports.MultiTexCoord2dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2dvARB(GLenum target, System.IntPtr v);
        public static MultiTexCoord2dvARB glMultiTexCoord2dvARB = ((MultiTexCoord2dvARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord2dvARB", typeof(MultiTexCoord2dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2f(GLenum target, GLfloat s, GLfloat t);
        public static MultiTexCoord2f glMultiTexCoord2f = ((MultiTexCoord2f)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord2f", typeof(MultiTexCoord2f)))) ?? new MultiTexCoord2f(Imports.MultiTexCoord2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t);
        public static MultiTexCoord2fARB glMultiTexCoord2fARB = ((MultiTexCoord2fARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord2fARB", typeof(MultiTexCoord2fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2fv(GLenum target, System.IntPtr v);
        public static MultiTexCoord2fv glMultiTexCoord2fv = ((MultiTexCoord2fv)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord2fv", typeof(MultiTexCoord2fv)))) ?? new MultiTexCoord2fv(Imports.MultiTexCoord2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2fvARB(GLenum target, System.IntPtr v);
        public static MultiTexCoord2fvARB glMultiTexCoord2fvARB = ((MultiTexCoord2fvARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord2fvARB", typeof(MultiTexCoord2fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2hNV(GLenum target, GLhalfNV s, GLhalfNV t);
        public static MultiTexCoord2hNV glMultiTexCoord2hNV = ((MultiTexCoord2hNV)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord2hNV", typeof(MultiTexCoord2hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2hvNV(GLenum target, System.IntPtr v);
        public static MultiTexCoord2hvNV glMultiTexCoord2hvNV = ((MultiTexCoord2hvNV)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord2hvNV", typeof(MultiTexCoord2hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2i(GLenum target, GLint s, GLint t);
        public static MultiTexCoord2i glMultiTexCoord2i = ((MultiTexCoord2i)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord2i", typeof(MultiTexCoord2i)))) ?? new MultiTexCoord2i(Imports.MultiTexCoord2i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2iARB(GLenum target, GLint s, GLint t);
        public static MultiTexCoord2iARB glMultiTexCoord2iARB = ((MultiTexCoord2iARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord2iARB", typeof(MultiTexCoord2iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2iv(GLenum target, System.IntPtr v);
        public static MultiTexCoord2iv glMultiTexCoord2iv = ((MultiTexCoord2iv)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord2iv", typeof(MultiTexCoord2iv)))) ?? new MultiTexCoord2iv(Imports.MultiTexCoord2iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2ivARB(GLenum target, System.IntPtr v);
        public static MultiTexCoord2ivARB glMultiTexCoord2ivARB = ((MultiTexCoord2ivARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord2ivARB", typeof(MultiTexCoord2ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2s(GLenum target, GLshort s, GLshort t);
        public static MultiTexCoord2s glMultiTexCoord2s = ((MultiTexCoord2s)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord2s", typeof(MultiTexCoord2s)))) ?? new MultiTexCoord2s(Imports.MultiTexCoord2s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2sARB(GLenum target, GLshort s, GLshort t);
        public static MultiTexCoord2sARB glMultiTexCoord2sARB = ((MultiTexCoord2sARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord2sARB", typeof(MultiTexCoord2sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2sv(GLenum target, System.IntPtr v);
        public static MultiTexCoord2sv glMultiTexCoord2sv = ((MultiTexCoord2sv)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord2sv", typeof(MultiTexCoord2sv)))) ?? new MultiTexCoord2sv(Imports.MultiTexCoord2sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord2svARB(GLenum target, System.IntPtr v);
        public static MultiTexCoord2svARB glMultiTexCoord2svARB = ((MultiTexCoord2svARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord2svARB", typeof(MultiTexCoord2svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r);
        public static MultiTexCoord3d glMultiTexCoord3d = ((MultiTexCoord3d)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord3d", typeof(MultiTexCoord3d)))) ?? new MultiTexCoord3d(Imports.MultiTexCoord3d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r);
        public static MultiTexCoord3dARB glMultiTexCoord3dARB = ((MultiTexCoord3dARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord3dARB", typeof(MultiTexCoord3dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3dv(GLenum target, System.IntPtr v);
        public static MultiTexCoord3dv glMultiTexCoord3dv = ((MultiTexCoord3dv)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord3dv", typeof(MultiTexCoord3dv)))) ?? new MultiTexCoord3dv(Imports.MultiTexCoord3dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3dvARB(GLenum target, System.IntPtr v);
        public static MultiTexCoord3dvARB glMultiTexCoord3dvARB = ((MultiTexCoord3dvARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord3dvARB", typeof(MultiTexCoord3dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r);
        public static MultiTexCoord3f glMultiTexCoord3f = ((MultiTexCoord3f)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord3f", typeof(MultiTexCoord3f)))) ?? new MultiTexCoord3f(Imports.MultiTexCoord3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r);
        public static MultiTexCoord3fARB glMultiTexCoord3fARB = ((MultiTexCoord3fARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord3fARB", typeof(MultiTexCoord3fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3fv(GLenum target, System.IntPtr v);
        public static MultiTexCoord3fv glMultiTexCoord3fv = ((MultiTexCoord3fv)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord3fv", typeof(MultiTexCoord3fv)))) ?? new MultiTexCoord3fv(Imports.MultiTexCoord3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3fvARB(GLenum target, System.IntPtr v);
        public static MultiTexCoord3fvARB glMultiTexCoord3fvARB = ((MultiTexCoord3fvARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord3fvARB", typeof(MultiTexCoord3fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
        public static MultiTexCoord3hNV glMultiTexCoord3hNV = ((MultiTexCoord3hNV)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord3hNV", typeof(MultiTexCoord3hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3hvNV(GLenum target, System.IntPtr v);
        public static MultiTexCoord3hvNV glMultiTexCoord3hvNV = ((MultiTexCoord3hvNV)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord3hvNV", typeof(MultiTexCoord3hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r);
        public static MultiTexCoord3i glMultiTexCoord3i = ((MultiTexCoord3i)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord3i", typeof(MultiTexCoord3i)))) ?? new MultiTexCoord3i(Imports.MultiTexCoord3i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r);
        public static MultiTexCoord3iARB glMultiTexCoord3iARB = ((MultiTexCoord3iARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord3iARB", typeof(MultiTexCoord3iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3iv(GLenum target, System.IntPtr v);
        public static MultiTexCoord3iv glMultiTexCoord3iv = ((MultiTexCoord3iv)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord3iv", typeof(MultiTexCoord3iv)))) ?? new MultiTexCoord3iv(Imports.MultiTexCoord3iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3ivARB(GLenum target, System.IntPtr v);
        public static MultiTexCoord3ivARB glMultiTexCoord3ivARB = ((MultiTexCoord3ivARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord3ivARB", typeof(MultiTexCoord3ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r);
        public static MultiTexCoord3s glMultiTexCoord3s = ((MultiTexCoord3s)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord3s", typeof(MultiTexCoord3s)))) ?? new MultiTexCoord3s(Imports.MultiTexCoord3s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r);
        public static MultiTexCoord3sARB glMultiTexCoord3sARB = ((MultiTexCoord3sARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord3sARB", typeof(MultiTexCoord3sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3sv(GLenum target, System.IntPtr v);
        public static MultiTexCoord3sv glMultiTexCoord3sv = ((MultiTexCoord3sv)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord3sv", typeof(MultiTexCoord3sv)))) ?? new MultiTexCoord3sv(Imports.MultiTexCoord3sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord3svARB(GLenum target, System.IntPtr v);
        public static MultiTexCoord3svARB glMultiTexCoord3svARB = ((MultiTexCoord3svARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord3svARB", typeof(MultiTexCoord3svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
        public static MultiTexCoord4d glMultiTexCoord4d = ((MultiTexCoord4d)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord4d", typeof(MultiTexCoord4d)))) ?? new MultiTexCoord4d(Imports.MultiTexCoord4d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
        public static MultiTexCoord4dARB glMultiTexCoord4dARB = ((MultiTexCoord4dARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord4dARB", typeof(MultiTexCoord4dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4dv(GLenum target, System.IntPtr v);
        public static MultiTexCoord4dv glMultiTexCoord4dv = ((MultiTexCoord4dv)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord4dv", typeof(MultiTexCoord4dv)))) ?? new MultiTexCoord4dv(Imports.MultiTexCoord4dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4dvARB(GLenum target, System.IntPtr v);
        public static MultiTexCoord4dvARB glMultiTexCoord4dvARB = ((MultiTexCoord4dvARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord4dvARB", typeof(MultiTexCoord4dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
        public static MultiTexCoord4f glMultiTexCoord4f = ((MultiTexCoord4f)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord4f", typeof(MultiTexCoord4f)))) ?? new MultiTexCoord4f(Imports.MultiTexCoord4f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
        public static MultiTexCoord4fARB glMultiTexCoord4fARB = ((MultiTexCoord4fARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord4fARB", typeof(MultiTexCoord4fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4fv(GLenum target, System.IntPtr v);
        public static MultiTexCoord4fv glMultiTexCoord4fv = ((MultiTexCoord4fv)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord4fv", typeof(MultiTexCoord4fv)))) ?? new MultiTexCoord4fv(Imports.MultiTexCoord4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4fvARB(GLenum target, System.IntPtr v);
        public static MultiTexCoord4fvARB glMultiTexCoord4fvARB = ((MultiTexCoord4fvARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord4fvARB", typeof(MultiTexCoord4fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4hNV(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
        public static MultiTexCoord4hNV glMultiTexCoord4hNV = ((MultiTexCoord4hNV)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord4hNV", typeof(MultiTexCoord4hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4hvNV(GLenum target, System.IntPtr v);
        public static MultiTexCoord4hvNV glMultiTexCoord4hvNV = ((MultiTexCoord4hvNV)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord4hvNV", typeof(MultiTexCoord4hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q);
        public static MultiTexCoord4i glMultiTexCoord4i = ((MultiTexCoord4i)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord4i", typeof(MultiTexCoord4i)))) ?? new MultiTexCoord4i(Imports.MultiTexCoord4i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q);
        public static MultiTexCoord4iARB glMultiTexCoord4iARB = ((MultiTexCoord4iARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord4iARB", typeof(MultiTexCoord4iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4iv(GLenum target, System.IntPtr v);
        public static MultiTexCoord4iv glMultiTexCoord4iv = ((MultiTexCoord4iv)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord4iv", typeof(MultiTexCoord4iv)))) ?? new MultiTexCoord4iv(Imports.MultiTexCoord4iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4ivARB(GLenum target, System.IntPtr v);
        public static MultiTexCoord4ivARB glMultiTexCoord4ivARB = ((MultiTexCoord4ivARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord4ivARB", typeof(MultiTexCoord4ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
        public static MultiTexCoord4s glMultiTexCoord4s = ((MultiTexCoord4s)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord4s", typeof(MultiTexCoord4s)))) ?? new MultiTexCoord4s(Imports.MultiTexCoord4s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
        public static MultiTexCoord4sARB glMultiTexCoord4sARB = ((MultiTexCoord4sARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord4sARB", typeof(MultiTexCoord4sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4sv(GLenum target, System.IntPtr v);
        public static MultiTexCoord4sv glMultiTexCoord4sv = ((MultiTexCoord4sv)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord4sv", typeof(MultiTexCoord4sv)))) ?? new MultiTexCoord4sv(Imports.MultiTexCoord4sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultiTexCoord4svARB(GLenum target, System.IntPtr v);
        public static MultiTexCoord4svARB glMultiTexCoord4svARB = ((MultiTexCoord4svARB)(Gl.GetDelegateForExtensionMethod("glMultiTexCoord4svARB", typeof(MultiTexCoord4svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultMatrixd(System.IntPtr m);
        public static MultMatrixd glMultMatrixd = ((MultMatrixd)(Gl.GetDelegateForExtensionMethod("glMultMatrixd", typeof(MultMatrixd)))) ?? new MultMatrixd(Imports.MultMatrixd);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultMatrixf(System.IntPtr m);
        public static MultMatrixf glMultMatrixf = ((MultMatrixf)(Gl.GetDelegateForExtensionMethod("glMultMatrixf", typeof(MultMatrixf)))) ?? new MultMatrixf(Imports.MultMatrixf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultTransposeMatrixd(System.IntPtr m);
        public static MultTransposeMatrixd glMultTransposeMatrixd = ((MultTransposeMatrixd)(Gl.GetDelegateForExtensionMethod("glMultTransposeMatrixd", typeof(MultTransposeMatrixd)))) ?? new MultTransposeMatrixd(Imports.MultTransposeMatrixd);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultTransposeMatrixdARB(System.IntPtr m);
        public static MultTransposeMatrixdARB glMultTransposeMatrixdARB = ((MultTransposeMatrixdARB)(Gl.GetDelegateForExtensionMethod("glMultTransposeMatrixdARB", typeof(MultTransposeMatrixdARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultTransposeMatrixf(System.IntPtr m);
        public static MultTransposeMatrixf glMultTransposeMatrixf = ((MultTransposeMatrixf)(Gl.GetDelegateForExtensionMethod("glMultTransposeMatrixf", typeof(MultTransposeMatrixf)))) ?? new MultTransposeMatrixf(Imports.MultTransposeMatrixf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void MultTransposeMatrixfARB(System.IntPtr m);
        public static MultTransposeMatrixfARB glMultTransposeMatrixfARB = ((MultTransposeMatrixfARB)(Gl.GetDelegateForExtensionMethod("glMultTransposeMatrixfARB", typeof(MultTransposeMatrixfARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NewList(GLuint list, GLenum mode);
        public static NewList glNewList = ((NewList)(Gl.GetDelegateForExtensionMethod("glNewList", typeof(NewList)))) ?? new NewList(Imports.NewList);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLuint NewObjectBufferATI(GLsizei size, System.IntPtr pointer, GLenum usage);
        public static NewObjectBufferATI glNewObjectBufferATI = ((NewObjectBufferATI)(Gl.GetDelegateForExtensionMethod("glNewObjectBufferATI", typeof(NewObjectBufferATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3b(GLbyte nx, GLbyte ny, GLbyte nz);
        public static Normal3b glNormal3b = ((Normal3b)(Gl.GetDelegateForExtensionMethod("glNormal3b", typeof(Normal3b)))) ?? new Normal3b(Imports.Normal3b);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3bv(System.IntPtr v);
        public static Normal3bv glNormal3bv = ((Normal3bv)(Gl.GetDelegateForExtensionMethod("glNormal3bv", typeof(Normal3bv)))) ?? new Normal3bv(Imports.Normal3bv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3d(GLdouble nx, GLdouble ny, GLdouble nz);
        public static Normal3d glNormal3d = ((Normal3d)(Gl.GetDelegateForExtensionMethod("glNormal3d", typeof(Normal3d)))) ?? new Normal3d(Imports.Normal3d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3dv(System.IntPtr v);
        public static Normal3dv glNormal3dv = ((Normal3dv)(Gl.GetDelegateForExtensionMethod("glNormal3dv", typeof(Normal3dv)))) ?? new Normal3dv(Imports.Normal3dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3f(GLfloat nx, GLfloat ny, GLfloat nz);
        public static Normal3f glNormal3f = ((Normal3f)(Gl.GetDelegateForExtensionMethod("glNormal3f", typeof(Normal3f)))) ?? new Normal3f(Imports.Normal3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3fv(System.IntPtr v);
        public static Normal3fv glNormal3fv = ((Normal3fv)(Gl.GetDelegateForExtensionMethod("glNormal3fv", typeof(Normal3fv)))) ?? new Normal3fv(Imports.Normal3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3fVertex3fSUN(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        public static Normal3fVertex3fSUN glNormal3fVertex3fSUN = ((Normal3fVertex3fSUN)(Gl.GetDelegateForExtensionMethod("glNormal3fVertex3fSUN", typeof(Normal3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3fVertex3fvSUN(System.IntPtr n, System.IntPtr v);
        public static Normal3fVertex3fvSUN glNormal3fVertex3fvSUN = ((Normal3fVertex3fvSUN)(Gl.GetDelegateForExtensionMethod("glNormal3fVertex3fvSUN", typeof(Normal3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3hNV(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
        public static Normal3hNV glNormal3hNV = ((Normal3hNV)(Gl.GetDelegateForExtensionMethod("glNormal3hNV", typeof(Normal3hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3hvNV(System.IntPtr v);
        public static Normal3hvNV glNormal3hvNV = ((Normal3hvNV)(Gl.GetDelegateForExtensionMethod("glNormal3hvNV", typeof(Normal3hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3i(GLint nx, GLint ny, GLint nz);
        public static Normal3i glNormal3i = ((Normal3i)(Gl.GetDelegateForExtensionMethod("glNormal3i", typeof(Normal3i)))) ?? new Normal3i(Imports.Normal3i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3iv(System.IntPtr v);
        public static Normal3iv glNormal3iv = ((Normal3iv)(Gl.GetDelegateForExtensionMethod("glNormal3iv", typeof(Normal3iv)))) ?? new Normal3iv(Imports.Normal3iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3s(GLshort nx, GLshort ny, GLshort nz);
        public static Normal3s glNormal3s = ((Normal3s)(Gl.GetDelegateForExtensionMethod("glNormal3s", typeof(Normal3s)))) ?? new Normal3s(Imports.Normal3s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Normal3sv(System.IntPtr v);
        public static Normal3sv glNormal3sv = ((Normal3sv)(Gl.GetDelegateForExtensionMethod("glNormal3sv", typeof(Normal3sv)))) ?? new Normal3sv(Imports.Normal3sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalPointer(GLenum type, GLsizei stride, System.IntPtr pointer);
        public static NormalPointer glNormalPointer = ((NormalPointer)(Gl.GetDelegateForExtensionMethod("glNormalPointer", typeof(NormalPointer)))) ?? new NormalPointer(Imports.NormalPointer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalPointerEXT(GLenum type, GLsizei stride, GLsizei count, System.IntPtr pointer);
        public static NormalPointerEXT glNormalPointerEXT = ((NormalPointerEXT)(Gl.GetDelegateForExtensionMethod("glNormalPointerEXT", typeof(NormalPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalPointerListIBM(GLenum type, GLint stride, System.IntPtr pointer, GLint ptrstride);
        public static NormalPointerListIBM glNormalPointerListIBM = ((NormalPointerListIBM)(Gl.GetDelegateForExtensionMethod("glNormalPointerListIBM", typeof(NormalPointerListIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalPointervINTEL(GLenum type, System.IntPtr pointer);
        public static NormalPointervINTEL glNormalPointervINTEL = ((NormalPointervINTEL)(Gl.GetDelegateForExtensionMethod("glNormalPointervINTEL", typeof(NormalPointervINTEL))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3bATI(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
        public static NormalStream3bATI glNormalStream3bATI = ((NormalStream3bATI)(Gl.GetDelegateForExtensionMethod("glNormalStream3bATI", typeof(NormalStream3bATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3bvATI(GLenum stream, System.IntPtr coords);
        public static NormalStream3bvATI glNormalStream3bvATI = ((NormalStream3bvATI)(Gl.GetDelegateForExtensionMethod("glNormalStream3bvATI", typeof(NormalStream3bvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3dATI(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
        public static NormalStream3dATI glNormalStream3dATI = ((NormalStream3dATI)(Gl.GetDelegateForExtensionMethod("glNormalStream3dATI", typeof(NormalStream3dATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3dvATI(GLenum stream, System.IntPtr coords);
        public static NormalStream3dvATI glNormalStream3dvATI = ((NormalStream3dvATI)(Gl.GetDelegateForExtensionMethod("glNormalStream3dvATI", typeof(NormalStream3dvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3fATI(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
        public static NormalStream3fATI glNormalStream3fATI = ((NormalStream3fATI)(Gl.GetDelegateForExtensionMethod("glNormalStream3fATI", typeof(NormalStream3fATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3fvATI(GLenum stream, System.IntPtr coords);
        public static NormalStream3fvATI glNormalStream3fvATI = ((NormalStream3fvATI)(Gl.GetDelegateForExtensionMethod("glNormalStream3fvATI", typeof(NormalStream3fvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3iATI(GLenum stream, GLint nx, GLint ny, GLint nz);
        public static NormalStream3iATI glNormalStream3iATI = ((NormalStream3iATI)(Gl.GetDelegateForExtensionMethod("glNormalStream3iATI", typeof(NormalStream3iATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3ivATI(GLenum stream, System.IntPtr coords);
        public static NormalStream3ivATI glNormalStream3ivATI = ((NormalStream3ivATI)(Gl.GetDelegateForExtensionMethod("glNormalStream3ivATI", typeof(NormalStream3ivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3sATI(GLenum stream, GLshort nx, GLshort ny, GLshort nz);
        public static NormalStream3sATI glNormalStream3sATI = ((NormalStream3sATI)(Gl.GetDelegateForExtensionMethod("glNormalStream3sATI", typeof(NormalStream3sATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void NormalStream3svATI(GLenum stream, System.IntPtr coords);
        public static NormalStream3svATI glNormalStream3svATI = ((NormalStream3svATI)(Gl.GetDelegateForExtensionMethod("glNormalStream3svATI", typeof(NormalStream3svATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
        public static Ortho glOrtho = ((Ortho)(Gl.GetDelegateForExtensionMethod("glOrtho", typeof(Ortho)))) ?? new Ortho(Imports.Ortho);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PassTexCoordATI(GLuint dst, GLuint coord, GLenum swizzle);
        public static PassTexCoordATI glPassTexCoordATI = ((PassTexCoordATI)(Gl.GetDelegateForExtensionMethod("glPassTexCoordATI", typeof(PassTexCoordATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PassThrough(GLfloat token);
        public static PassThrough glPassThrough = ((PassThrough)(Gl.GetDelegateForExtensionMethod("glPassThrough", typeof(PassThrough)))) ?? new PassThrough(Imports.PassThrough);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelDataRangeNV(GLenum target, GLsizei length, [In, Out()] System.IntPtr pointer);
        public static PixelDataRangeNV glPixelDataRangeNV = ((PixelDataRangeNV)(Gl.GetDelegateForExtensionMethod("glPixelDataRangeNV", typeof(PixelDataRangeNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelMapfv(GLenum map, GLint mapsize, System.IntPtr values);
        public static PixelMapfv glPixelMapfv = ((PixelMapfv)(Gl.GetDelegateForExtensionMethod("glPixelMapfv", typeof(PixelMapfv)))) ?? new PixelMapfv(Imports.PixelMapfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelMapuiv(GLenum map, GLint mapsize, System.IntPtr values);
        public static PixelMapuiv glPixelMapuiv = ((PixelMapuiv)(Gl.GetDelegateForExtensionMethod("glPixelMapuiv", typeof(PixelMapuiv)))) ?? new PixelMapuiv(Imports.PixelMapuiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelMapusv(GLenum map, GLint mapsize, System.IntPtr values);
        public static PixelMapusv glPixelMapusv = ((PixelMapusv)(Gl.GetDelegateForExtensionMethod("glPixelMapusv", typeof(PixelMapusv)))) ?? new PixelMapusv(Imports.PixelMapusv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelStoref(GLenum pname, GLfloat param);
        public static PixelStoref glPixelStoref = ((PixelStoref)(Gl.GetDelegateForExtensionMethod("glPixelStoref", typeof(PixelStoref)))) ?? new PixelStoref(Imports.PixelStoref);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelStorei(GLenum pname, GLint param);
        public static PixelStorei glPixelStorei = ((PixelStorei)(Gl.GetDelegateForExtensionMethod("glPixelStorei", typeof(PixelStorei)))) ?? new PixelStorei(Imports.PixelStorei);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTexGenParameterfSGIS(GLenum pname, GLfloat param);
        public static PixelTexGenParameterfSGIS glPixelTexGenParameterfSGIS = ((PixelTexGenParameterfSGIS)(Gl.GetDelegateForExtensionMethod("glPixelTexGenParameterfSGIS", typeof(PixelTexGenParameterfSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTexGenParameterfvSGIS(GLenum pname, System.IntPtr @params);
        public static PixelTexGenParameterfvSGIS glPixelTexGenParameterfvSGIS = ((PixelTexGenParameterfvSGIS)(Gl.GetDelegateForExtensionMethod("glPixelTexGenParameterfvSGIS", typeof(PixelTexGenParameterfvSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTexGenParameteriSGIS(GLenum pname, GLint param);
        public static PixelTexGenParameteriSGIS glPixelTexGenParameteriSGIS = ((PixelTexGenParameteriSGIS)(Gl.GetDelegateForExtensionMethod("glPixelTexGenParameteriSGIS", typeof(PixelTexGenParameteriSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTexGenParameterivSGIS(GLenum pname, System.IntPtr @params);
        public static PixelTexGenParameterivSGIS glPixelTexGenParameterivSGIS = ((PixelTexGenParameterivSGIS)(Gl.GetDelegateForExtensionMethod("glPixelTexGenParameterivSGIS", typeof(PixelTexGenParameterivSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTexGenSGIX(GLenum mode);
        public static PixelTexGenSGIX glPixelTexGenSGIX = ((PixelTexGenSGIX)(Gl.GetDelegateForExtensionMethod("glPixelTexGenSGIX", typeof(PixelTexGenSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTransferf(GLenum pname, GLfloat param);
        public static PixelTransferf glPixelTransferf = ((PixelTransferf)(Gl.GetDelegateForExtensionMethod("glPixelTransferf", typeof(PixelTransferf)))) ?? new PixelTransferf(Imports.PixelTransferf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTransferi(GLenum pname, GLint param);
        public static PixelTransferi glPixelTransferi = ((PixelTransferi)(Gl.GetDelegateForExtensionMethod("glPixelTransferi", typeof(PixelTransferi)))) ?? new PixelTransferi(Imports.PixelTransferi);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTransformParameterfEXT(GLenum target, GLenum pname, GLfloat param);
        public static PixelTransformParameterfEXT glPixelTransformParameterfEXT = ((PixelTransformParameterfEXT)(Gl.GetDelegateForExtensionMethod("glPixelTransformParameterfEXT", typeof(PixelTransformParameterfEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTransformParameterfvEXT(GLenum target, GLenum pname, System.IntPtr @params);
        public static PixelTransformParameterfvEXT glPixelTransformParameterfvEXT = ((PixelTransformParameterfvEXT)(Gl.GetDelegateForExtensionMethod("glPixelTransformParameterfvEXT", typeof(PixelTransformParameterfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTransformParameteriEXT(GLenum target, GLenum pname, GLint param);
        public static PixelTransformParameteriEXT glPixelTransformParameteriEXT = ((PixelTransformParameteriEXT)(Gl.GetDelegateForExtensionMethod("glPixelTransformParameteriEXT", typeof(PixelTransformParameteriEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelTransformParameterivEXT(GLenum target, GLenum pname, System.IntPtr @params);
        public static PixelTransformParameterivEXT glPixelTransformParameterivEXT = ((PixelTransformParameterivEXT)(Gl.GetDelegateForExtensionMethod("glPixelTransformParameterivEXT", typeof(PixelTransformParameterivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PixelZoom(GLfloat xfactor, GLfloat yfactor);
        public static PixelZoom glPixelZoom = ((PixelZoom)(Gl.GetDelegateForExtensionMethod("glPixelZoom", typeof(PixelZoom)))) ?? new PixelZoom(Imports.PixelZoom);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PNTrianglesfATI(GLenum pname, GLfloat param);
        public static PNTrianglesfATI glPNTrianglesfATI = ((PNTrianglesfATI)(Gl.GetDelegateForExtensionMethod("glPNTrianglesfATI", typeof(PNTrianglesfATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PNTrianglesiATI(GLenum pname, GLint param);
        public static PNTrianglesiATI glPNTrianglesiATI = ((PNTrianglesiATI)(Gl.GetDelegateForExtensionMethod("glPNTrianglesiATI", typeof(PNTrianglesiATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameterf(GLenum pname, GLfloat param);
        public static PointParameterf glPointParameterf = ((PointParameterf)(Gl.GetDelegateForExtensionMethod("glPointParameterf", typeof(PointParameterf)))) ?? new PointParameterf(Imports.PointParameterf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameterfARB(GLenum pname, GLfloat param);
        public static PointParameterfARB glPointParameterfARB = ((PointParameterfARB)(Gl.GetDelegateForExtensionMethod("glPointParameterfARB", typeof(PointParameterfARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameterfEXT(GLenum pname, GLfloat param);
        public static PointParameterfEXT glPointParameterfEXT = ((PointParameterfEXT)(Gl.GetDelegateForExtensionMethod("glPointParameterfEXT", typeof(PointParameterfEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameterfSGIS(GLenum pname, GLfloat param);
        public static PointParameterfSGIS glPointParameterfSGIS = ((PointParameterfSGIS)(Gl.GetDelegateForExtensionMethod("glPointParameterfSGIS", typeof(PointParameterfSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameterfv(GLenum pname, System.IntPtr @params);
        public static PointParameterfv glPointParameterfv = ((PointParameterfv)(Gl.GetDelegateForExtensionMethod("glPointParameterfv", typeof(PointParameterfv)))) ?? new PointParameterfv(Imports.PointParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameterfvARB(GLenum pname, System.IntPtr @params);
        public static PointParameterfvARB glPointParameterfvARB = ((PointParameterfvARB)(Gl.GetDelegateForExtensionMethod("glPointParameterfvARB", typeof(PointParameterfvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameterfvEXT(GLenum pname, System.IntPtr @params);
        public static PointParameterfvEXT glPointParameterfvEXT = ((PointParameterfvEXT)(Gl.GetDelegateForExtensionMethod("glPointParameterfvEXT", typeof(PointParameterfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameterfvSGIS(GLenum pname, System.IntPtr @params);
        public static PointParameterfvSGIS glPointParameterfvSGIS = ((PointParameterfvSGIS)(Gl.GetDelegateForExtensionMethod("glPointParameterfvSGIS", typeof(PointParameterfvSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameteri(GLenum pname, GLint param);
        public static PointParameteri glPointParameteri = ((PointParameteri)(Gl.GetDelegateForExtensionMethod("glPointParameteri", typeof(PointParameteri)))) ?? new PointParameteri(Imports.PointParameteri);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameteriNV(GLenum pname, GLint param);
        public static PointParameteriNV glPointParameteriNV = ((PointParameteriNV)(Gl.GetDelegateForExtensionMethod("glPointParameteriNV", typeof(PointParameteriNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameteriv(GLenum pname, System.IntPtr @params);
        public static PointParameteriv glPointParameteriv = ((PointParameteriv)(Gl.GetDelegateForExtensionMethod("glPointParameteriv", typeof(PointParameteriv)))) ?? new PointParameteriv(Imports.PointParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointParameterivNV(GLenum pname, System.IntPtr @params);
        public static PointParameterivNV glPointParameterivNV = ((PointParameterivNV)(Gl.GetDelegateForExtensionMethod("glPointParameterivNV", typeof(PointParameterivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PointSize(GLfloat size);
        public static PointSize glPointSize = ((PointSize)(Gl.GetDelegateForExtensionMethod("glPointSize", typeof(PointSize)))) ?? new PointSize(Imports.PointSize);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint PollAsyncSGIX([In, Out()] System.IntPtr markerp);
        public static PollAsyncSGIX glPollAsyncSGIX = ((PollAsyncSGIX)(Gl.GetDelegateForExtensionMethod("glPollAsyncSGIX", typeof(PollAsyncSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint PollInstrumentsSGIX([In, Out()] System.IntPtr marker_p);
        public static PollInstrumentsSGIX glPollInstrumentsSGIX = ((PollInstrumentsSGIX)(Gl.GetDelegateForExtensionMethod("glPollInstrumentsSGIX", typeof(PollInstrumentsSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PolygonMode(GLenum face, GLenum mode);
        public static PolygonMode glPolygonMode = ((PolygonMode)(Gl.GetDelegateForExtensionMethod("glPolygonMode", typeof(PolygonMode)))) ?? new PolygonMode(Imports.PolygonMode);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PolygonOffset(GLfloat factor, GLfloat units);
        public static PolygonOffset glPolygonOffset = ((PolygonOffset)(Gl.GetDelegateForExtensionMethod("glPolygonOffset", typeof(PolygonOffset)))) ?? new PolygonOffset(Imports.PolygonOffset);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PolygonOffsetEXT(GLfloat factor, GLfloat bias);
        public static PolygonOffsetEXT glPolygonOffsetEXT = ((PolygonOffsetEXT)(Gl.GetDelegateForExtensionMethod("glPolygonOffsetEXT", typeof(PolygonOffsetEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PolygonStipple(System.IntPtr mask);
        public static PolygonStipple glPolygonStipple = ((PolygonStipple)(Gl.GetDelegateForExtensionMethod("glPolygonStipple", typeof(PolygonStipple)))) ?? new PolygonStipple(Imports.PolygonStipple);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PopAttrib();
        public static PopAttrib glPopAttrib = ((PopAttrib)(Gl.GetDelegateForExtensionMethod("glPopAttrib", typeof(PopAttrib)))) ?? new PopAttrib(Imports.PopAttrib);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PopClientAttrib();
        public static PopClientAttrib glPopClientAttrib = ((PopClientAttrib)(Gl.GetDelegateForExtensionMethod("glPopClientAttrib", typeof(PopClientAttrib)))) ?? new PopClientAttrib(Imports.PopClientAttrib);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PopMatrix();
        public static PopMatrix glPopMatrix = ((PopMatrix)(Gl.GetDelegateForExtensionMethod("glPopMatrix", typeof(PopMatrix)))) ?? new PopMatrix(Imports.PopMatrix);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PopName();
        public static PopName glPopName = ((PopName)(Gl.GetDelegateForExtensionMethod("glPopName", typeof(PopName)))) ?? new PopName(Imports.PopName);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PrimitiveRestartIndexNV(GLuint index);
        public static PrimitiveRestartIndexNV glPrimitiveRestartIndexNV = ((PrimitiveRestartIndexNV)(Gl.GetDelegateForExtensionMethod("glPrimitiveRestartIndexNV", typeof(PrimitiveRestartIndexNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PrimitiveRestartNV();
        public static PrimitiveRestartNV glPrimitiveRestartNV = ((PrimitiveRestartNV)(Gl.GetDelegateForExtensionMethod("glPrimitiveRestartNV", typeof(PrimitiveRestartNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PrioritizeTextures(GLsizei n, System.IntPtr textures, System.IntPtr priorities);
        public static PrioritizeTextures glPrioritizeTextures = ((PrioritizeTextures)(Gl.GetDelegateForExtensionMethod("glPrioritizeTextures", typeof(PrioritizeTextures)))) ?? new PrioritizeTextures(Imports.PrioritizeTextures);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PrioritizeTexturesEXT(GLsizei n, System.IntPtr textures, System.IntPtr priorities);
        public static PrioritizeTexturesEXT glPrioritizeTexturesEXT = ((PrioritizeTexturesEXT)(Gl.GetDelegateForExtensionMethod("glPrioritizeTexturesEXT", typeof(PrioritizeTexturesEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramBufferParametersfvNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, System.IntPtr @params);
        public static ProgramBufferParametersfvNV glProgramBufferParametersfvNV = ((ProgramBufferParametersfvNV)(Gl.GetDelegateForExtensionMethod("glProgramBufferParametersfvNV", typeof(ProgramBufferParametersfvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramBufferParametersIivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, System.IntPtr @params);
        public static ProgramBufferParametersIivNV glProgramBufferParametersIivNV = ((ProgramBufferParametersIivNV)(Gl.GetDelegateForExtensionMethod("glProgramBufferParametersIivNV", typeof(ProgramBufferParametersIivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramBufferParametersIuivNV(GLenum target, GLuint buffer, GLuint index, GLsizei count, System.IntPtr @params);
        public static ProgramBufferParametersIuivNV glProgramBufferParametersIuivNV = ((ProgramBufferParametersIuivNV)(Gl.GetDelegateForExtensionMethod("glProgramBufferParametersIuivNV", typeof(ProgramBufferParametersIuivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static ProgramEnvParameter4dARB glProgramEnvParameter4dARB = ((ProgramEnvParameter4dARB)(Gl.GetDelegateForExtensionMethod("glProgramEnvParameter4dARB", typeof(ProgramEnvParameter4dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParameter4dvARB(GLenum target, GLuint index, System.IntPtr @params);
        public static ProgramEnvParameter4dvARB glProgramEnvParameter4dvARB = ((ProgramEnvParameter4dvARB)(Gl.GetDelegateForExtensionMethod("glProgramEnvParameter4dvARB", typeof(ProgramEnvParameter4dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static ProgramEnvParameter4fARB glProgramEnvParameter4fARB = ((ProgramEnvParameter4fARB)(Gl.GetDelegateForExtensionMethod("glProgramEnvParameter4fARB", typeof(ProgramEnvParameter4fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParameter4fvARB(GLenum target, GLuint index, System.IntPtr @params);
        public static ProgramEnvParameter4fvARB glProgramEnvParameter4fvARB = ((ProgramEnvParameter4fvARB)(Gl.GetDelegateForExtensionMethod("glProgramEnvParameter4fvARB", typeof(ProgramEnvParameter4fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
        public static ProgramEnvParameterI4iNV glProgramEnvParameterI4iNV = ((ProgramEnvParameterI4iNV)(Gl.GetDelegateForExtensionMethod("glProgramEnvParameterI4iNV", typeof(ProgramEnvParameterI4iNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParameterI4ivNV(GLenum target, GLuint index, System.IntPtr @params);
        public static ProgramEnvParameterI4ivNV glProgramEnvParameterI4ivNV = ((ProgramEnvParameterI4ivNV)(Gl.GetDelegateForExtensionMethod("glProgramEnvParameterI4ivNV", typeof(ProgramEnvParameterI4ivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
        public static ProgramEnvParameterI4uiNV glProgramEnvParameterI4uiNV = ((ProgramEnvParameterI4uiNV)(Gl.GetDelegateForExtensionMethod("glProgramEnvParameterI4uiNV", typeof(ProgramEnvParameterI4uiNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParameterI4uivNV(GLenum target, GLuint index, System.IntPtr @params);
        public static ProgramEnvParameterI4uivNV glProgramEnvParameterI4uivNV = ((ProgramEnvParameterI4uivNV)(Gl.GetDelegateForExtensionMethod("glProgramEnvParameterI4uivNV", typeof(ProgramEnvParameterI4uivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, System.IntPtr @params);
        public static ProgramEnvParameters4fvEXT glProgramEnvParameters4fvEXT = ((ProgramEnvParameters4fvEXT)(Gl.GetDelegateForExtensionMethod("glProgramEnvParameters4fvEXT", typeof(ProgramEnvParameters4fvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParametersI4ivNV(GLenum target, GLuint index, GLsizei count, System.IntPtr @params);
        public static ProgramEnvParametersI4ivNV glProgramEnvParametersI4ivNV = ((ProgramEnvParametersI4ivNV)(Gl.GetDelegateForExtensionMethod("glProgramEnvParametersI4ivNV", typeof(ProgramEnvParametersI4ivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramEnvParametersI4uivNV(GLenum target, GLuint index, GLsizei count, System.IntPtr @params);
        public static ProgramEnvParametersI4uivNV glProgramEnvParametersI4uivNV = ((ProgramEnvParametersI4uivNV)(Gl.GetDelegateForExtensionMethod("glProgramEnvParametersI4uivNV", typeof(ProgramEnvParametersI4uivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static ProgramLocalParameter4dARB glProgramLocalParameter4dARB = ((ProgramLocalParameter4dARB)(Gl.GetDelegateForExtensionMethod("glProgramLocalParameter4dARB", typeof(ProgramLocalParameter4dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParameter4dvARB(GLenum target, GLuint index, System.IntPtr @params);
        public static ProgramLocalParameter4dvARB glProgramLocalParameter4dvARB = ((ProgramLocalParameter4dvARB)(Gl.GetDelegateForExtensionMethod("glProgramLocalParameter4dvARB", typeof(ProgramLocalParameter4dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static ProgramLocalParameter4fARB glProgramLocalParameter4fARB = ((ProgramLocalParameter4fARB)(Gl.GetDelegateForExtensionMethod("glProgramLocalParameter4fARB", typeof(ProgramLocalParameter4fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParameter4fvARB(GLenum target, GLuint index, System.IntPtr @params);
        public static ProgramLocalParameter4fvARB glProgramLocalParameter4fvARB = ((ProgramLocalParameter4fvARB)(Gl.GetDelegateForExtensionMethod("glProgramLocalParameter4fvARB", typeof(ProgramLocalParameter4fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParameterI4iNV(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
        public static ProgramLocalParameterI4iNV glProgramLocalParameterI4iNV = ((ProgramLocalParameterI4iNV)(Gl.GetDelegateForExtensionMethod("glProgramLocalParameterI4iNV", typeof(ProgramLocalParameterI4iNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParameterI4ivNV(GLenum target, GLuint index, System.IntPtr @params);
        public static ProgramLocalParameterI4ivNV glProgramLocalParameterI4ivNV = ((ProgramLocalParameterI4ivNV)(Gl.GetDelegateForExtensionMethod("glProgramLocalParameterI4ivNV", typeof(ProgramLocalParameterI4ivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParameterI4uiNV(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
        public static ProgramLocalParameterI4uiNV glProgramLocalParameterI4uiNV = ((ProgramLocalParameterI4uiNV)(Gl.GetDelegateForExtensionMethod("glProgramLocalParameterI4uiNV", typeof(ProgramLocalParameterI4uiNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParameterI4uivNV(GLenum target, GLuint index, System.IntPtr @params);
        public static ProgramLocalParameterI4uivNV glProgramLocalParameterI4uivNV = ((ProgramLocalParameterI4uivNV)(Gl.GetDelegateForExtensionMethod("glProgramLocalParameterI4uivNV", typeof(ProgramLocalParameterI4uivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, System.IntPtr @params);
        public static ProgramLocalParameters4fvEXT glProgramLocalParameters4fvEXT = ((ProgramLocalParameters4fvEXT)(Gl.GetDelegateForExtensionMethod("glProgramLocalParameters4fvEXT", typeof(ProgramLocalParameters4fvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParametersI4ivNV(GLenum target, GLuint index, GLsizei count, System.IntPtr @params);
        public static ProgramLocalParametersI4ivNV glProgramLocalParametersI4ivNV = ((ProgramLocalParametersI4ivNV)(Gl.GetDelegateForExtensionMethod("glProgramLocalParametersI4ivNV", typeof(ProgramLocalParametersI4ivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramLocalParametersI4uivNV(GLenum target, GLuint index, GLsizei count, System.IntPtr @params);
        public static ProgramLocalParametersI4uivNV glProgramLocalParametersI4uivNV = ((ProgramLocalParametersI4uivNV)(Gl.GetDelegateForExtensionMethod("glProgramLocalParametersI4uivNV", typeof(ProgramLocalParametersI4uivNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramNamedParameter4dNV(GLuint id, GLsizei len, System.IntPtr name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static ProgramNamedParameter4dNV glProgramNamedParameter4dNV = ((ProgramNamedParameter4dNV)(Gl.GetDelegateForExtensionMethod("glProgramNamedParameter4dNV", typeof(ProgramNamedParameter4dNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramNamedParameter4dvNV(GLuint id, GLsizei len, System.IntPtr name, System.IntPtr v);
        public static ProgramNamedParameter4dvNV glProgramNamedParameter4dvNV = ((ProgramNamedParameter4dvNV)(Gl.GetDelegateForExtensionMethod("glProgramNamedParameter4dvNV", typeof(ProgramNamedParameter4dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramNamedParameter4fNV(GLuint id, GLsizei len, System.IntPtr name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static ProgramNamedParameter4fNV glProgramNamedParameter4fNV = ((ProgramNamedParameter4fNV)(Gl.GetDelegateForExtensionMethod("glProgramNamedParameter4fNV", typeof(ProgramNamedParameter4fNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramNamedParameter4fvNV(GLuint id, GLsizei len, System.IntPtr name, System.IntPtr v);
        public static ProgramNamedParameter4fvNV glProgramNamedParameter4fvNV = ((ProgramNamedParameter4fvNV)(Gl.GetDelegateForExtensionMethod("glProgramNamedParameter4fvNV", typeof(ProgramNamedParameter4fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramParameter4dNV(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static ProgramParameter4dNV glProgramParameter4dNV = ((ProgramParameter4dNV)(Gl.GetDelegateForExtensionMethod("glProgramParameter4dNV", typeof(ProgramParameter4dNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramParameter4dvNV(GLenum target, GLuint index, System.IntPtr v);
        public static ProgramParameter4dvNV glProgramParameter4dvNV = ((ProgramParameter4dvNV)(Gl.GetDelegateForExtensionMethod("glProgramParameter4dvNV", typeof(ProgramParameter4dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramParameter4fNV(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static ProgramParameter4fNV glProgramParameter4fNV = ((ProgramParameter4fNV)(Gl.GetDelegateForExtensionMethod("glProgramParameter4fNV", typeof(ProgramParameter4fNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramParameter4fvNV(GLenum target, GLuint index, System.IntPtr v);
        public static ProgramParameter4fvNV glProgramParameter4fvNV = ((ProgramParameter4fvNV)(Gl.GetDelegateForExtensionMethod("glProgramParameter4fvNV", typeof(ProgramParameter4fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramParameteriEXT(GLuint program, GLenum pname, GLint value);
        public static ProgramParameteriEXT glProgramParameteriEXT = ((ProgramParameteriEXT)(Gl.GetDelegateForExtensionMethod("glProgramParameteriEXT", typeof(ProgramParameteriEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramParameters4dvNV(GLenum target, GLuint index, GLuint count, System.IntPtr v);
        public static ProgramParameters4dvNV glProgramParameters4dvNV = ((ProgramParameters4dvNV)(Gl.GetDelegateForExtensionMethod("glProgramParameters4dvNV", typeof(ProgramParameters4dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramParameters4fvNV(GLenum target, GLuint index, GLuint count, System.IntPtr v);
        public static ProgramParameters4fvNV glProgramParameters4fvNV = ((ProgramParameters4fvNV)(Gl.GetDelegateForExtensionMethod("glProgramParameters4fvNV", typeof(ProgramParameters4fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramStringARB(GLenum target, GLenum format, GLsizei len, System.IntPtr @string);
        public static ProgramStringARB glProgramStringARB = ((ProgramStringARB)(Gl.GetDelegateForExtensionMethod("glProgramStringARB", typeof(ProgramStringARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ProgramVertexLimitNV(GLenum target, GLint limit);
        public static ProgramVertexLimitNV glProgramVertexLimitNV = ((ProgramVertexLimitNV)(Gl.GetDelegateForExtensionMethod("glProgramVertexLimitNV", typeof(ProgramVertexLimitNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PushAttrib(GLbitfield mask);
        public static PushAttrib glPushAttrib = ((PushAttrib)(Gl.GetDelegateForExtensionMethod("glPushAttrib", typeof(PushAttrib)))) ?? new PushAttrib(Imports.PushAttrib);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PushClientAttrib(GLbitfield mask);
        public static PushClientAttrib glPushClientAttrib = ((PushClientAttrib)(Gl.GetDelegateForExtensionMethod("glPushClientAttrib", typeof(PushClientAttrib)))) ?? new PushClientAttrib(Imports.PushClientAttrib);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PushMatrix();
        public static PushMatrix glPushMatrix = ((PushMatrix)(Gl.GetDelegateForExtensionMethod("glPushMatrix", typeof(PushMatrix)))) ?? new PushMatrix(Imports.PushMatrix);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void PushName(GLuint name);
        public static PushName glPushName = ((PushName)(Gl.GetDelegateForExtensionMethod("glPushName", typeof(PushName)))) ?? new PushName(Imports.PushName);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos2d(GLdouble x, GLdouble y);
        public static RasterPos2d glRasterPos2d = ((RasterPos2d)(Gl.GetDelegateForExtensionMethod("glRasterPos2d", typeof(RasterPos2d)))) ?? new RasterPos2d(Imports.RasterPos2d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos2dv(System.IntPtr v);
        public static RasterPos2dv glRasterPos2dv = ((RasterPos2dv)(Gl.GetDelegateForExtensionMethod("glRasterPos2dv", typeof(RasterPos2dv)))) ?? new RasterPos2dv(Imports.RasterPos2dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos2f(GLfloat x, GLfloat y);
        public static RasterPos2f glRasterPos2f = ((RasterPos2f)(Gl.GetDelegateForExtensionMethod("glRasterPos2f", typeof(RasterPos2f)))) ?? new RasterPos2f(Imports.RasterPos2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos2fv(System.IntPtr v);
        public static RasterPos2fv glRasterPos2fv = ((RasterPos2fv)(Gl.GetDelegateForExtensionMethod("glRasterPos2fv", typeof(RasterPos2fv)))) ?? new RasterPos2fv(Imports.RasterPos2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos2i(GLint x, GLint y);
        public static RasterPos2i glRasterPos2i = ((RasterPos2i)(Gl.GetDelegateForExtensionMethod("glRasterPos2i", typeof(RasterPos2i)))) ?? new RasterPos2i(Imports.RasterPos2i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos2iv(System.IntPtr v);
        public static RasterPos2iv glRasterPos2iv = ((RasterPos2iv)(Gl.GetDelegateForExtensionMethod("glRasterPos2iv", typeof(RasterPos2iv)))) ?? new RasterPos2iv(Imports.RasterPos2iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos2s(GLshort x, GLshort y);
        public static RasterPos2s glRasterPos2s = ((RasterPos2s)(Gl.GetDelegateForExtensionMethod("glRasterPos2s", typeof(RasterPos2s)))) ?? new RasterPos2s(Imports.RasterPos2s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos2sv(System.IntPtr v);
        public static RasterPos2sv glRasterPos2sv = ((RasterPos2sv)(Gl.GetDelegateForExtensionMethod("glRasterPos2sv", typeof(RasterPos2sv)))) ?? new RasterPos2sv(Imports.RasterPos2sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos3d(GLdouble x, GLdouble y, GLdouble z);
        public static RasterPos3d glRasterPos3d = ((RasterPos3d)(Gl.GetDelegateForExtensionMethod("glRasterPos3d", typeof(RasterPos3d)))) ?? new RasterPos3d(Imports.RasterPos3d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos3dv(System.IntPtr v);
        public static RasterPos3dv glRasterPos3dv = ((RasterPos3dv)(Gl.GetDelegateForExtensionMethod("glRasterPos3dv", typeof(RasterPos3dv)))) ?? new RasterPos3dv(Imports.RasterPos3dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos3f(GLfloat x, GLfloat y, GLfloat z);
        public static RasterPos3f glRasterPos3f = ((RasterPos3f)(Gl.GetDelegateForExtensionMethod("glRasterPos3f", typeof(RasterPos3f)))) ?? new RasterPos3f(Imports.RasterPos3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos3fv(System.IntPtr v);
        public static RasterPos3fv glRasterPos3fv = ((RasterPos3fv)(Gl.GetDelegateForExtensionMethod("glRasterPos3fv", typeof(RasterPos3fv)))) ?? new RasterPos3fv(Imports.RasterPos3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos3i(GLint x, GLint y, GLint z);
        public static RasterPos3i glRasterPos3i = ((RasterPos3i)(Gl.GetDelegateForExtensionMethod("glRasterPos3i", typeof(RasterPos3i)))) ?? new RasterPos3i(Imports.RasterPos3i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos3iv(System.IntPtr v);
        public static RasterPos3iv glRasterPos3iv = ((RasterPos3iv)(Gl.GetDelegateForExtensionMethod("glRasterPos3iv", typeof(RasterPos3iv)))) ?? new RasterPos3iv(Imports.RasterPos3iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos3s(GLshort x, GLshort y, GLshort z);
        public static RasterPos3s glRasterPos3s = ((RasterPos3s)(Gl.GetDelegateForExtensionMethod("glRasterPos3s", typeof(RasterPos3s)))) ?? new RasterPos3s(Imports.RasterPos3s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos3sv(System.IntPtr v);
        public static RasterPos3sv glRasterPos3sv = ((RasterPos3sv)(Gl.GetDelegateForExtensionMethod("glRasterPos3sv", typeof(RasterPos3sv)))) ?? new RasterPos3sv(Imports.RasterPos3sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static RasterPos4d glRasterPos4d = ((RasterPos4d)(Gl.GetDelegateForExtensionMethod("glRasterPos4d", typeof(RasterPos4d)))) ?? new RasterPos4d(Imports.RasterPos4d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos4dv(System.IntPtr v);
        public static RasterPos4dv glRasterPos4dv = ((RasterPos4dv)(Gl.GetDelegateForExtensionMethod("glRasterPos4dv", typeof(RasterPos4dv)))) ?? new RasterPos4dv(Imports.RasterPos4dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static RasterPos4f glRasterPos4f = ((RasterPos4f)(Gl.GetDelegateForExtensionMethod("glRasterPos4f", typeof(RasterPos4f)))) ?? new RasterPos4f(Imports.RasterPos4f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos4fv(System.IntPtr v);
        public static RasterPos4fv glRasterPos4fv = ((RasterPos4fv)(Gl.GetDelegateForExtensionMethod("glRasterPos4fv", typeof(RasterPos4fv)))) ?? new RasterPos4fv(Imports.RasterPos4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos4i(GLint x, GLint y, GLint z, GLint w);
        public static RasterPos4i glRasterPos4i = ((RasterPos4i)(Gl.GetDelegateForExtensionMethod("glRasterPos4i", typeof(RasterPos4i)))) ?? new RasterPos4i(Imports.RasterPos4i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos4iv(System.IntPtr v);
        public static RasterPos4iv glRasterPos4iv = ((RasterPos4iv)(Gl.GetDelegateForExtensionMethod("glRasterPos4iv", typeof(RasterPos4iv)))) ?? new RasterPos4iv(Imports.RasterPos4iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
        public static RasterPos4s glRasterPos4s = ((RasterPos4s)(Gl.GetDelegateForExtensionMethod("glRasterPos4s", typeof(RasterPos4s)))) ?? new RasterPos4s(Imports.RasterPos4s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RasterPos4sv(System.IntPtr v);
        public static RasterPos4sv glRasterPos4sv = ((RasterPos4sv)(Gl.GetDelegateForExtensionMethod("glRasterPos4sv", typeof(RasterPos4sv)))) ?? new RasterPos4sv(Imports.RasterPos4sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReadBuffer(GLenum mode);
        public static ReadBuffer glReadBuffer = ((ReadBuffer)(Gl.GetDelegateForExtensionMethod("glReadBuffer", typeof(ReadBuffer)))) ?? new ReadBuffer(Imports.ReadBuffer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReadInstrumentsSGIX(GLint marker);
        public static ReadInstrumentsSGIX glReadInstrumentsSGIX = ((ReadInstrumentsSGIX)(Gl.GetDelegateForExtensionMethod("glReadInstrumentsSGIX", typeof(ReadInstrumentsSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, [In, Out()] System.IntPtr pixels);
        public static ReadPixels glReadPixels = ((ReadPixels)(Gl.GetDelegateForExtensionMethod("glReadPixels", typeof(ReadPixels)))) ?? new ReadPixels(Imports.ReadPixels);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
        public static Rectd glRectd = ((Rectd)(Gl.GetDelegateForExtensionMethod("glRectd", typeof(Rectd)))) ?? new Rectd(Imports.Rectd);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Rectdv(System.IntPtr v1, System.IntPtr v2);
        public static Rectdv glRectdv = ((Rectdv)(Gl.GetDelegateForExtensionMethod("glRectdv", typeof(Rectdv)))) ?? new Rectdv(Imports.Rectdv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Rectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
        public static Rectf glRectf = ((Rectf)(Gl.GetDelegateForExtensionMethod("glRectf", typeof(Rectf)))) ?? new Rectf(Imports.Rectf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Rectfv(System.IntPtr v1, System.IntPtr v2);
        public static Rectfv glRectfv = ((Rectfv)(Gl.GetDelegateForExtensionMethod("glRectfv", typeof(Rectfv)))) ?? new Rectfv(Imports.Rectfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Recti(GLint x1, GLint y1, GLint x2, GLint y2);
        public static Recti glRecti = ((Recti)(Gl.GetDelegateForExtensionMethod("glRecti", typeof(Recti)))) ?? new Recti(Imports.Recti);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Rectiv(System.IntPtr v1, System.IntPtr v2);
        public static Rectiv glRectiv = ((Rectiv)(Gl.GetDelegateForExtensionMethod("glRectiv", typeof(Rectiv)))) ?? new Rectiv(Imports.Rectiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
        public static Rects glRects = ((Rects)(Gl.GetDelegateForExtensionMethod("glRects", typeof(Rects)))) ?? new Rects(Imports.Rects);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Rectsv(System.IntPtr v1, System.IntPtr v2);
        public static Rectsv glRectsv = ((Rectsv)(Gl.GetDelegateForExtensionMethod("glRectsv", typeof(Rectsv)))) ?? new Rectsv(Imports.Rectsv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReferencePlaneSGIX(System.IntPtr equation);
        public static ReferencePlaneSGIX glReferencePlaneSGIX = ((ReferencePlaneSGIX)(Gl.GetDelegateForExtensionMethod("glReferencePlaneSGIX", typeof(ReferencePlaneSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
        public static RenderbufferStorageEXT glRenderbufferStorageEXT = ((RenderbufferStorageEXT)(Gl.GetDelegateForExtensionMethod("glRenderbufferStorageEXT", typeof(RenderbufferStorageEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RenderbufferStorageMultisampleCoverageNV(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
        public static RenderbufferStorageMultisampleCoverageNV glRenderbufferStorageMultisampleCoverageNV = ((RenderbufferStorageMultisampleCoverageNV)(Gl.GetDelegateForExtensionMethod("glRenderbufferStorageMultisampleCoverageNV", typeof(RenderbufferStorageMultisampleCoverageNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
        public static RenderbufferStorageMultisampleEXT glRenderbufferStorageMultisampleEXT = ((RenderbufferStorageMultisampleEXT)(Gl.GetDelegateForExtensionMethod("glRenderbufferStorageMultisampleEXT", typeof(RenderbufferStorageMultisampleEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLint RenderMode(GLenum mode);
        public static RenderMode glRenderMode = ((RenderMode)(Gl.GetDelegateForExtensionMethod("glRenderMode", typeof(RenderMode)))) ?? new RenderMode(Imports.RenderMode);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodePointerSUN(GLenum type, GLsizei stride, System.IntPtr pointer);
        public static ReplacementCodePointerSUN glReplacementCodePointerSUN = ((ReplacementCodePointerSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodePointerSUN", typeof(ReplacementCodePointerSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeubSUN(GLubyte code);
        public static ReplacementCodeubSUN glReplacementCodeubSUN = ((ReplacementCodeubSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeubSUN", typeof(ReplacementCodeubSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeubvSUN(System.IntPtr code);
        public static ReplacementCodeubvSUN glReplacementCodeubvSUN = ((ReplacementCodeubvSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeubvSUN", typeof(ReplacementCodeubvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiColor3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
        public static ReplacementCodeuiColor3fVertex3fSUN glReplacementCodeuiColor3fVertex3fSUN = ((ReplacementCodeuiColor3fVertex3fSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeuiColor3fVertex3fSUN", typeof(ReplacementCodeuiColor3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiColor3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, System.IntPtr v);
        public static ReplacementCodeuiColor3fVertex3fvSUN glReplacementCodeuiColor3fVertex3fvSUN = ((ReplacementCodeuiColor3fVertex3fvSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeuiColor3fVertex3fvSUN", typeof(ReplacementCodeuiColor3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        public static ReplacementCodeuiColor4fNormal3fVertex3fSUN glReplacementCodeuiColor4fNormal3fVertex3fSUN = ((ReplacementCodeuiColor4fNormal3fVertex3fSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeuiColor4fNormal3fVertex3fSUN", typeof(ReplacementCodeuiColor4fNormal3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr c, System.IntPtr n, System.IntPtr v);
        public static ReplacementCodeuiColor4fNormal3fVertex3fvSUN glReplacementCodeuiColor4fNormal3fVertex3fvSUN = ((ReplacementCodeuiColor4fNormal3fVertex3fvSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeuiColor4fNormal3fVertex3fvSUN", typeof(ReplacementCodeuiColor4fNormal3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiColor4ubVertex3fSUN(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
        public static ReplacementCodeuiColor4ubVertex3fSUN glReplacementCodeuiColor4ubVertex3fSUN = ((ReplacementCodeuiColor4ubVertex3fSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeuiColor4ubVertex3fSUN", typeof(ReplacementCodeuiColor4ubVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiColor4ubVertex3fvSUN(System.IntPtr rc, System.IntPtr c, System.IntPtr v);
        public static ReplacementCodeuiColor4ubVertex3fvSUN glReplacementCodeuiColor4ubVertex3fvSUN = ((ReplacementCodeuiColor4ubVertex3fvSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeuiColor4ubVertex3fvSUN", typeof(ReplacementCodeuiColor4ubVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiNormal3fVertex3fSUN(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        public static ReplacementCodeuiNormal3fVertex3fSUN glReplacementCodeuiNormal3fVertex3fSUN = ((ReplacementCodeuiNormal3fVertex3fSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeuiNormal3fVertex3fSUN", typeof(ReplacementCodeuiNormal3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr n, System.IntPtr v);
        public static ReplacementCodeuiNormal3fVertex3fvSUN glReplacementCodeuiNormal3fVertex3fvSUN = ((ReplacementCodeuiNormal3fVertex3fvSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeuiNormal3fVertex3fvSUN", typeof(ReplacementCodeuiNormal3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiSUN(GLuint code);
        public static ReplacementCodeuiSUN glReplacementCodeuiSUN = ((ReplacementCodeuiSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeuiSUN", typeof(ReplacementCodeuiSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        public static ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = ((ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN", typeof(ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr c, System.IntPtr n, System.IntPtr v);
        public static ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = ((ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN", typeof(ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        public static ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = ((ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN", typeof(ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr n, System.IntPtr v);
        public static ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = ((ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN", typeof(ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiTexCoord2fVertex3fSUN(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
        public static ReplacementCodeuiTexCoord2fVertex3fSUN glReplacementCodeuiTexCoord2fVertex3fSUN = ((ReplacementCodeuiTexCoord2fVertex3fSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeuiTexCoord2fVertex3fSUN", typeof(ReplacementCodeuiTexCoord2fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiTexCoord2fVertex3fvSUN(System.IntPtr rc, System.IntPtr tc, System.IntPtr v);
        public static ReplacementCodeuiTexCoord2fVertex3fvSUN glReplacementCodeuiTexCoord2fVertex3fvSUN = ((ReplacementCodeuiTexCoord2fVertex3fvSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeuiTexCoord2fVertex3fvSUN", typeof(ReplacementCodeuiTexCoord2fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiVertex3fSUN(GLuint rc, GLfloat x, GLfloat y, GLfloat z);
        public static ReplacementCodeuiVertex3fSUN glReplacementCodeuiVertex3fSUN = ((ReplacementCodeuiVertex3fSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeuiVertex3fSUN", typeof(ReplacementCodeuiVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuiVertex3fvSUN(System.IntPtr rc, System.IntPtr v);
        public static ReplacementCodeuiVertex3fvSUN glReplacementCodeuiVertex3fvSUN = ((ReplacementCodeuiVertex3fvSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeuiVertex3fvSUN", typeof(ReplacementCodeuiVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeuivSUN(System.IntPtr code);
        public static ReplacementCodeuivSUN glReplacementCodeuivSUN = ((ReplacementCodeuivSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeuivSUN", typeof(ReplacementCodeuivSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeusSUN(GLushort code);
        public static ReplacementCodeusSUN glReplacementCodeusSUN = ((ReplacementCodeusSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeusSUN", typeof(ReplacementCodeusSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ReplacementCodeusvSUN(System.IntPtr code);
        public static ReplacementCodeusvSUN glReplacementCodeusvSUN = ((ReplacementCodeusvSUN)(Gl.GetDelegateForExtensionMethod("glReplacementCodeusvSUN", typeof(ReplacementCodeusvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void RequestResidentProgramsNV(GLsizei n, System.IntPtr programs);
        public static RequestResidentProgramsNV glRequestResidentProgramsNV = ((RequestResidentProgramsNV)(Gl.GetDelegateForExtensionMethod("glRequestResidentProgramsNV", typeof(RequestResidentProgramsNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ResetHistogram(GLenum target);
        public static ResetHistogram glResetHistogram = ((ResetHistogram)(Gl.GetDelegateForExtensionMethod("glResetHistogram", typeof(ResetHistogram)))) ?? new ResetHistogram(Imports.ResetHistogram);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ResetHistogramEXT(GLenum target);
        public static ResetHistogramEXT glResetHistogramEXT = ((ResetHistogramEXT)(Gl.GetDelegateForExtensionMethod("glResetHistogramEXT", typeof(ResetHistogramEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ResetMinmax(GLenum target);
        public static ResetMinmax glResetMinmax = ((ResetMinmax)(Gl.GetDelegateForExtensionMethod("glResetMinmax", typeof(ResetMinmax)))) ?? new ResetMinmax(Imports.ResetMinmax);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ResetMinmaxEXT(GLenum target);
        public static ResetMinmaxEXT glResetMinmaxEXT = ((ResetMinmaxEXT)(Gl.GetDelegateForExtensionMethod("glResetMinmaxEXT", typeof(ResetMinmaxEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ResizeBuffersMESA();
        public static ResizeBuffersMESA glResizeBuffersMESA = ((ResizeBuffersMESA)(Gl.GetDelegateForExtensionMethod("glResizeBuffersMESA", typeof(ResizeBuffersMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Rotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
        public static Rotated glRotated = ((Rotated)(Gl.GetDelegateForExtensionMethod("glRotated", typeof(Rotated)))) ?? new Rotated(Imports.Rotated);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
        public static Rotatef glRotatef = ((Rotatef)(Gl.GetDelegateForExtensionMethod("glRotatef", typeof(Rotatef)))) ?? new Rotatef(Imports.Rotatef);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SampleCoverage(GLclampf value, GLboolean invert);
        public static SampleCoverage glSampleCoverage = ((SampleCoverage)(Gl.GetDelegateForExtensionMethod("glSampleCoverage", typeof(SampleCoverage)))) ?? new SampleCoverage(Imports.SampleCoverage);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SampleCoverageARB(GLclampf value, GLboolean invert);
        public static SampleCoverageARB glSampleCoverageARB = ((SampleCoverageARB)(Gl.GetDelegateForExtensionMethod("glSampleCoverageARB", typeof(SampleCoverageARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SampleMapATI(GLuint dst, GLuint interp, GLenum swizzle);
        public static SampleMapATI glSampleMapATI = ((SampleMapATI)(Gl.GetDelegateForExtensionMethod("glSampleMapATI", typeof(SampleMapATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SampleMaskEXT(GLclampf value, GLboolean invert);
        public static SampleMaskEXT glSampleMaskEXT = ((SampleMaskEXT)(Gl.GetDelegateForExtensionMethod("glSampleMaskEXT", typeof(SampleMaskEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SampleMaskSGIS(GLclampf value, GLboolean invert);
        public static SampleMaskSGIS glSampleMaskSGIS = ((SampleMaskSGIS)(Gl.GetDelegateForExtensionMethod("glSampleMaskSGIS", typeof(SampleMaskSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SamplePatternEXT(GLenum pattern);
        public static SamplePatternEXT glSamplePatternEXT = ((SamplePatternEXT)(Gl.GetDelegateForExtensionMethod("glSamplePatternEXT", typeof(SamplePatternEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SamplePatternSGIS(GLenum pattern);
        public static SamplePatternSGIS glSamplePatternSGIS = ((SamplePatternSGIS)(Gl.GetDelegateForExtensionMethod("glSamplePatternSGIS", typeof(SamplePatternSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Scaled(GLdouble x, GLdouble y, GLdouble z);
        public static Scaled glScaled = ((Scaled)(Gl.GetDelegateForExtensionMethod("glScaled", typeof(Scaled)))) ?? new Scaled(Imports.Scaled);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Scalef(GLfloat x, GLfloat y, GLfloat z);
        public static Scalef glScalef = ((Scalef)(Gl.GetDelegateForExtensionMethod("glScalef", typeof(Scalef)))) ?? new Scalef(Imports.Scalef);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Scissor(GLint x, GLint y, GLsizei width, GLsizei height);
        public static Scissor glScissor = ((Scissor)(Gl.GetDelegateForExtensionMethod("glScissor", typeof(Scissor)))) ?? new Scissor(Imports.Scissor);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);
        public static SecondaryColor3b glSecondaryColor3b = ((SecondaryColor3b)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3b", typeof(SecondaryColor3b)))) ?? new SecondaryColor3b(Imports.SecondaryColor3b);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue);
        public static SecondaryColor3bEXT glSecondaryColor3bEXT = ((SecondaryColor3bEXT)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3bEXT", typeof(SecondaryColor3bEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3bv(System.IntPtr v);
        public static SecondaryColor3bv glSecondaryColor3bv = ((SecondaryColor3bv)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3bv", typeof(SecondaryColor3bv)))) ?? new SecondaryColor3bv(Imports.SecondaryColor3bv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3bvEXT(System.IntPtr v);
        public static SecondaryColor3bvEXT glSecondaryColor3bvEXT = ((SecondaryColor3bvEXT)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3bvEXT", typeof(SecondaryColor3bvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);
        public static SecondaryColor3d glSecondaryColor3d = ((SecondaryColor3d)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3d", typeof(SecondaryColor3d)))) ?? new SecondaryColor3d(Imports.SecondaryColor3d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue);
        public static SecondaryColor3dEXT glSecondaryColor3dEXT = ((SecondaryColor3dEXT)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3dEXT", typeof(SecondaryColor3dEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3dv(System.IntPtr v);
        public static SecondaryColor3dv glSecondaryColor3dv = ((SecondaryColor3dv)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3dv", typeof(SecondaryColor3dv)))) ?? new SecondaryColor3dv(Imports.SecondaryColor3dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3dvEXT(System.IntPtr v);
        public static SecondaryColor3dvEXT glSecondaryColor3dvEXT = ((SecondaryColor3dvEXT)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3dvEXT", typeof(SecondaryColor3dvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue);
        public static SecondaryColor3f glSecondaryColor3f = ((SecondaryColor3f)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3f", typeof(SecondaryColor3f)))) ?? new SecondaryColor3f(Imports.SecondaryColor3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue);
        public static SecondaryColor3fEXT glSecondaryColor3fEXT = ((SecondaryColor3fEXT)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3fEXT", typeof(SecondaryColor3fEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3fv(System.IntPtr v);
        public static SecondaryColor3fv glSecondaryColor3fv = ((SecondaryColor3fv)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3fv", typeof(SecondaryColor3fv)))) ?? new SecondaryColor3fv(Imports.SecondaryColor3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3fvEXT(System.IntPtr v);
        public static SecondaryColor3fvEXT glSecondaryColor3fvEXT = ((SecondaryColor3fvEXT)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3fvEXT", typeof(SecondaryColor3fvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3hNV(GLhalfNV red, GLhalfNV green, GLhalfNV blue);
        public static SecondaryColor3hNV glSecondaryColor3hNV = ((SecondaryColor3hNV)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3hNV", typeof(SecondaryColor3hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3hvNV(System.IntPtr v);
        public static SecondaryColor3hvNV glSecondaryColor3hvNV = ((SecondaryColor3hvNV)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3hvNV", typeof(SecondaryColor3hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3i(GLint red, GLint green, GLint blue);
        public static SecondaryColor3i glSecondaryColor3i = ((SecondaryColor3i)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3i", typeof(SecondaryColor3i)))) ?? new SecondaryColor3i(Imports.SecondaryColor3i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3iEXT(GLint red, GLint green, GLint blue);
        public static SecondaryColor3iEXT glSecondaryColor3iEXT = ((SecondaryColor3iEXT)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3iEXT", typeof(SecondaryColor3iEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3iv(System.IntPtr v);
        public static SecondaryColor3iv glSecondaryColor3iv = ((SecondaryColor3iv)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3iv", typeof(SecondaryColor3iv)))) ?? new SecondaryColor3iv(Imports.SecondaryColor3iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3ivEXT(System.IntPtr v);
        public static SecondaryColor3ivEXT glSecondaryColor3ivEXT = ((SecondaryColor3ivEXT)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3ivEXT", typeof(SecondaryColor3ivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3s(GLshort red, GLshort green, GLshort blue);
        public static SecondaryColor3s glSecondaryColor3s = ((SecondaryColor3s)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3s", typeof(SecondaryColor3s)))) ?? new SecondaryColor3s(Imports.SecondaryColor3s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue);
        public static SecondaryColor3sEXT glSecondaryColor3sEXT = ((SecondaryColor3sEXT)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3sEXT", typeof(SecondaryColor3sEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3sv(System.IntPtr v);
        public static SecondaryColor3sv glSecondaryColor3sv = ((SecondaryColor3sv)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3sv", typeof(SecondaryColor3sv)))) ?? new SecondaryColor3sv(Imports.SecondaryColor3sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3svEXT(System.IntPtr v);
        public static SecondaryColor3svEXT glSecondaryColor3svEXT = ((SecondaryColor3svEXT)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3svEXT", typeof(SecondaryColor3svEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);
        public static SecondaryColor3ub glSecondaryColor3ub = ((SecondaryColor3ub)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3ub", typeof(SecondaryColor3ub)))) ?? new SecondaryColor3ub(Imports.SecondaryColor3ub);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue);
        public static SecondaryColor3ubEXT glSecondaryColor3ubEXT = ((SecondaryColor3ubEXT)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3ubEXT", typeof(SecondaryColor3ubEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3ubv(System.IntPtr v);
        public static SecondaryColor3ubv glSecondaryColor3ubv = ((SecondaryColor3ubv)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3ubv", typeof(SecondaryColor3ubv)))) ?? new SecondaryColor3ubv(Imports.SecondaryColor3ubv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3ubvEXT(System.IntPtr v);
        public static SecondaryColor3ubvEXT glSecondaryColor3ubvEXT = ((SecondaryColor3ubvEXT)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3ubvEXT", typeof(SecondaryColor3ubvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3ui(GLuint red, GLuint green, GLuint blue);
        public static SecondaryColor3ui glSecondaryColor3ui = ((SecondaryColor3ui)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3ui", typeof(SecondaryColor3ui)))) ?? new SecondaryColor3ui(Imports.SecondaryColor3ui);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue);
        public static SecondaryColor3uiEXT glSecondaryColor3uiEXT = ((SecondaryColor3uiEXT)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3uiEXT", typeof(SecondaryColor3uiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3uiv(System.IntPtr v);
        public static SecondaryColor3uiv glSecondaryColor3uiv = ((SecondaryColor3uiv)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3uiv", typeof(SecondaryColor3uiv)))) ?? new SecondaryColor3uiv(Imports.SecondaryColor3uiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3uivEXT(System.IntPtr v);
        public static SecondaryColor3uivEXT glSecondaryColor3uivEXT = ((SecondaryColor3uivEXT)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3uivEXT", typeof(SecondaryColor3uivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3us(GLushort red, GLushort green, GLushort blue);
        public static SecondaryColor3us glSecondaryColor3us = ((SecondaryColor3us)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3us", typeof(SecondaryColor3us)))) ?? new SecondaryColor3us(Imports.SecondaryColor3us);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue);
        public static SecondaryColor3usEXT glSecondaryColor3usEXT = ((SecondaryColor3usEXT)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3usEXT", typeof(SecondaryColor3usEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3usv(System.IntPtr v);
        public static SecondaryColor3usv glSecondaryColor3usv = ((SecondaryColor3usv)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3usv", typeof(SecondaryColor3usv)))) ?? new SecondaryColor3usv(Imports.SecondaryColor3usv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColor3usvEXT(System.IntPtr v);
        public static SecondaryColor3usvEXT glSecondaryColor3usvEXT = ((SecondaryColor3usvEXT)(Gl.GetDelegateForExtensionMethod("glSecondaryColor3usvEXT", typeof(SecondaryColor3usvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColorPointer(GLint size, GLenum type, GLsizei stride, System.IntPtr pointer);
        public static SecondaryColorPointer glSecondaryColorPointer = ((SecondaryColorPointer)(Gl.GetDelegateForExtensionMethod("glSecondaryColorPointer", typeof(SecondaryColorPointer)))) ?? new SecondaryColorPointer(Imports.SecondaryColorPointer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, System.IntPtr pointer);
        public static SecondaryColorPointerEXT glSecondaryColorPointerEXT = ((SecondaryColorPointerEXT)(Gl.GetDelegateForExtensionMethod("glSecondaryColorPointerEXT", typeof(SecondaryColorPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SecondaryColorPointerListIBM(GLint size, GLenum type, GLint stride, System.IntPtr pointer, GLint ptrstride);
        public static SecondaryColorPointerListIBM glSecondaryColorPointerListIBM = ((SecondaryColorPointerListIBM)(Gl.GetDelegateForExtensionMethod("glSecondaryColorPointerListIBM", typeof(SecondaryColorPointerListIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SelectBuffer(GLsizei size, [In, Out()] System.IntPtr buffer);
        public static SelectBuffer glSelectBuffer = ((SelectBuffer)(Gl.GetDelegateForExtensionMethod("glSelectBuffer", typeof(SelectBuffer)))) ?? new SelectBuffer(Imports.SelectBuffer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr row, System.IntPtr column);
        public static SeparableFilter2D glSeparableFilter2D = ((SeparableFilter2D)(Gl.GetDelegateForExtensionMethod("glSeparableFilter2D", typeof(SeparableFilter2D)))) ?? new SeparableFilter2D(Imports.SeparableFilter2D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SeparableFilter2DEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr row, System.IntPtr column);
        public static SeparableFilter2DEXT glSeparableFilter2DEXT = ((SeparableFilter2DEXT)(Gl.GetDelegateForExtensionMethod("glSeparableFilter2DEXT", typeof(SeparableFilter2DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SetFenceAPPLE(GLuint fence);
        public static SetFenceAPPLE glSetFenceAPPLE = ((SetFenceAPPLE)(Gl.GetDelegateForExtensionMethod("glSetFenceAPPLE", typeof(SetFenceAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SetFenceNV(GLuint fence, GLenum condition);
        public static SetFenceNV glSetFenceNV = ((SetFenceNV)(Gl.GetDelegateForExtensionMethod("glSetFenceNV", typeof(SetFenceNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SetFragmentShaderConstantATI(GLuint dst, System.IntPtr value);
        public static SetFragmentShaderConstantATI glSetFragmentShaderConstantATI = ((SetFragmentShaderConstantATI)(Gl.GetDelegateForExtensionMethod("glSetFragmentShaderConstantATI", typeof(SetFragmentShaderConstantATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SetInvariantEXT(GLuint id, GLenum type, System.IntPtr addr);
        public static SetInvariantEXT glSetInvariantEXT = ((SetInvariantEXT)(Gl.GetDelegateForExtensionMethod("glSetInvariantEXT", typeof(SetInvariantEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SetLocalConstantEXT(GLuint id, GLenum type, System.IntPtr addr);
        public static SetLocalConstantEXT glSetLocalConstantEXT = ((SetLocalConstantEXT)(Gl.GetDelegateForExtensionMethod("glSetLocalConstantEXT", typeof(SetLocalConstantEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ShadeModel(GLenum mode);
        public static ShadeModel glShadeModel = ((ShadeModel)(Gl.GetDelegateForExtensionMethod("glShadeModel", typeof(ShadeModel)))) ?? new ShadeModel(Imports.ShadeModel);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ShaderOp1EXT(GLenum op, GLuint res, GLuint arg1);
        public static ShaderOp1EXT glShaderOp1EXT = ((ShaderOp1EXT)(Gl.GetDelegateForExtensionMethod("glShaderOp1EXT", typeof(ShaderOp1EXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ShaderOp2EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2);
        public static ShaderOp2EXT glShaderOp2EXT = ((ShaderOp2EXT)(Gl.GetDelegateForExtensionMethod("glShaderOp2EXT", typeof(ShaderOp2EXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ShaderOp3EXT(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
        public static ShaderOp3EXT glShaderOp3EXT = ((ShaderOp3EXT)(Gl.GetDelegateForExtensionMethod("glShaderOp3EXT", typeof(ShaderOp3EXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ShaderSource(GLuint shader, GLsizei count, string[] @string, System.IntPtr length);
        public static ShaderSource glShaderSource = ((ShaderSource)(Gl.GetDelegateForExtensionMethod("glShaderSource", typeof(ShaderSource)))) ?? new ShaderSource(Imports.ShaderSource);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ShaderSourceARB(GLhandleARB shaderObj, GLsizei count, string[] @string, System.IntPtr length);
        public static ShaderSourceARB glShaderSourceARB = ((ShaderSourceARB)(Gl.GetDelegateForExtensionMethod("glShaderSourceARB", typeof(ShaderSourceARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SharpenTexFuncSGIS(GLenum target, GLsizei n, System.IntPtr points);
        public static SharpenTexFuncSGIS glSharpenTexFuncSGIS = ((SharpenTexFuncSGIS)(Gl.GetDelegateForExtensionMethod("glSharpenTexFuncSGIS", typeof(SharpenTexFuncSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SpriteParameterfSGIX(GLenum pname, GLfloat param);
        public static SpriteParameterfSGIX glSpriteParameterfSGIX = ((SpriteParameterfSGIX)(Gl.GetDelegateForExtensionMethod("glSpriteParameterfSGIX", typeof(SpriteParameterfSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SpriteParameterfvSGIX(GLenum pname, System.IntPtr @params);
        public static SpriteParameterfvSGIX glSpriteParameterfvSGIX = ((SpriteParameterfvSGIX)(Gl.GetDelegateForExtensionMethod("glSpriteParameterfvSGIX", typeof(SpriteParameterfvSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SpriteParameteriSGIX(GLenum pname, GLint param);
        public static SpriteParameteriSGIX glSpriteParameteriSGIX = ((SpriteParameteriSGIX)(Gl.GetDelegateForExtensionMethod("glSpriteParameteriSGIX", typeof(SpriteParameteriSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SpriteParameterivSGIX(GLenum pname, System.IntPtr @params);
        public static SpriteParameterivSGIX glSpriteParameterivSGIX = ((SpriteParameterivSGIX)(Gl.GetDelegateForExtensionMethod("glSpriteParameterivSGIX", typeof(SpriteParameterivSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StartInstrumentsSGIX();
        public static StartInstrumentsSGIX glStartInstrumentsSGIX = ((StartInstrumentsSGIX)(Gl.GetDelegateForExtensionMethod("glStartInstrumentsSGIX", typeof(StartInstrumentsSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StencilClearTagEXT(GLsizei stencilTagBits, GLuint stencilClearTag);
        public static StencilClearTagEXT glStencilClearTagEXT = ((StencilClearTagEXT)(Gl.GetDelegateForExtensionMethod("glStencilClearTagEXT", typeof(StencilClearTagEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StencilFunc(GLenum func, GLint @ref, GLuint mask);
        public static StencilFunc glStencilFunc = ((StencilFunc)(Gl.GetDelegateForExtensionMethod("glStencilFunc", typeof(StencilFunc)))) ?? new StencilFunc(Imports.StencilFunc);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StencilFuncSeparate(GLenum frontfunc, GLenum backfunc, GLint @ref, GLuint mask);
        public static StencilFuncSeparate glStencilFuncSeparate = ((StencilFuncSeparate)(Gl.GetDelegateForExtensionMethod("glStencilFuncSeparate", typeof(StencilFuncSeparate)))) ?? new StencilFuncSeparate(Imports.StencilFuncSeparate);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint @ref, GLuint mask);
        public static StencilFuncSeparateATI glStencilFuncSeparateATI = ((StencilFuncSeparateATI)(Gl.GetDelegateForExtensionMethod("glStencilFuncSeparateATI", typeof(StencilFuncSeparateATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StencilMask(GLuint mask);
        public static StencilMask glStencilMask = ((StencilMask)(Gl.GetDelegateForExtensionMethod("glStencilMask", typeof(StencilMask)))) ?? new StencilMask(Imports.StencilMask);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StencilMaskSeparate(GLenum face, GLuint mask);
        public static StencilMaskSeparate glStencilMaskSeparate = ((StencilMaskSeparate)(Gl.GetDelegateForExtensionMethod("glStencilMaskSeparate", typeof(StencilMaskSeparate)))) ?? new StencilMaskSeparate(Imports.StencilMaskSeparate);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StencilOp(GLenum fail, GLenum zfail, GLenum zpass);
        public static StencilOp glStencilOp = ((StencilOp)(Gl.GetDelegateForExtensionMethod("glStencilOp", typeof(StencilOp)))) ?? new StencilOp(Imports.StencilOp);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
        public static StencilOpSeparate glStencilOpSeparate = ((StencilOpSeparate)(Gl.GetDelegateForExtensionMethod("glStencilOpSeparate", typeof(StencilOpSeparate)))) ?? new StencilOpSeparate(Imports.StencilOpSeparate);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
        public static StencilOpSeparateATI glStencilOpSeparateATI = ((StencilOpSeparateATI)(Gl.GetDelegateForExtensionMethod("glStencilOpSeparateATI", typeof(StencilOpSeparateATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StopInstrumentsSGIX(GLint marker);
        public static StopInstrumentsSGIX glStopInstrumentsSGIX = ((StopInstrumentsSGIX)(Gl.GetDelegateForExtensionMethod("glStopInstrumentsSGIX", typeof(StopInstrumentsSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void StringMarkerGREMEDY(GLsizei len, System.IntPtr @string);
        public static StringMarkerGREMEDY glStringMarkerGREMEDY = ((StringMarkerGREMEDY)(Gl.GetDelegateForExtensionMethod("glStringMarkerGREMEDY", typeof(StringMarkerGREMEDY))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void SwizzleEXT(GLuint res, GLuint @in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
        public static SwizzleEXT glSwizzleEXT = ((SwizzleEXT)(Gl.GetDelegateForExtensionMethod("glSwizzleEXT", typeof(SwizzleEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TagSampleBufferSGIX();
        public static TagSampleBufferSGIX glTagSampleBufferSGIX = ((TagSampleBufferSGIX)(Gl.GetDelegateForExtensionMethod("glTagSampleBufferSGIX", typeof(TagSampleBufferSGIX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3bEXT(GLbyte tx, GLbyte ty, GLbyte tz);
        public static Tangent3bEXT glTangent3bEXT = ((Tangent3bEXT)(Gl.GetDelegateForExtensionMethod("glTangent3bEXT", typeof(Tangent3bEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3bvEXT(System.IntPtr v);
        public static Tangent3bvEXT glTangent3bvEXT = ((Tangent3bvEXT)(Gl.GetDelegateForExtensionMethod("glTangent3bvEXT", typeof(Tangent3bvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3dEXT(GLdouble tx, GLdouble ty, GLdouble tz);
        public static Tangent3dEXT glTangent3dEXT = ((Tangent3dEXT)(Gl.GetDelegateForExtensionMethod("glTangent3dEXT", typeof(Tangent3dEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3dvEXT(System.IntPtr v);
        public static Tangent3dvEXT glTangent3dvEXT = ((Tangent3dvEXT)(Gl.GetDelegateForExtensionMethod("glTangent3dvEXT", typeof(Tangent3dvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3fEXT(GLfloat tx, GLfloat ty, GLfloat tz);
        public static Tangent3fEXT glTangent3fEXT = ((Tangent3fEXT)(Gl.GetDelegateForExtensionMethod("glTangent3fEXT", typeof(Tangent3fEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3fvEXT(System.IntPtr v);
        public static Tangent3fvEXT glTangent3fvEXT = ((Tangent3fvEXT)(Gl.GetDelegateForExtensionMethod("glTangent3fvEXT", typeof(Tangent3fvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3iEXT(GLint tx, GLint ty, GLint tz);
        public static Tangent3iEXT glTangent3iEXT = ((Tangent3iEXT)(Gl.GetDelegateForExtensionMethod("glTangent3iEXT", typeof(Tangent3iEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3ivEXT(System.IntPtr v);
        public static Tangent3ivEXT glTangent3ivEXT = ((Tangent3ivEXT)(Gl.GetDelegateForExtensionMethod("glTangent3ivEXT", typeof(Tangent3ivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3sEXT(GLshort tx, GLshort ty, GLshort tz);
        public static Tangent3sEXT glTangent3sEXT = ((Tangent3sEXT)(Gl.GetDelegateForExtensionMethod("glTangent3sEXT", typeof(Tangent3sEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Tangent3svEXT(System.IntPtr v);
        public static Tangent3svEXT glTangent3svEXT = ((Tangent3svEXT)(Gl.GetDelegateForExtensionMethod("glTangent3svEXT", typeof(Tangent3svEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TangentPointerEXT(GLenum type, GLsizei stride, System.IntPtr pointer);
        public static TangentPointerEXT glTangentPointerEXT = ((TangentPointerEXT)(Gl.GetDelegateForExtensionMethod("glTangentPointerEXT", typeof(TangentPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TbufferMask3DFX(GLuint mask);
        public static TbufferMask3DFX glTbufferMask3DFX = ((TbufferMask3DFX)(Gl.GetDelegateForExtensionMethod("glTbufferMask3DFX", typeof(TbufferMask3DFX))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean TestFenceAPPLE(GLuint fence);
        public static TestFenceAPPLE glTestFenceAPPLE = ((TestFenceAPPLE)(Gl.GetDelegateForExtensionMethod("glTestFenceAPPLE", typeof(TestFenceAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean TestFenceNV(GLuint fence);
        public static TestFenceNV glTestFenceNV = ((TestFenceNV)(Gl.GetDelegateForExtensionMethod("glTestFenceNV", typeof(TestFenceNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean TestObjectAPPLE(GLenum @object, GLuint name);
        public static TestObjectAPPLE glTestObjectAPPLE = ((TestObjectAPPLE)(Gl.GetDelegateForExtensionMethod("glTestObjectAPPLE", typeof(TestObjectAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexBufferEXT(GLenum target, GLenum internalformat, GLuint buffer);
        public static TexBufferEXT glTexBufferEXT = ((TexBufferEXT)(Gl.GetDelegateForExtensionMethod("glTexBufferEXT", typeof(TexBufferEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexBumpParameterfvATI(GLenum pname, System.IntPtr param);
        public static TexBumpParameterfvATI glTexBumpParameterfvATI = ((TexBumpParameterfvATI)(Gl.GetDelegateForExtensionMethod("glTexBumpParameterfvATI", typeof(TexBumpParameterfvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexBumpParameterivATI(GLenum pname, System.IntPtr param);
        public static TexBumpParameterivATI glTexBumpParameterivATI = ((TexBumpParameterivATI)(Gl.GetDelegateForExtensionMethod("glTexBumpParameterivATI", typeof(TexBumpParameterivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1d(GLdouble s);
        public static TexCoord1d glTexCoord1d = ((TexCoord1d)(Gl.GetDelegateForExtensionMethod("glTexCoord1d", typeof(TexCoord1d)))) ?? new TexCoord1d(Imports.TexCoord1d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1dv(System.IntPtr v);
        public static TexCoord1dv glTexCoord1dv = ((TexCoord1dv)(Gl.GetDelegateForExtensionMethod("glTexCoord1dv", typeof(TexCoord1dv)))) ?? new TexCoord1dv(Imports.TexCoord1dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1f(GLfloat s);
        public static TexCoord1f glTexCoord1f = ((TexCoord1f)(Gl.GetDelegateForExtensionMethod("glTexCoord1f", typeof(TexCoord1f)))) ?? new TexCoord1f(Imports.TexCoord1f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1fv(System.IntPtr v);
        public static TexCoord1fv glTexCoord1fv = ((TexCoord1fv)(Gl.GetDelegateForExtensionMethod("glTexCoord1fv", typeof(TexCoord1fv)))) ?? new TexCoord1fv(Imports.TexCoord1fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1hNV(GLhalfNV s);
        public static TexCoord1hNV glTexCoord1hNV = ((TexCoord1hNV)(Gl.GetDelegateForExtensionMethod("glTexCoord1hNV", typeof(TexCoord1hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1hvNV(System.IntPtr v);
        public static TexCoord1hvNV glTexCoord1hvNV = ((TexCoord1hvNV)(Gl.GetDelegateForExtensionMethod("glTexCoord1hvNV", typeof(TexCoord1hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1i(GLint s);
        public static TexCoord1i glTexCoord1i = ((TexCoord1i)(Gl.GetDelegateForExtensionMethod("glTexCoord1i", typeof(TexCoord1i)))) ?? new TexCoord1i(Imports.TexCoord1i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1iv(System.IntPtr v);
        public static TexCoord1iv glTexCoord1iv = ((TexCoord1iv)(Gl.GetDelegateForExtensionMethod("glTexCoord1iv", typeof(TexCoord1iv)))) ?? new TexCoord1iv(Imports.TexCoord1iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1s(GLshort s);
        public static TexCoord1s glTexCoord1s = ((TexCoord1s)(Gl.GetDelegateForExtensionMethod("glTexCoord1s", typeof(TexCoord1s)))) ?? new TexCoord1s(Imports.TexCoord1s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord1sv(System.IntPtr v);
        public static TexCoord1sv glTexCoord1sv = ((TexCoord1sv)(Gl.GetDelegateForExtensionMethod("glTexCoord1sv", typeof(TexCoord1sv)))) ?? new TexCoord1sv(Imports.TexCoord1sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2d(GLdouble s, GLdouble t);
        public static TexCoord2d glTexCoord2d = ((TexCoord2d)(Gl.GetDelegateForExtensionMethod("glTexCoord2d", typeof(TexCoord2d)))) ?? new TexCoord2d(Imports.TexCoord2d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2dv(System.IntPtr v);
        public static TexCoord2dv glTexCoord2dv = ((TexCoord2dv)(Gl.GetDelegateForExtensionMethod("glTexCoord2dv", typeof(TexCoord2dv)))) ?? new TexCoord2dv(Imports.TexCoord2dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2f(GLfloat s, GLfloat t);
        public static TexCoord2f glTexCoord2f = ((TexCoord2f)(Gl.GetDelegateForExtensionMethod("glTexCoord2f", typeof(TexCoord2f)))) ?? new TexCoord2f(Imports.TexCoord2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fColor3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
        public static TexCoord2fColor3fVertex3fSUN glTexCoord2fColor3fVertex3fSUN = ((TexCoord2fColor3fVertex3fSUN)(Gl.GetDelegateForExtensionMethod("glTexCoord2fColor3fVertex3fSUN", typeof(TexCoord2fColor3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fColor3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr v);
        public static TexCoord2fColor3fVertex3fvSUN glTexCoord2fColor3fVertex3fvSUN = ((TexCoord2fColor3fVertex3fvSUN)(Gl.GetDelegateForExtensionMethod("glTexCoord2fColor3fVertex3fvSUN", typeof(TexCoord2fColor3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fColor4fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        public static TexCoord2fColor4fNormal3fVertex3fSUN glTexCoord2fColor4fNormal3fVertex3fSUN = ((TexCoord2fColor4fNormal3fVertex3fSUN)(Gl.GetDelegateForExtensionMethod("glTexCoord2fColor4fNormal3fVertex3fSUN", typeof(TexCoord2fColor4fNormal3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fColor4fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr n, System.IntPtr v);
        public static TexCoord2fColor4fNormal3fVertex3fvSUN glTexCoord2fColor4fNormal3fVertex3fvSUN = ((TexCoord2fColor4fNormal3fVertex3fvSUN)(Gl.GetDelegateForExtensionMethod("glTexCoord2fColor4fNormal3fVertex3fvSUN", typeof(TexCoord2fColor4fNormal3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fColor4ubVertex3fSUN(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
        public static TexCoord2fColor4ubVertex3fSUN glTexCoord2fColor4ubVertex3fSUN = ((TexCoord2fColor4ubVertex3fSUN)(Gl.GetDelegateForExtensionMethod("glTexCoord2fColor4ubVertex3fSUN", typeof(TexCoord2fColor4ubVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fColor4ubVertex3fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr v);
        public static TexCoord2fColor4ubVertex3fvSUN glTexCoord2fColor4ubVertex3fvSUN = ((TexCoord2fColor4ubVertex3fvSUN)(Gl.GetDelegateForExtensionMethod("glTexCoord2fColor4ubVertex3fvSUN", typeof(TexCoord2fColor4ubVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fNormal3fVertex3fSUN(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
        public static TexCoord2fNormal3fVertex3fSUN glTexCoord2fNormal3fVertex3fSUN = ((TexCoord2fNormal3fVertex3fSUN)(Gl.GetDelegateForExtensionMethod("glTexCoord2fNormal3fVertex3fSUN", typeof(TexCoord2fNormal3fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fNormal3fVertex3fvSUN(System.IntPtr tc, System.IntPtr n, System.IntPtr v);
        public static TexCoord2fNormal3fVertex3fvSUN glTexCoord2fNormal3fVertex3fvSUN = ((TexCoord2fNormal3fVertex3fvSUN)(Gl.GetDelegateForExtensionMethod("glTexCoord2fNormal3fVertex3fvSUN", typeof(TexCoord2fNormal3fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fv(System.IntPtr v);
        public static TexCoord2fv glTexCoord2fv = ((TexCoord2fv)(Gl.GetDelegateForExtensionMethod("glTexCoord2fv", typeof(TexCoord2fv)))) ?? new TexCoord2fv(Imports.TexCoord2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fVertex3fSUN(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
        public static TexCoord2fVertex3fSUN glTexCoord2fVertex3fSUN = ((TexCoord2fVertex3fSUN)(Gl.GetDelegateForExtensionMethod("glTexCoord2fVertex3fSUN", typeof(TexCoord2fVertex3fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2fVertex3fvSUN(System.IntPtr tc, System.IntPtr v);
        public static TexCoord2fVertex3fvSUN glTexCoord2fVertex3fvSUN = ((TexCoord2fVertex3fvSUN)(Gl.GetDelegateForExtensionMethod("glTexCoord2fVertex3fvSUN", typeof(TexCoord2fVertex3fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2hNV(GLhalfNV s, GLhalfNV t);
        public static TexCoord2hNV glTexCoord2hNV = ((TexCoord2hNV)(Gl.GetDelegateForExtensionMethod("glTexCoord2hNV", typeof(TexCoord2hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2hvNV(System.IntPtr v);
        public static TexCoord2hvNV glTexCoord2hvNV = ((TexCoord2hvNV)(Gl.GetDelegateForExtensionMethod("glTexCoord2hvNV", typeof(TexCoord2hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2i(GLint s, GLint t);
        public static TexCoord2i glTexCoord2i = ((TexCoord2i)(Gl.GetDelegateForExtensionMethod("glTexCoord2i", typeof(TexCoord2i)))) ?? new TexCoord2i(Imports.TexCoord2i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2iv(System.IntPtr v);
        public static TexCoord2iv glTexCoord2iv = ((TexCoord2iv)(Gl.GetDelegateForExtensionMethod("glTexCoord2iv", typeof(TexCoord2iv)))) ?? new TexCoord2iv(Imports.TexCoord2iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2s(GLshort s, GLshort t);
        public static TexCoord2s glTexCoord2s = ((TexCoord2s)(Gl.GetDelegateForExtensionMethod("glTexCoord2s", typeof(TexCoord2s)))) ?? new TexCoord2s(Imports.TexCoord2s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord2sv(System.IntPtr v);
        public static TexCoord2sv glTexCoord2sv = ((TexCoord2sv)(Gl.GetDelegateForExtensionMethod("glTexCoord2sv", typeof(TexCoord2sv)))) ?? new TexCoord2sv(Imports.TexCoord2sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3d(GLdouble s, GLdouble t, GLdouble r);
        public static TexCoord3d glTexCoord3d = ((TexCoord3d)(Gl.GetDelegateForExtensionMethod("glTexCoord3d", typeof(TexCoord3d)))) ?? new TexCoord3d(Imports.TexCoord3d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3dv(System.IntPtr v);
        public static TexCoord3dv glTexCoord3dv = ((TexCoord3dv)(Gl.GetDelegateForExtensionMethod("glTexCoord3dv", typeof(TexCoord3dv)))) ?? new TexCoord3dv(Imports.TexCoord3dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3f(GLfloat s, GLfloat t, GLfloat r);
        public static TexCoord3f glTexCoord3f = ((TexCoord3f)(Gl.GetDelegateForExtensionMethod("glTexCoord3f", typeof(TexCoord3f)))) ?? new TexCoord3f(Imports.TexCoord3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3fv(System.IntPtr v);
        public static TexCoord3fv glTexCoord3fv = ((TexCoord3fv)(Gl.GetDelegateForExtensionMethod("glTexCoord3fv", typeof(TexCoord3fv)))) ?? new TexCoord3fv(Imports.TexCoord3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r);
        public static TexCoord3hNV glTexCoord3hNV = ((TexCoord3hNV)(Gl.GetDelegateForExtensionMethod("glTexCoord3hNV", typeof(TexCoord3hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3hvNV(System.IntPtr v);
        public static TexCoord3hvNV glTexCoord3hvNV = ((TexCoord3hvNV)(Gl.GetDelegateForExtensionMethod("glTexCoord3hvNV", typeof(TexCoord3hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3i(GLint s, GLint t, GLint r);
        public static TexCoord3i glTexCoord3i = ((TexCoord3i)(Gl.GetDelegateForExtensionMethod("glTexCoord3i", typeof(TexCoord3i)))) ?? new TexCoord3i(Imports.TexCoord3i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3iv(System.IntPtr v);
        public static TexCoord3iv glTexCoord3iv = ((TexCoord3iv)(Gl.GetDelegateForExtensionMethod("glTexCoord3iv", typeof(TexCoord3iv)))) ?? new TexCoord3iv(Imports.TexCoord3iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3s(GLshort s, GLshort t, GLshort r);
        public static TexCoord3s glTexCoord3s = ((TexCoord3s)(Gl.GetDelegateForExtensionMethod("glTexCoord3s", typeof(TexCoord3s)))) ?? new TexCoord3s(Imports.TexCoord3s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord3sv(System.IntPtr v);
        public static TexCoord3sv glTexCoord3sv = ((TexCoord3sv)(Gl.GetDelegateForExtensionMethod("glTexCoord3sv", typeof(TexCoord3sv)))) ?? new TexCoord3sv(Imports.TexCoord3sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
        public static TexCoord4d glTexCoord4d = ((TexCoord4d)(Gl.GetDelegateForExtensionMethod("glTexCoord4d", typeof(TexCoord4d)))) ?? new TexCoord4d(Imports.TexCoord4d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4dv(System.IntPtr v);
        public static TexCoord4dv glTexCoord4dv = ((TexCoord4dv)(Gl.GetDelegateForExtensionMethod("glTexCoord4dv", typeof(TexCoord4dv)))) ?? new TexCoord4dv(Imports.TexCoord4dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
        public static TexCoord4f glTexCoord4f = ((TexCoord4f)(Gl.GetDelegateForExtensionMethod("glTexCoord4f", typeof(TexCoord4f)))) ?? new TexCoord4f(Imports.TexCoord4f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4fColor4fNormal3fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static TexCoord4fColor4fNormal3fVertex4fSUN glTexCoord4fColor4fNormal3fVertex4fSUN = ((TexCoord4fColor4fNormal3fVertex4fSUN)(Gl.GetDelegateForExtensionMethod("glTexCoord4fColor4fNormal3fVertex4fSUN", typeof(TexCoord4fColor4fNormal3fVertex4fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4fColor4fNormal3fVertex4fvSUN(System.IntPtr tc, System.IntPtr c, System.IntPtr n, System.IntPtr v);
        public static TexCoord4fColor4fNormal3fVertex4fvSUN glTexCoord4fColor4fNormal3fVertex4fvSUN = ((TexCoord4fColor4fNormal3fVertex4fvSUN)(Gl.GetDelegateForExtensionMethod("glTexCoord4fColor4fNormal3fVertex4fvSUN", typeof(TexCoord4fColor4fNormal3fVertex4fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4fv(System.IntPtr v);
        public static TexCoord4fv glTexCoord4fv = ((TexCoord4fv)(Gl.GetDelegateForExtensionMethod("glTexCoord4fv", typeof(TexCoord4fv)))) ?? new TexCoord4fv(Imports.TexCoord4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4fVertex4fSUN(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static TexCoord4fVertex4fSUN glTexCoord4fVertex4fSUN = ((TexCoord4fVertex4fSUN)(Gl.GetDelegateForExtensionMethod("glTexCoord4fVertex4fSUN", typeof(TexCoord4fVertex4fSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4fVertex4fvSUN(System.IntPtr tc, System.IntPtr v);
        public static TexCoord4fVertex4fvSUN glTexCoord4fVertex4fvSUN = ((TexCoord4fVertex4fvSUN)(Gl.GetDelegateForExtensionMethod("glTexCoord4fVertex4fvSUN", typeof(TexCoord4fVertex4fvSUN))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4hNV(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
        public static TexCoord4hNV glTexCoord4hNV = ((TexCoord4hNV)(Gl.GetDelegateForExtensionMethod("glTexCoord4hNV", typeof(TexCoord4hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4hvNV(System.IntPtr v);
        public static TexCoord4hvNV glTexCoord4hvNV = ((TexCoord4hvNV)(Gl.GetDelegateForExtensionMethod("glTexCoord4hvNV", typeof(TexCoord4hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4i(GLint s, GLint t, GLint r, GLint q);
        public static TexCoord4i glTexCoord4i = ((TexCoord4i)(Gl.GetDelegateForExtensionMethod("glTexCoord4i", typeof(TexCoord4i)))) ?? new TexCoord4i(Imports.TexCoord4i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4iv(System.IntPtr v);
        public static TexCoord4iv glTexCoord4iv = ((TexCoord4iv)(Gl.GetDelegateForExtensionMethod("glTexCoord4iv", typeof(TexCoord4iv)))) ?? new TexCoord4iv(Imports.TexCoord4iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
        public static TexCoord4s glTexCoord4s = ((TexCoord4s)(Gl.GetDelegateForExtensionMethod("glTexCoord4s", typeof(TexCoord4s)))) ?? new TexCoord4s(Imports.TexCoord4s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoord4sv(System.IntPtr v);
        public static TexCoord4sv glTexCoord4sv = ((TexCoord4sv)(Gl.GetDelegateForExtensionMethod("glTexCoord4sv", typeof(TexCoord4sv)))) ?? new TexCoord4sv(Imports.TexCoord4sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoordPointer(GLint size, GLenum type, GLsizei stride, System.IntPtr pointer);
        public static TexCoordPointer glTexCoordPointer = ((TexCoordPointer)(Gl.GetDelegateForExtensionMethod("glTexCoordPointer", typeof(TexCoordPointer)))) ?? new TexCoordPointer(Imports.TexCoordPointer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoordPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, System.IntPtr pointer);
        public static TexCoordPointerEXT glTexCoordPointerEXT = ((TexCoordPointerEXT)(Gl.GetDelegateForExtensionMethod("glTexCoordPointerEXT", typeof(TexCoordPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoordPointerListIBM(GLint size, GLenum type, GLint stride, System.IntPtr pointer, GLint ptrstride);
        public static TexCoordPointerListIBM glTexCoordPointerListIBM = ((TexCoordPointerListIBM)(Gl.GetDelegateForExtensionMethod("glTexCoordPointerListIBM", typeof(TexCoordPointerListIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexCoordPointervINTEL(GLint size, GLenum type, System.IntPtr pointer);
        public static TexCoordPointervINTEL glTexCoordPointervINTEL = ((TexCoordPointervINTEL)(Gl.GetDelegateForExtensionMethod("glTexCoordPointervINTEL", typeof(TexCoordPointervINTEL))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexEnvf(GLenum target, GLenum pname, GLfloat param);
        public static TexEnvf glTexEnvf = ((TexEnvf)(Gl.GetDelegateForExtensionMethod("glTexEnvf", typeof(TexEnvf)))) ?? new TexEnvf(Imports.TexEnvf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexEnvfv(GLenum target, GLenum pname, System.IntPtr @params);
        public static TexEnvfv glTexEnvfv = ((TexEnvfv)(Gl.GetDelegateForExtensionMethod("glTexEnvfv", typeof(TexEnvfv)))) ?? new TexEnvfv(Imports.TexEnvfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexEnvi(GLenum target, GLenum pname, GLint param);
        public static TexEnvi glTexEnvi = ((TexEnvi)(Gl.GetDelegateForExtensionMethod("glTexEnvi", typeof(TexEnvi)))) ?? new TexEnvi(Imports.TexEnvi);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexEnviv(GLenum target, GLenum pname, System.IntPtr @params);
        public static TexEnviv glTexEnviv = ((TexEnviv)(Gl.GetDelegateForExtensionMethod("glTexEnviv", typeof(TexEnviv)))) ?? new TexEnviv(Imports.TexEnviv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexFilterFuncSGIS(GLenum target, GLenum filter, GLsizei n, System.IntPtr weights);
        public static TexFilterFuncSGIS glTexFilterFuncSGIS = ((TexFilterFuncSGIS)(Gl.GetDelegateForExtensionMethod("glTexFilterFuncSGIS", typeof(TexFilterFuncSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexGend(GLenum coord, GLenum pname, GLdouble param);
        public static TexGend glTexGend = ((TexGend)(Gl.GetDelegateForExtensionMethod("glTexGend", typeof(TexGend)))) ?? new TexGend(Imports.TexGend);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexGendv(GLenum coord, GLenum pname, System.IntPtr @params);
        public static TexGendv glTexGendv = ((TexGendv)(Gl.GetDelegateForExtensionMethod("glTexGendv", typeof(TexGendv)))) ?? new TexGendv(Imports.TexGendv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexGenf(GLenum coord, GLenum pname, GLfloat param);
        public static TexGenf glTexGenf = ((TexGenf)(Gl.GetDelegateForExtensionMethod("glTexGenf", typeof(TexGenf)))) ?? new TexGenf(Imports.TexGenf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexGenfv(GLenum coord, GLenum pname, System.IntPtr @params);
        public static TexGenfv glTexGenfv = ((TexGenfv)(Gl.GetDelegateForExtensionMethod("glTexGenfv", typeof(TexGenfv)))) ?? new TexGenfv(Imports.TexGenfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexGeni(GLenum coord, GLenum pname, GLint param);
        public static TexGeni glTexGeni = ((TexGeni)(Gl.GetDelegateForExtensionMethod("glTexGeni", typeof(TexGeni)))) ?? new TexGeni(Imports.TexGeni);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexGeniv(GLenum coord, GLenum pname, System.IntPtr @params);
        public static TexGeniv glTexGeniv = ((TexGeniv)(Gl.GetDelegateForExtensionMethod("glTexGeniv", typeof(TexGeniv)))) ?? new TexGeniv(Imports.TexGeniv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, System.IntPtr pixels);
        public static TexImage1D glTexImage1D = ((TexImage1D)(Gl.GetDelegateForExtensionMethod("glTexImage1D", typeof(TexImage1D)))) ?? new TexImage1D(Imports.TexImage1D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, System.IntPtr pixels);
        public static TexImage2D glTexImage2D = ((TexImage2D)(Gl.GetDelegateForExtensionMethod("glTexImage2D", typeof(TexImage2D)))) ?? new TexImage2D(Imports.TexImage2D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, System.IntPtr pixels);
        public static TexImage3D glTexImage3D = ((TexImage3D)(Gl.GetDelegateForExtensionMethod("glTexImage3D", typeof(TexImage3D)))) ?? new TexImage3D(Imports.TexImage3D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexImage3DEXT(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, System.IntPtr pixels);
        public static TexImage3DEXT glTexImage3DEXT = ((TexImage3DEXT)(Gl.GetDelegateForExtensionMethod("glTexImage3DEXT", typeof(TexImage3DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexImage4DSGIS(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, System.IntPtr pixels);
        public static TexImage4DSGIS glTexImage4DSGIS = ((TexImage4DSGIS)(Gl.GetDelegateForExtensionMethod("glTexImage4DSGIS", typeof(TexImage4DSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexParameterf(GLenum target, GLenum pname, GLfloat param);
        public static TexParameterf glTexParameterf = ((TexParameterf)(Gl.GetDelegateForExtensionMethod("glTexParameterf", typeof(TexParameterf)))) ?? new TexParameterf(Imports.TexParameterf);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexParameterfv(GLenum target, GLenum pname, System.IntPtr @params);
        public static TexParameterfv glTexParameterfv = ((TexParameterfv)(Gl.GetDelegateForExtensionMethod("glTexParameterfv", typeof(TexParameterfv)))) ?? new TexParameterfv(Imports.TexParameterfv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexParameteri(GLenum target, GLenum pname, GLint param);
        public static TexParameteri glTexParameteri = ((TexParameteri)(Gl.GetDelegateForExtensionMethod("glTexParameteri", typeof(TexParameteri)))) ?? new TexParameteri(Imports.TexParameteri);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexParameterIivEXT(GLenum target, GLenum pname, System.IntPtr @params);
        public static TexParameterIivEXT glTexParameterIivEXT = ((TexParameterIivEXT)(Gl.GetDelegateForExtensionMethod("glTexParameterIivEXT", typeof(TexParameterIivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexParameterIuivEXT(GLenum target, GLenum pname, System.IntPtr @params);
        public static TexParameterIuivEXT glTexParameterIuivEXT = ((TexParameterIuivEXT)(Gl.GetDelegateForExtensionMethod("glTexParameterIuivEXT", typeof(TexParameterIuivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexParameteriv(GLenum target, GLenum pname, System.IntPtr @params);
        public static TexParameteriv glTexParameteriv = ((TexParameteriv)(Gl.GetDelegateForExtensionMethod("glTexParameteriv", typeof(TexParameteriv)))) ?? new TexParameteriv(Imports.TexParameteriv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, System.IntPtr pixels);
        public static TexSubImage1D glTexSubImage1D = ((TexSubImage1D)(Gl.GetDelegateForExtensionMethod("glTexSubImage1D", typeof(TexSubImage1D)))) ?? new TexSubImage1D(Imports.TexSubImage1D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexSubImage1DEXT(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, System.IntPtr pixels);
        public static TexSubImage1DEXT glTexSubImage1DEXT = ((TexSubImage1DEXT)(Gl.GetDelegateForExtensionMethod("glTexSubImage1DEXT", typeof(TexSubImage1DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr pixels);
        public static TexSubImage2D glTexSubImage2D = ((TexSubImage2D)(Gl.GetDelegateForExtensionMethod("glTexSubImage2D", typeof(TexSubImage2D)))) ?? new TexSubImage2D(Imports.TexSubImage2D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexSubImage2DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr pixels);
        public static TexSubImage2DEXT glTexSubImage2DEXT = ((TexSubImage2DEXT)(Gl.GetDelegateForExtensionMethod("glTexSubImage2DEXT", typeof(TexSubImage2DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, System.IntPtr pixels);
        public static TexSubImage3D glTexSubImage3D = ((TexSubImage3D)(Gl.GetDelegateForExtensionMethod("glTexSubImage3D", typeof(TexSubImage3D)))) ?? new TexSubImage3D(Imports.TexSubImage3D);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexSubImage3DEXT(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, System.IntPtr pixels);
        public static TexSubImage3DEXT glTexSubImage3DEXT = ((TexSubImage3DEXT)(Gl.GetDelegateForExtensionMethod("glTexSubImage3DEXT", typeof(TexSubImage3DEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TexSubImage4DSGIS(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, System.IntPtr pixels);
        public static TexSubImage4DSGIS glTexSubImage4DSGIS = ((TexSubImage4DSGIS)(Gl.GetDelegateForExtensionMethod("glTexSubImage4DSGIS", typeof(TexSubImage4DSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TextureColorMaskSGIS(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
        public static TextureColorMaskSGIS glTextureColorMaskSGIS = ((TextureColorMaskSGIS)(Gl.GetDelegateForExtensionMethod("glTextureColorMaskSGIS", typeof(TextureColorMaskSGIS))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TextureLightEXT(GLenum pname);
        public static TextureLightEXT glTextureLightEXT = ((TextureLightEXT)(Gl.GetDelegateForExtensionMethod("glTextureLightEXT", typeof(TextureLightEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TextureMaterialEXT(GLenum face, GLenum mode);
        public static TextureMaterialEXT glTextureMaterialEXT = ((TextureMaterialEXT)(Gl.GetDelegateForExtensionMethod("glTextureMaterialEXT", typeof(TextureMaterialEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TextureNormalEXT(GLenum mode);
        public static TextureNormalEXT glTextureNormalEXT = ((TextureNormalEXT)(Gl.GetDelegateForExtensionMethod("glTextureNormalEXT", typeof(TextureNormalEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TrackMatrixNV(GLenum target, GLuint address, GLenum matrix, GLenum transform);
        public static TrackMatrixNV glTrackMatrixNV = ((TrackMatrixNV)(Gl.GetDelegateForExtensionMethod("glTrackMatrixNV", typeof(TrackMatrixNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TransformFeedbackAttribsNV(GLuint count, System.IntPtr attribs, GLenum bufferMode);
        public static TransformFeedbackAttribsNV glTransformFeedbackAttribsNV = ((TransformFeedbackAttribsNV)(Gl.GetDelegateForExtensionMethod("glTransformFeedbackAttribsNV", typeof(TransformFeedbackAttribsNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void TransformFeedbackVaryingsNV(GLuint program, GLsizei count, System.IntPtr locations, GLenum bufferMode);
        public static TransformFeedbackVaryingsNV glTransformFeedbackVaryingsNV = ((TransformFeedbackVaryingsNV)(Gl.GetDelegateForExtensionMethod("glTransformFeedbackVaryingsNV", typeof(TransformFeedbackVaryingsNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Translated(GLdouble x, GLdouble y, GLdouble z);
        public static Translated glTranslated = ((Translated)(Gl.GetDelegateForExtensionMethod("glTranslated", typeof(Translated)))) ?? new Translated(Imports.Translated);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Translatef(GLfloat x, GLfloat y, GLfloat z);
        public static Translatef glTranslatef = ((Translatef)(Gl.GetDelegateForExtensionMethod("glTranslatef", typeof(Translatef)))) ?? new Translatef(Imports.Translatef);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1f(GLint location, GLfloat v0);
        public static Uniform1f glUniform1f = ((Uniform1f)(Gl.GetDelegateForExtensionMethod("glUniform1f", typeof(Uniform1f)))) ?? new Uniform1f(Imports.Uniform1f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1fARB(GLint location, GLfloat v0);
        public static Uniform1fARB glUniform1fARB = ((Uniform1fARB)(Gl.GetDelegateForExtensionMethod("glUniform1fARB", typeof(Uniform1fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1fv(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform1fv glUniform1fv = ((Uniform1fv)(Gl.GetDelegateForExtensionMethod("glUniform1fv", typeof(Uniform1fv)))) ?? new Uniform1fv(Imports.Uniform1fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1fvARB(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform1fvARB glUniform1fvARB = ((Uniform1fvARB)(Gl.GetDelegateForExtensionMethod("glUniform1fvARB", typeof(Uniform1fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1i(GLint location, GLint v0);
        public static Uniform1i glUniform1i = ((Uniform1i)(Gl.GetDelegateForExtensionMethod("glUniform1i", typeof(Uniform1i)))) ?? new Uniform1i(Imports.Uniform1i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1iARB(GLint location, GLint v0);
        public static Uniform1iARB glUniform1iARB = ((Uniform1iARB)(Gl.GetDelegateForExtensionMethod("glUniform1iARB", typeof(Uniform1iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1iv(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform1iv glUniform1iv = ((Uniform1iv)(Gl.GetDelegateForExtensionMethod("glUniform1iv", typeof(Uniform1iv)))) ?? new Uniform1iv(Imports.Uniform1iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1ivARB(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform1ivARB glUniform1ivARB = ((Uniform1ivARB)(Gl.GetDelegateForExtensionMethod("glUniform1ivARB", typeof(Uniform1ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1uiEXT(GLint location, GLuint v0);
        public static Uniform1uiEXT glUniform1uiEXT = ((Uniform1uiEXT)(Gl.GetDelegateForExtensionMethod("glUniform1uiEXT", typeof(Uniform1uiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform1uivEXT(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform1uivEXT glUniform1uivEXT = ((Uniform1uivEXT)(Gl.GetDelegateForExtensionMethod("glUniform1uivEXT", typeof(Uniform1uivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2f(GLint location, GLfloat v0, GLfloat v1);
        public static Uniform2f glUniform2f = ((Uniform2f)(Gl.GetDelegateForExtensionMethod("glUniform2f", typeof(Uniform2f)))) ?? new Uniform2f(Imports.Uniform2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2fARB(GLint location, GLfloat v0, GLfloat v1);
        public static Uniform2fARB glUniform2fARB = ((Uniform2fARB)(Gl.GetDelegateForExtensionMethod("glUniform2fARB", typeof(Uniform2fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2fv(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform2fv glUniform2fv = ((Uniform2fv)(Gl.GetDelegateForExtensionMethod("glUniform2fv", typeof(Uniform2fv)))) ?? new Uniform2fv(Imports.Uniform2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2fvARB(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform2fvARB glUniform2fvARB = ((Uniform2fvARB)(Gl.GetDelegateForExtensionMethod("glUniform2fvARB", typeof(Uniform2fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2i(GLint location, GLint v0, GLint v1);
        public static Uniform2i glUniform2i = ((Uniform2i)(Gl.GetDelegateForExtensionMethod("glUniform2i", typeof(Uniform2i)))) ?? new Uniform2i(Imports.Uniform2i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2iARB(GLint location, GLint v0, GLint v1);
        public static Uniform2iARB glUniform2iARB = ((Uniform2iARB)(Gl.GetDelegateForExtensionMethod("glUniform2iARB", typeof(Uniform2iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2iv(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform2iv glUniform2iv = ((Uniform2iv)(Gl.GetDelegateForExtensionMethod("glUniform2iv", typeof(Uniform2iv)))) ?? new Uniform2iv(Imports.Uniform2iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2ivARB(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform2ivARB glUniform2ivARB = ((Uniform2ivARB)(Gl.GetDelegateForExtensionMethod("glUniform2ivARB", typeof(Uniform2ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2uiEXT(GLint location, GLuint v0, GLuint v1);
        public static Uniform2uiEXT glUniform2uiEXT = ((Uniform2uiEXT)(Gl.GetDelegateForExtensionMethod("glUniform2uiEXT", typeof(Uniform2uiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform2uivEXT(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform2uivEXT glUniform2uivEXT = ((Uniform2uivEXT)(Gl.GetDelegateForExtensionMethod("glUniform2uivEXT", typeof(Uniform2uivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
        public static Uniform3f glUniform3f = ((Uniform3f)(Gl.GetDelegateForExtensionMethod("glUniform3f", typeof(Uniform3f)))) ?? new Uniform3f(Imports.Uniform3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
        public static Uniform3fARB glUniform3fARB = ((Uniform3fARB)(Gl.GetDelegateForExtensionMethod("glUniform3fARB", typeof(Uniform3fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3fv(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform3fv glUniform3fv = ((Uniform3fv)(Gl.GetDelegateForExtensionMethod("glUniform3fv", typeof(Uniform3fv)))) ?? new Uniform3fv(Imports.Uniform3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3fvARB(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform3fvARB glUniform3fvARB = ((Uniform3fvARB)(Gl.GetDelegateForExtensionMethod("glUniform3fvARB", typeof(Uniform3fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3i(GLint location, GLint v0, GLint v1, GLint v2);
        public static Uniform3i glUniform3i = ((Uniform3i)(Gl.GetDelegateForExtensionMethod("glUniform3i", typeof(Uniform3i)))) ?? new Uniform3i(Imports.Uniform3i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3iARB(GLint location, GLint v0, GLint v1, GLint v2);
        public static Uniform3iARB glUniform3iARB = ((Uniform3iARB)(Gl.GetDelegateForExtensionMethod("glUniform3iARB", typeof(Uniform3iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3iv(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform3iv glUniform3iv = ((Uniform3iv)(Gl.GetDelegateForExtensionMethod("glUniform3iv", typeof(Uniform3iv)))) ?? new Uniform3iv(Imports.Uniform3iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3ivARB(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform3ivARB glUniform3ivARB = ((Uniform3ivARB)(Gl.GetDelegateForExtensionMethod("glUniform3ivARB", typeof(Uniform3ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2);
        public static Uniform3uiEXT glUniform3uiEXT = ((Uniform3uiEXT)(Gl.GetDelegateForExtensionMethod("glUniform3uiEXT", typeof(Uniform3uiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform3uivEXT(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform3uivEXT glUniform3uivEXT = ((Uniform3uivEXT)(Gl.GetDelegateForExtensionMethod("glUniform3uivEXT", typeof(Uniform3uivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
        public static Uniform4f glUniform4f = ((Uniform4f)(Gl.GetDelegateForExtensionMethod("glUniform4f", typeof(Uniform4f)))) ?? new Uniform4f(Imports.Uniform4f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
        public static Uniform4fARB glUniform4fARB = ((Uniform4fARB)(Gl.GetDelegateForExtensionMethod("glUniform4fARB", typeof(Uniform4fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4fv(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform4fv glUniform4fv = ((Uniform4fv)(Gl.GetDelegateForExtensionMethod("glUniform4fv", typeof(Uniform4fv)))) ?? new Uniform4fv(Imports.Uniform4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4fvARB(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform4fvARB glUniform4fvARB = ((Uniform4fvARB)(Gl.GetDelegateForExtensionMethod("glUniform4fvARB", typeof(Uniform4fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
        public static Uniform4i glUniform4i = ((Uniform4i)(Gl.GetDelegateForExtensionMethod("glUniform4i", typeof(Uniform4i)))) ?? new Uniform4i(Imports.Uniform4i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
        public static Uniform4iARB glUniform4iARB = ((Uniform4iARB)(Gl.GetDelegateForExtensionMethod("glUniform4iARB", typeof(Uniform4iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4iv(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform4iv glUniform4iv = ((Uniform4iv)(Gl.GetDelegateForExtensionMethod("glUniform4iv", typeof(Uniform4iv)))) ?? new Uniform4iv(Imports.Uniform4iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4ivARB(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform4ivARB glUniform4ivARB = ((Uniform4ivARB)(Gl.GetDelegateForExtensionMethod("glUniform4ivARB", typeof(Uniform4ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
        public static Uniform4uiEXT glUniform4uiEXT = ((Uniform4uiEXT)(Gl.GetDelegateForExtensionMethod("glUniform4uiEXT", typeof(Uniform4uiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Uniform4uivEXT(GLint location, GLsizei count, System.IntPtr value);
        public static Uniform4uivEXT glUniform4uivEXT = ((Uniform4uivEXT)(Gl.GetDelegateForExtensionMethod("glUniform4uivEXT", typeof(Uniform4uivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformBufferEXT(GLuint program, GLint location, GLuint buffer);
        public static UniformBufferEXT glUniformBufferEXT = ((UniformBufferEXT)(Gl.GetDelegateForExtensionMethod("glUniformBufferEXT", typeof(UniformBufferEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        public static UniformMatrix2fv glUniformMatrix2fv = ((UniformMatrix2fv)(Gl.GetDelegateForExtensionMethod("glUniformMatrix2fv", typeof(UniformMatrix2fv)))) ?? new UniformMatrix2fv(Imports.UniformMatrix2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        public static UniformMatrix2fvARB glUniformMatrix2fvARB = ((UniformMatrix2fvARB)(Gl.GetDelegateForExtensionMethod("glUniformMatrix2fvARB", typeof(UniformMatrix2fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        public static UniformMatrix2x3fv glUniformMatrix2x3fv = ((UniformMatrix2x3fv)(Gl.GetDelegateForExtensionMethod("glUniformMatrix2x3fv", typeof(UniformMatrix2x3fv)))) ?? new UniformMatrix2x3fv(Imports.UniformMatrix2x3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        public static UniformMatrix2x4fv glUniformMatrix2x4fv = ((UniformMatrix2x4fv)(Gl.GetDelegateForExtensionMethod("glUniformMatrix2x4fv", typeof(UniformMatrix2x4fv)))) ?? new UniformMatrix2x4fv(Imports.UniformMatrix2x4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        public static UniformMatrix3fv glUniformMatrix3fv = ((UniformMatrix3fv)(Gl.GetDelegateForExtensionMethod("glUniformMatrix3fv", typeof(UniformMatrix3fv)))) ?? new UniformMatrix3fv(Imports.UniformMatrix3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        public static UniformMatrix3fvARB glUniformMatrix3fvARB = ((UniformMatrix3fvARB)(Gl.GetDelegateForExtensionMethod("glUniformMatrix3fvARB", typeof(UniformMatrix3fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        public static UniformMatrix3x2fv glUniformMatrix3x2fv = ((UniformMatrix3x2fv)(Gl.GetDelegateForExtensionMethod("glUniformMatrix3x2fv", typeof(UniformMatrix3x2fv)))) ?? new UniformMatrix3x2fv(Imports.UniformMatrix3x2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        public static UniformMatrix3x4fv glUniformMatrix3x4fv = ((UniformMatrix3x4fv)(Gl.GetDelegateForExtensionMethod("glUniformMatrix3x4fv", typeof(UniformMatrix3x4fv)))) ?? new UniformMatrix3x4fv(Imports.UniformMatrix3x4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        public static UniformMatrix4fv glUniformMatrix4fv = ((UniformMatrix4fv)(Gl.GetDelegateForExtensionMethod("glUniformMatrix4fv", typeof(UniformMatrix4fv)))) ?? new UniformMatrix4fv(Imports.UniformMatrix4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        public static UniformMatrix4fvARB glUniformMatrix4fvARB = ((UniformMatrix4fvARB)(Gl.GetDelegateForExtensionMethod("glUniformMatrix4fvARB", typeof(UniformMatrix4fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        public static UniformMatrix4x2fv glUniformMatrix4x2fv = ((UniformMatrix4x2fv)(Gl.GetDelegateForExtensionMethod("glUniformMatrix4x2fv", typeof(UniformMatrix4x2fv)))) ?? new UniformMatrix4x2fv(Imports.UniformMatrix4x2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        public static UniformMatrix4x3fv glUniformMatrix4x3fv = ((UniformMatrix4x3fv)(Gl.GetDelegateForExtensionMethod("glUniformMatrix4x3fv", typeof(UniformMatrix4x3fv)))) ?? new UniformMatrix4x3fv(Imports.UniformMatrix4x3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UnlockArraysEXT();
        public static UnlockArraysEXT glUnlockArraysEXT = ((UnlockArraysEXT)(Gl.GetDelegateForExtensionMethod("glUnlockArraysEXT", typeof(UnlockArraysEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean UnmapBuffer(GLenum target);
        public static UnmapBuffer glUnmapBuffer = ((UnmapBuffer)(Gl.GetDelegateForExtensionMethod("glUnmapBuffer", typeof(UnmapBuffer)))) ?? new UnmapBuffer(Imports.UnmapBuffer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate GLboolean UnmapBufferARB(GLenum target);
        public static UnmapBufferARB glUnmapBufferARB = ((UnmapBufferARB)(Gl.GetDelegateForExtensionMethod("glUnmapBufferARB", typeof(UnmapBufferARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UnmapObjectBufferATI(GLuint buffer);
        public static UnmapObjectBufferATI glUnmapObjectBufferATI = ((UnmapObjectBufferATI)(Gl.GetDelegateForExtensionMethod("glUnmapObjectBufferATI", typeof(UnmapObjectBufferATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UpdateObjectBufferATI(GLuint buffer, GLuint offset, GLsizei size, System.IntPtr pointer, GLenum preserve);
        public static UpdateObjectBufferATI glUpdateObjectBufferATI = ((UpdateObjectBufferATI)(Gl.GetDelegateForExtensionMethod("glUpdateObjectBufferATI", typeof(UpdateObjectBufferATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UseProgram(GLuint program);
        public static UseProgram glUseProgram = ((UseProgram)(Gl.GetDelegateForExtensionMethod("glUseProgram", typeof(UseProgram)))) ?? new UseProgram(Imports.UseProgram);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void UseProgramObjectARB(GLhandleARB programObj);
        public static UseProgramObjectARB glUseProgramObjectARB = ((UseProgramObjectARB)(Gl.GetDelegateForExtensionMethod("glUseProgramObjectARB", typeof(UseProgramObjectARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ValidateProgram(GLuint program);
        public static ValidateProgram glValidateProgram = ((ValidateProgram)(Gl.GetDelegateForExtensionMethod("glValidateProgram", typeof(ValidateProgram)))) ?? new ValidateProgram(Imports.ValidateProgram);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void ValidateProgramARB(GLhandleARB programObj);
        public static ValidateProgramARB glValidateProgramARB = ((ValidateProgramARB)(Gl.GetDelegateForExtensionMethod("glValidateProgramARB", typeof(ValidateProgramARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantArrayObjectATI(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
        public static VariantArrayObjectATI glVariantArrayObjectATI = ((VariantArrayObjectATI)(Gl.GetDelegateForExtensionMethod("glVariantArrayObjectATI", typeof(VariantArrayObjectATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantbvEXT(GLuint id, System.IntPtr addr);
        public static VariantbvEXT glVariantbvEXT = ((VariantbvEXT)(Gl.GetDelegateForExtensionMethod("glVariantbvEXT", typeof(VariantbvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantdvEXT(GLuint id, System.IntPtr addr);
        public static VariantdvEXT glVariantdvEXT = ((VariantdvEXT)(Gl.GetDelegateForExtensionMethod("glVariantdvEXT", typeof(VariantdvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantfvEXT(GLuint id, System.IntPtr addr);
        public static VariantfvEXT glVariantfvEXT = ((VariantfvEXT)(Gl.GetDelegateForExtensionMethod("glVariantfvEXT", typeof(VariantfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantivEXT(GLuint id, System.IntPtr addr);
        public static VariantivEXT glVariantivEXT = ((VariantivEXT)(Gl.GetDelegateForExtensionMethod("glVariantivEXT", typeof(VariantivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantPointerEXT(GLuint id, GLenum type, GLuint stride, System.IntPtr addr);
        public static VariantPointerEXT glVariantPointerEXT = ((VariantPointerEXT)(Gl.GetDelegateForExtensionMethod("glVariantPointerEXT", typeof(VariantPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantsvEXT(GLuint id, System.IntPtr addr);
        public static VariantsvEXT glVariantsvEXT = ((VariantsvEXT)(Gl.GetDelegateForExtensionMethod("glVariantsvEXT", typeof(VariantsvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantubvEXT(GLuint id, System.IntPtr addr);
        public static VariantubvEXT glVariantubvEXT = ((VariantubvEXT)(Gl.GetDelegateForExtensionMethod("glVariantubvEXT", typeof(VariantubvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantuivEXT(GLuint id, System.IntPtr addr);
        public static VariantuivEXT glVariantuivEXT = ((VariantuivEXT)(Gl.GetDelegateForExtensionMethod("glVariantuivEXT", typeof(VariantuivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VariantusvEXT(GLuint id, System.IntPtr addr);
        public static VariantusvEXT glVariantusvEXT = ((VariantusvEXT)(Gl.GetDelegateForExtensionMethod("glVariantusvEXT", typeof(VariantusvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2d(GLdouble x, GLdouble y);
        public static Vertex2d glVertex2d = ((Vertex2d)(Gl.GetDelegateForExtensionMethod("glVertex2d", typeof(Vertex2d)))) ?? new Vertex2d(Imports.Vertex2d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2dv(System.IntPtr v);
        public static Vertex2dv glVertex2dv = ((Vertex2dv)(Gl.GetDelegateForExtensionMethod("glVertex2dv", typeof(Vertex2dv)))) ?? new Vertex2dv(Imports.Vertex2dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2f(GLfloat x, GLfloat y);
        public static Vertex2f glVertex2f = ((Vertex2f)(Gl.GetDelegateForExtensionMethod("glVertex2f", typeof(Vertex2f)))) ?? new Vertex2f(Imports.Vertex2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2fv(System.IntPtr v);
        public static Vertex2fv glVertex2fv = ((Vertex2fv)(Gl.GetDelegateForExtensionMethod("glVertex2fv", typeof(Vertex2fv)))) ?? new Vertex2fv(Imports.Vertex2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2hNV(GLhalfNV x, GLhalfNV y);
        public static Vertex2hNV glVertex2hNV = ((Vertex2hNV)(Gl.GetDelegateForExtensionMethod("glVertex2hNV", typeof(Vertex2hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2hvNV(System.IntPtr v);
        public static Vertex2hvNV glVertex2hvNV = ((Vertex2hvNV)(Gl.GetDelegateForExtensionMethod("glVertex2hvNV", typeof(Vertex2hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2i(GLint x, GLint y);
        public static Vertex2i glVertex2i = ((Vertex2i)(Gl.GetDelegateForExtensionMethod("glVertex2i", typeof(Vertex2i)))) ?? new Vertex2i(Imports.Vertex2i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2iv(System.IntPtr v);
        public static Vertex2iv glVertex2iv = ((Vertex2iv)(Gl.GetDelegateForExtensionMethod("glVertex2iv", typeof(Vertex2iv)))) ?? new Vertex2iv(Imports.Vertex2iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2s(GLshort x, GLshort y);
        public static Vertex2s glVertex2s = ((Vertex2s)(Gl.GetDelegateForExtensionMethod("glVertex2s", typeof(Vertex2s)))) ?? new Vertex2s(Imports.Vertex2s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex2sv(System.IntPtr v);
        public static Vertex2sv glVertex2sv = ((Vertex2sv)(Gl.GetDelegateForExtensionMethod("glVertex2sv", typeof(Vertex2sv)))) ?? new Vertex2sv(Imports.Vertex2sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3d(GLdouble x, GLdouble y, GLdouble z);
        public static Vertex3d glVertex3d = ((Vertex3d)(Gl.GetDelegateForExtensionMethod("glVertex3d", typeof(Vertex3d)))) ?? new Vertex3d(Imports.Vertex3d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3dv(System.IntPtr v);
        public static Vertex3dv glVertex3dv = ((Vertex3dv)(Gl.GetDelegateForExtensionMethod("glVertex3dv", typeof(Vertex3dv)))) ?? new Vertex3dv(Imports.Vertex3dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3f(GLfloat x, GLfloat y, GLfloat z);
        public static Vertex3f glVertex3f = ((Vertex3f)(Gl.GetDelegateForExtensionMethod("glVertex3f", typeof(Vertex3f)))) ?? new Vertex3f(Imports.Vertex3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3fv(System.IntPtr v);
        public static Vertex3fv glVertex3fv = ((Vertex3fv)(Gl.GetDelegateForExtensionMethod("glVertex3fv", typeof(Vertex3fv)))) ?? new Vertex3fv(Imports.Vertex3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z);
        public static Vertex3hNV glVertex3hNV = ((Vertex3hNV)(Gl.GetDelegateForExtensionMethod("glVertex3hNV", typeof(Vertex3hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3hvNV(System.IntPtr v);
        public static Vertex3hvNV glVertex3hvNV = ((Vertex3hvNV)(Gl.GetDelegateForExtensionMethod("glVertex3hvNV", typeof(Vertex3hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3i(GLint x, GLint y, GLint z);
        public static Vertex3i glVertex3i = ((Vertex3i)(Gl.GetDelegateForExtensionMethod("glVertex3i", typeof(Vertex3i)))) ?? new Vertex3i(Imports.Vertex3i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3iv(System.IntPtr v);
        public static Vertex3iv glVertex3iv = ((Vertex3iv)(Gl.GetDelegateForExtensionMethod("glVertex3iv", typeof(Vertex3iv)))) ?? new Vertex3iv(Imports.Vertex3iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3s(GLshort x, GLshort y, GLshort z);
        public static Vertex3s glVertex3s = ((Vertex3s)(Gl.GetDelegateForExtensionMethod("glVertex3s", typeof(Vertex3s)))) ?? new Vertex3s(Imports.Vertex3s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex3sv(System.IntPtr v);
        public static Vertex3sv glVertex3sv = ((Vertex3sv)(Gl.GetDelegateForExtensionMethod("glVertex3sv", typeof(Vertex3sv)))) ?? new Vertex3sv(Imports.Vertex3sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static Vertex4d glVertex4d = ((Vertex4d)(Gl.GetDelegateForExtensionMethod("glVertex4d", typeof(Vertex4d)))) ?? new Vertex4d(Imports.Vertex4d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4dv(System.IntPtr v);
        public static Vertex4dv glVertex4dv = ((Vertex4dv)(Gl.GetDelegateForExtensionMethod("glVertex4dv", typeof(Vertex4dv)))) ?? new Vertex4dv(Imports.Vertex4dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static Vertex4f glVertex4f = ((Vertex4f)(Gl.GetDelegateForExtensionMethod("glVertex4f", typeof(Vertex4f)))) ?? new Vertex4f(Imports.Vertex4f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4fv(System.IntPtr v);
        public static Vertex4fv glVertex4fv = ((Vertex4fv)(Gl.GetDelegateForExtensionMethod("glVertex4fv", typeof(Vertex4fv)))) ?? new Vertex4fv(Imports.Vertex4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4hNV(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
        public static Vertex4hNV glVertex4hNV = ((Vertex4hNV)(Gl.GetDelegateForExtensionMethod("glVertex4hNV", typeof(Vertex4hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4hvNV(System.IntPtr v);
        public static Vertex4hvNV glVertex4hvNV = ((Vertex4hvNV)(Gl.GetDelegateForExtensionMethod("glVertex4hvNV", typeof(Vertex4hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4i(GLint x, GLint y, GLint z, GLint w);
        public static Vertex4i glVertex4i = ((Vertex4i)(Gl.GetDelegateForExtensionMethod("glVertex4i", typeof(Vertex4i)))) ?? new Vertex4i(Imports.Vertex4i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4iv(System.IntPtr v);
        public static Vertex4iv glVertex4iv = ((Vertex4iv)(Gl.GetDelegateForExtensionMethod("glVertex4iv", typeof(Vertex4iv)))) ?? new Vertex4iv(Imports.Vertex4iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
        public static Vertex4s glVertex4s = ((Vertex4s)(Gl.GetDelegateForExtensionMethod("glVertex4s", typeof(Vertex4s)))) ?? new Vertex4s(Imports.Vertex4s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Vertex4sv(System.IntPtr v);
        public static Vertex4sv glVertex4sv = ((Vertex4sv)(Gl.GetDelegateForExtensionMethod("glVertex4sv", typeof(Vertex4sv)))) ?? new Vertex4sv(Imports.Vertex4sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexArrayParameteriAPPLE(GLenum pname, GLint param);
        public static VertexArrayParameteriAPPLE glVertexArrayParameteriAPPLE = ((VertexArrayParameteriAPPLE)(Gl.GetDelegateForExtensionMethod("glVertexArrayParameteriAPPLE", typeof(VertexArrayParameteriAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexArrayRangeAPPLE(GLsizei length, [In, Out()] System.IntPtr pointer);
        public static VertexArrayRangeAPPLE glVertexArrayRangeAPPLE = ((VertexArrayRangeAPPLE)(Gl.GetDelegateForExtensionMethod("glVertexArrayRangeAPPLE", typeof(VertexArrayRangeAPPLE))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexArrayRangeNV(GLsizei length, System.IntPtr pointer);
        public static VertexArrayRangeNV glVertexArrayRangeNV = ((VertexArrayRangeNV)(Gl.GetDelegateForExtensionMethod("glVertexArrayRangeNV", typeof(VertexArrayRangeNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1d(GLuint index, GLdouble x);
        public static VertexAttrib1d glVertexAttrib1d = ((VertexAttrib1d)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1d", typeof(VertexAttrib1d)))) ?? new VertexAttrib1d(Imports.VertexAttrib1d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1dARB(GLuint index, GLdouble x);
        public static VertexAttrib1dARB glVertexAttrib1dARB = ((VertexAttrib1dARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1dARB", typeof(VertexAttrib1dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1dNV(GLuint index, GLdouble x);
        public static VertexAttrib1dNV glVertexAttrib1dNV = ((VertexAttrib1dNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1dNV", typeof(VertexAttrib1dNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1dv(GLuint index, System.IntPtr v);
        public static VertexAttrib1dv glVertexAttrib1dv = ((VertexAttrib1dv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1dv", typeof(VertexAttrib1dv)))) ?? new VertexAttrib1dv(Imports.VertexAttrib1dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1dvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib1dvARB glVertexAttrib1dvARB = ((VertexAttrib1dvARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1dvARB", typeof(VertexAttrib1dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1dvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib1dvNV glVertexAttrib1dvNV = ((VertexAttrib1dvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1dvNV", typeof(VertexAttrib1dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1f(GLuint index, GLfloat x);
        public static VertexAttrib1f glVertexAttrib1f = ((VertexAttrib1f)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1f", typeof(VertexAttrib1f)))) ?? new VertexAttrib1f(Imports.VertexAttrib1f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1fARB(GLuint index, GLfloat x);
        public static VertexAttrib1fARB glVertexAttrib1fARB = ((VertexAttrib1fARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1fARB", typeof(VertexAttrib1fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1fNV(GLuint index, GLfloat x);
        public static VertexAttrib1fNV glVertexAttrib1fNV = ((VertexAttrib1fNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1fNV", typeof(VertexAttrib1fNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1fv(GLuint index, System.IntPtr v);
        public static VertexAttrib1fv glVertexAttrib1fv = ((VertexAttrib1fv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1fv", typeof(VertexAttrib1fv)))) ?? new VertexAttrib1fv(Imports.VertexAttrib1fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1fvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib1fvARB glVertexAttrib1fvARB = ((VertexAttrib1fvARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1fvARB", typeof(VertexAttrib1fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1fvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib1fvNV glVertexAttrib1fvNV = ((VertexAttrib1fvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1fvNV", typeof(VertexAttrib1fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1hNV(GLuint index, GLhalfNV x);
        public static VertexAttrib1hNV glVertexAttrib1hNV = ((VertexAttrib1hNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1hNV", typeof(VertexAttrib1hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1hvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib1hvNV glVertexAttrib1hvNV = ((VertexAttrib1hvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1hvNV", typeof(VertexAttrib1hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1s(GLuint index, GLshort x);
        public static VertexAttrib1s glVertexAttrib1s = ((VertexAttrib1s)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1s", typeof(VertexAttrib1s)))) ?? new VertexAttrib1s(Imports.VertexAttrib1s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1sARB(GLuint index, GLshort x);
        public static VertexAttrib1sARB glVertexAttrib1sARB = ((VertexAttrib1sARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1sARB", typeof(VertexAttrib1sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1sNV(GLuint index, GLshort x);
        public static VertexAttrib1sNV glVertexAttrib1sNV = ((VertexAttrib1sNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1sNV", typeof(VertexAttrib1sNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1sv(GLuint index, System.IntPtr v);
        public static VertexAttrib1sv glVertexAttrib1sv = ((VertexAttrib1sv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1sv", typeof(VertexAttrib1sv)))) ?? new VertexAttrib1sv(Imports.VertexAttrib1sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1svARB(GLuint index, System.IntPtr v);
        public static VertexAttrib1svARB glVertexAttrib1svARB = ((VertexAttrib1svARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1svARB", typeof(VertexAttrib1svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib1svNV(GLuint index, System.IntPtr v);
        public static VertexAttrib1svNV glVertexAttrib1svNV = ((VertexAttrib1svNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib1svNV", typeof(VertexAttrib1svNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
        public static VertexAttrib2d glVertexAttrib2d = ((VertexAttrib2d)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2d", typeof(VertexAttrib2d)))) ?? new VertexAttrib2d(Imports.VertexAttrib2d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y);
        public static VertexAttrib2dARB glVertexAttrib2dARB = ((VertexAttrib2dARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2dARB", typeof(VertexAttrib2dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2dNV(GLuint index, GLdouble x, GLdouble y);
        public static VertexAttrib2dNV glVertexAttrib2dNV = ((VertexAttrib2dNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2dNV", typeof(VertexAttrib2dNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2dv(GLuint index, System.IntPtr v);
        public static VertexAttrib2dv glVertexAttrib2dv = ((VertexAttrib2dv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2dv", typeof(VertexAttrib2dv)))) ?? new VertexAttrib2dv(Imports.VertexAttrib2dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2dvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib2dvARB glVertexAttrib2dvARB = ((VertexAttrib2dvARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2dvARB", typeof(VertexAttrib2dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2dvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib2dvNV glVertexAttrib2dvNV = ((VertexAttrib2dvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2dvNV", typeof(VertexAttrib2dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
        public static VertexAttrib2f glVertexAttrib2f = ((VertexAttrib2f)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2f", typeof(VertexAttrib2f)))) ?? new VertexAttrib2f(Imports.VertexAttrib2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y);
        public static VertexAttrib2fARB glVertexAttrib2fARB = ((VertexAttrib2fARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2fARB", typeof(VertexAttrib2fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2fNV(GLuint index, GLfloat x, GLfloat y);
        public static VertexAttrib2fNV glVertexAttrib2fNV = ((VertexAttrib2fNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2fNV", typeof(VertexAttrib2fNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2fv(GLuint index, System.IntPtr v);
        public static VertexAttrib2fv glVertexAttrib2fv = ((VertexAttrib2fv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2fv", typeof(VertexAttrib2fv)))) ?? new VertexAttrib2fv(Imports.VertexAttrib2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2fvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib2fvARB glVertexAttrib2fvARB = ((VertexAttrib2fvARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2fvARB", typeof(VertexAttrib2fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2fvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib2fvNV glVertexAttrib2fvNV = ((VertexAttrib2fvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2fvNV", typeof(VertexAttrib2fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2hNV(GLuint index, GLhalfNV x, GLhalfNV y);
        public static VertexAttrib2hNV glVertexAttrib2hNV = ((VertexAttrib2hNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2hNV", typeof(VertexAttrib2hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2hvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib2hvNV glVertexAttrib2hvNV = ((VertexAttrib2hvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2hvNV", typeof(VertexAttrib2hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2s(GLuint index, GLshort x, GLshort y);
        public static VertexAttrib2s glVertexAttrib2s = ((VertexAttrib2s)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2s", typeof(VertexAttrib2s)))) ?? new VertexAttrib2s(Imports.VertexAttrib2s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2sARB(GLuint index, GLshort x, GLshort y);
        public static VertexAttrib2sARB glVertexAttrib2sARB = ((VertexAttrib2sARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2sARB", typeof(VertexAttrib2sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2sNV(GLuint index, GLshort x, GLshort y);
        public static VertexAttrib2sNV glVertexAttrib2sNV = ((VertexAttrib2sNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2sNV", typeof(VertexAttrib2sNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2sv(GLuint index, System.IntPtr v);
        public static VertexAttrib2sv glVertexAttrib2sv = ((VertexAttrib2sv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2sv", typeof(VertexAttrib2sv)))) ?? new VertexAttrib2sv(Imports.VertexAttrib2sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2svARB(GLuint index, System.IntPtr v);
        public static VertexAttrib2svARB glVertexAttrib2svARB = ((VertexAttrib2svARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2svARB", typeof(VertexAttrib2svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib2svNV(GLuint index, System.IntPtr v);
        public static VertexAttrib2svNV glVertexAttrib2svNV = ((VertexAttrib2svNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib2svNV", typeof(VertexAttrib2svNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
        public static VertexAttrib3d glVertexAttrib3d = ((VertexAttrib3d)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3d", typeof(VertexAttrib3d)))) ?? new VertexAttrib3d(Imports.VertexAttrib3d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z);
        public static VertexAttrib3dARB glVertexAttrib3dARB = ((VertexAttrib3dARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3dARB", typeof(VertexAttrib3dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z);
        public static VertexAttrib3dNV glVertexAttrib3dNV = ((VertexAttrib3dNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3dNV", typeof(VertexAttrib3dNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3dv(GLuint index, System.IntPtr v);
        public static VertexAttrib3dv glVertexAttrib3dv = ((VertexAttrib3dv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3dv", typeof(VertexAttrib3dv)))) ?? new VertexAttrib3dv(Imports.VertexAttrib3dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3dvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib3dvARB glVertexAttrib3dvARB = ((VertexAttrib3dvARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3dvARB", typeof(VertexAttrib3dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3dvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib3dvNV glVertexAttrib3dvNV = ((VertexAttrib3dvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3dvNV", typeof(VertexAttrib3dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
        public static VertexAttrib3f glVertexAttrib3f = ((VertexAttrib3f)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3f", typeof(VertexAttrib3f)))) ?? new VertexAttrib3f(Imports.VertexAttrib3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z);
        public static VertexAttrib3fARB glVertexAttrib3fARB = ((VertexAttrib3fARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3fARB", typeof(VertexAttrib3fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z);
        public static VertexAttrib3fNV glVertexAttrib3fNV = ((VertexAttrib3fNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3fNV", typeof(VertexAttrib3fNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3fv(GLuint index, System.IntPtr v);
        public static VertexAttrib3fv glVertexAttrib3fv = ((VertexAttrib3fv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3fv", typeof(VertexAttrib3fv)))) ?? new VertexAttrib3fv(Imports.VertexAttrib3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3fvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib3fvARB glVertexAttrib3fvARB = ((VertexAttrib3fvARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3fvARB", typeof(VertexAttrib3fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3fvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib3fvNV glVertexAttrib3fvNV = ((VertexAttrib3fvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3fvNV", typeof(VertexAttrib3fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
        public static VertexAttrib3hNV glVertexAttrib3hNV = ((VertexAttrib3hNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3hNV", typeof(VertexAttrib3hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3hvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib3hvNV glVertexAttrib3hvNV = ((VertexAttrib3hvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3hvNV", typeof(VertexAttrib3hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
        public static VertexAttrib3s glVertexAttrib3s = ((VertexAttrib3s)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3s", typeof(VertexAttrib3s)))) ?? new VertexAttrib3s(Imports.VertexAttrib3s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z);
        public static VertexAttrib3sARB glVertexAttrib3sARB = ((VertexAttrib3sARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3sARB", typeof(VertexAttrib3sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3sNV(GLuint index, GLshort x, GLshort y, GLshort z);
        public static VertexAttrib3sNV glVertexAttrib3sNV = ((VertexAttrib3sNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3sNV", typeof(VertexAttrib3sNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3sv(GLuint index, System.IntPtr v);
        public static VertexAttrib3sv glVertexAttrib3sv = ((VertexAttrib3sv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3sv", typeof(VertexAttrib3sv)))) ?? new VertexAttrib3sv(Imports.VertexAttrib3sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3svARB(GLuint index, System.IntPtr v);
        public static VertexAttrib3svARB glVertexAttrib3svARB = ((VertexAttrib3svARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3svARB", typeof(VertexAttrib3svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib3svNV(GLuint index, System.IntPtr v);
        public static VertexAttrib3svNV glVertexAttrib3svNV = ((VertexAttrib3svNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib3svNV", typeof(VertexAttrib3svNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4bv(GLuint index, System.IntPtr v);
        public static VertexAttrib4bv glVertexAttrib4bv = ((VertexAttrib4bv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4bv", typeof(VertexAttrib4bv)))) ?? new VertexAttrib4bv(Imports.VertexAttrib4bv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4bvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4bvARB glVertexAttrib4bvARB = ((VertexAttrib4bvARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4bvARB", typeof(VertexAttrib4bvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static VertexAttrib4d glVertexAttrib4d = ((VertexAttrib4d)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4d", typeof(VertexAttrib4d)))) ?? new VertexAttrib4d(Imports.VertexAttrib4d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static VertexAttrib4dARB glVertexAttrib4dARB = ((VertexAttrib4dARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4dARB", typeof(VertexAttrib4dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4dNV(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static VertexAttrib4dNV glVertexAttrib4dNV = ((VertexAttrib4dNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4dNV", typeof(VertexAttrib4dNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4dv(GLuint index, System.IntPtr v);
        public static VertexAttrib4dv glVertexAttrib4dv = ((VertexAttrib4dv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4dv", typeof(VertexAttrib4dv)))) ?? new VertexAttrib4dv(Imports.VertexAttrib4dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4dvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4dvARB glVertexAttrib4dvARB = ((VertexAttrib4dvARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4dvARB", typeof(VertexAttrib4dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4dvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib4dvNV glVertexAttrib4dvNV = ((VertexAttrib4dvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4dvNV", typeof(VertexAttrib4dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static VertexAttrib4f glVertexAttrib4f = ((VertexAttrib4f)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4f", typeof(VertexAttrib4f)))) ?? new VertexAttrib4f(Imports.VertexAttrib4f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static VertexAttrib4fARB glVertexAttrib4fARB = ((VertexAttrib4fARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4fARB", typeof(VertexAttrib4fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4fNV(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static VertexAttrib4fNV glVertexAttrib4fNV = ((VertexAttrib4fNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4fNV", typeof(VertexAttrib4fNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4fv(GLuint index, System.IntPtr v);
        public static VertexAttrib4fv glVertexAttrib4fv = ((VertexAttrib4fv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4fv", typeof(VertexAttrib4fv)))) ?? new VertexAttrib4fv(Imports.VertexAttrib4fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4fvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4fvARB glVertexAttrib4fvARB = ((VertexAttrib4fvARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4fvARB", typeof(VertexAttrib4fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4fvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib4fvNV glVertexAttrib4fvNV = ((VertexAttrib4fvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4fvNV", typeof(VertexAttrib4fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4hNV(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
        public static VertexAttrib4hNV glVertexAttrib4hNV = ((VertexAttrib4hNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4hNV", typeof(VertexAttrib4hNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4hvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib4hvNV glVertexAttrib4hvNV = ((VertexAttrib4hvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4hvNV", typeof(VertexAttrib4hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4iv(GLuint index, System.IntPtr v);
        public static VertexAttrib4iv glVertexAttrib4iv = ((VertexAttrib4iv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4iv", typeof(VertexAttrib4iv)))) ?? new VertexAttrib4iv(Imports.VertexAttrib4iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4ivARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4ivARB glVertexAttrib4ivARB = ((VertexAttrib4ivARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4ivARB", typeof(VertexAttrib4ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4Nbv(GLuint index, System.IntPtr v);
        public static VertexAttrib4Nbv glVertexAttrib4Nbv = ((VertexAttrib4Nbv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4Nbv", typeof(VertexAttrib4Nbv)))) ?? new VertexAttrib4Nbv(Imports.VertexAttrib4Nbv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4NbvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4NbvARB glVertexAttrib4NbvARB = ((VertexAttrib4NbvARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4NbvARB", typeof(VertexAttrib4NbvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4Niv(GLuint index, System.IntPtr v);
        public static VertexAttrib4Niv glVertexAttrib4Niv = ((VertexAttrib4Niv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4Niv", typeof(VertexAttrib4Niv)))) ?? new VertexAttrib4Niv(Imports.VertexAttrib4Niv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4NivARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4NivARB glVertexAttrib4NivARB = ((VertexAttrib4NivARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4NivARB", typeof(VertexAttrib4NivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4Nsv(GLuint index, System.IntPtr v);
        public static VertexAttrib4Nsv glVertexAttrib4Nsv = ((VertexAttrib4Nsv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4Nsv", typeof(VertexAttrib4Nsv)))) ?? new VertexAttrib4Nsv(Imports.VertexAttrib4Nsv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4NsvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4NsvARB glVertexAttrib4NsvARB = ((VertexAttrib4NsvARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4NsvARB", typeof(VertexAttrib4NsvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
        public static VertexAttrib4Nub glVertexAttrib4Nub = ((VertexAttrib4Nub)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4Nub", typeof(VertexAttrib4Nub)))) ?? new VertexAttrib4Nub(Imports.VertexAttrib4Nub);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
        public static VertexAttrib4NubARB glVertexAttrib4NubARB = ((VertexAttrib4NubARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4NubARB", typeof(VertexAttrib4NubARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4Nubv(GLuint index, System.IntPtr v);
        public static VertexAttrib4Nubv glVertexAttrib4Nubv = ((VertexAttrib4Nubv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4Nubv", typeof(VertexAttrib4Nubv)))) ?? new VertexAttrib4Nubv(Imports.VertexAttrib4Nubv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4NubvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4NubvARB glVertexAttrib4NubvARB = ((VertexAttrib4NubvARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4NubvARB", typeof(VertexAttrib4NubvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4Nuiv(GLuint index, System.IntPtr v);
        public static VertexAttrib4Nuiv glVertexAttrib4Nuiv = ((VertexAttrib4Nuiv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4Nuiv", typeof(VertexAttrib4Nuiv)))) ?? new VertexAttrib4Nuiv(Imports.VertexAttrib4Nuiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4NuivARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4NuivARB glVertexAttrib4NuivARB = ((VertexAttrib4NuivARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4NuivARB", typeof(VertexAttrib4NuivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4Nusv(GLuint index, System.IntPtr v);
        public static VertexAttrib4Nusv glVertexAttrib4Nusv = ((VertexAttrib4Nusv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4Nusv", typeof(VertexAttrib4Nusv)))) ?? new VertexAttrib4Nusv(Imports.VertexAttrib4Nusv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4NusvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4NusvARB glVertexAttrib4NusvARB = ((VertexAttrib4NusvARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4NusvARB", typeof(VertexAttrib4NusvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
        public static VertexAttrib4s glVertexAttrib4s = ((VertexAttrib4s)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4s", typeof(VertexAttrib4s)))) ?? new VertexAttrib4s(Imports.VertexAttrib4s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
        public static VertexAttrib4sARB glVertexAttrib4sARB = ((VertexAttrib4sARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4sARB", typeof(VertexAttrib4sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4sNV(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
        public static VertexAttrib4sNV glVertexAttrib4sNV = ((VertexAttrib4sNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4sNV", typeof(VertexAttrib4sNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4sv(GLuint index, System.IntPtr v);
        public static VertexAttrib4sv glVertexAttrib4sv = ((VertexAttrib4sv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4sv", typeof(VertexAttrib4sv)))) ?? new VertexAttrib4sv(Imports.VertexAttrib4sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4svARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4svARB glVertexAttrib4svARB = ((VertexAttrib4svARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4svARB", typeof(VertexAttrib4svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4svNV(GLuint index, System.IntPtr v);
        public static VertexAttrib4svNV glVertexAttrib4svNV = ((VertexAttrib4svNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4svNV", typeof(VertexAttrib4svNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4ubNV(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
        public static VertexAttrib4ubNV glVertexAttrib4ubNV = ((VertexAttrib4ubNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4ubNV", typeof(VertexAttrib4ubNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4ubv(GLuint index, System.IntPtr v);
        public static VertexAttrib4ubv glVertexAttrib4ubv = ((VertexAttrib4ubv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4ubv", typeof(VertexAttrib4ubv)))) ?? new VertexAttrib4ubv(Imports.VertexAttrib4ubv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4ubvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4ubvARB glVertexAttrib4ubvARB = ((VertexAttrib4ubvARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4ubvARB", typeof(VertexAttrib4ubvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4ubvNV(GLuint index, System.IntPtr v);
        public static VertexAttrib4ubvNV glVertexAttrib4ubvNV = ((VertexAttrib4ubvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4ubvNV", typeof(VertexAttrib4ubvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4uiv(GLuint index, System.IntPtr v);
        public static VertexAttrib4uiv glVertexAttrib4uiv = ((VertexAttrib4uiv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4uiv", typeof(VertexAttrib4uiv)))) ?? new VertexAttrib4uiv(Imports.VertexAttrib4uiv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4uivARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4uivARB glVertexAttrib4uivARB = ((VertexAttrib4uivARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4uivARB", typeof(VertexAttrib4uivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4usv(GLuint index, System.IntPtr v);
        public static VertexAttrib4usv glVertexAttrib4usv = ((VertexAttrib4usv)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4usv", typeof(VertexAttrib4usv)))) ?? new VertexAttrib4usv(Imports.VertexAttrib4usv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttrib4usvARB(GLuint index, System.IntPtr v);
        public static VertexAttrib4usvARB glVertexAttrib4usvARB = ((VertexAttrib4usvARB)(Gl.GetDelegateForExtensionMethod("glVertexAttrib4usvARB", typeof(VertexAttrib4usvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribArrayObjectATI(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
        public static VertexAttribArrayObjectATI glVertexAttribArrayObjectATI = ((VertexAttribArrayObjectATI)(Gl.GetDelegateForExtensionMethod("glVertexAttribArrayObjectATI", typeof(VertexAttribArrayObjectATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI1iEXT(GLuint index, GLint x);
        public static VertexAttribI1iEXT glVertexAttribI1iEXT = ((VertexAttribI1iEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI1iEXT", typeof(VertexAttribI1iEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI1ivEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI1ivEXT glVertexAttribI1ivEXT = ((VertexAttribI1ivEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI1ivEXT", typeof(VertexAttribI1ivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI1uiEXT(GLuint index, GLuint x);
        public static VertexAttribI1uiEXT glVertexAttribI1uiEXT = ((VertexAttribI1uiEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI1uiEXT", typeof(VertexAttribI1uiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI1uivEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI1uivEXT glVertexAttribI1uivEXT = ((VertexAttribI1uivEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI1uivEXT", typeof(VertexAttribI1uivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI2iEXT(GLuint index, GLint x, GLint y);
        public static VertexAttribI2iEXT glVertexAttribI2iEXT = ((VertexAttribI2iEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI2iEXT", typeof(VertexAttribI2iEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI2ivEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI2ivEXT glVertexAttribI2ivEXT = ((VertexAttribI2ivEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI2ivEXT", typeof(VertexAttribI2ivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y);
        public static VertexAttribI2uiEXT glVertexAttribI2uiEXT = ((VertexAttribI2uiEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI2uiEXT", typeof(VertexAttribI2uiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI2uivEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI2uivEXT glVertexAttribI2uivEXT = ((VertexAttribI2uivEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI2uivEXT", typeof(VertexAttribI2uivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z);
        public static VertexAttribI3iEXT glVertexAttribI3iEXT = ((VertexAttribI3iEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI3iEXT", typeof(VertexAttribI3iEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI3ivEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI3ivEXT glVertexAttribI3ivEXT = ((VertexAttribI3ivEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI3ivEXT", typeof(VertexAttribI3ivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z);
        public static VertexAttribI3uiEXT glVertexAttribI3uiEXT = ((VertexAttribI3uiEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI3uiEXT", typeof(VertexAttribI3uiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI3uivEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI3uivEXT glVertexAttribI3uivEXT = ((VertexAttribI3uivEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI3uivEXT", typeof(VertexAttribI3uivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI4bvEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI4bvEXT glVertexAttribI4bvEXT = ((VertexAttribI4bvEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI4bvEXT", typeof(VertexAttribI4bvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w);
        public static VertexAttribI4iEXT glVertexAttribI4iEXT = ((VertexAttribI4iEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI4iEXT", typeof(VertexAttribI4iEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI4ivEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI4ivEXT glVertexAttribI4ivEXT = ((VertexAttribI4ivEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI4ivEXT", typeof(VertexAttribI4ivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI4svEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI4svEXT glVertexAttribI4svEXT = ((VertexAttribI4svEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI4svEXT", typeof(VertexAttribI4svEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI4ubvEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI4ubvEXT glVertexAttribI4ubvEXT = ((VertexAttribI4ubvEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI4ubvEXT", typeof(VertexAttribI4ubvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
        public static VertexAttribI4uiEXT glVertexAttribI4uiEXT = ((VertexAttribI4uiEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI4uiEXT", typeof(VertexAttribI4uiEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI4uivEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI4uivEXT glVertexAttribI4uivEXT = ((VertexAttribI4uivEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI4uivEXT", typeof(VertexAttribI4uivEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribI4usvEXT(GLuint index, System.IntPtr v);
        public static VertexAttribI4usvEXT glVertexAttribI4usvEXT = ((VertexAttribI4usvEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribI4usvEXT", typeof(VertexAttribI4usvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, System.IntPtr pointer);
        public static VertexAttribIPointerEXT glVertexAttribIPointerEXT = ((VertexAttribIPointerEXT)(Gl.GetDelegateForExtensionMethod("glVertexAttribIPointerEXT", typeof(VertexAttribIPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, System.IntPtr pointer);
        public static VertexAttribPointer glVertexAttribPointer = ((VertexAttribPointer)(Gl.GetDelegateForExtensionMethod("glVertexAttribPointer", typeof(VertexAttribPointer)))) ?? new VertexAttribPointer(Imports.VertexAttribPointer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, System.IntPtr pointer);
        public static VertexAttribPointerARB glVertexAttribPointerARB = ((VertexAttribPointerARB)(Gl.GetDelegateForExtensionMethod("glVertexAttribPointerARB", typeof(VertexAttribPointerARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribPointerNV(GLuint index, GLint fsize, GLenum type, GLsizei stride, System.IntPtr pointer);
        public static VertexAttribPointerNV glVertexAttribPointerNV = ((VertexAttribPointerNV)(Gl.GetDelegateForExtensionMethod("glVertexAttribPointerNV", typeof(VertexAttribPointerNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs1dvNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs1dvNV glVertexAttribs1dvNV = ((VertexAttribs1dvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttribs1dvNV", typeof(VertexAttribs1dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs1fvNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs1fvNV glVertexAttribs1fvNV = ((VertexAttribs1fvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttribs1fvNV", typeof(VertexAttribs1fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs1hvNV(GLuint index, GLsizei n, System.IntPtr v);
        public static VertexAttribs1hvNV glVertexAttribs1hvNV = ((VertexAttribs1hvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttribs1hvNV", typeof(VertexAttribs1hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs1svNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs1svNV glVertexAttribs1svNV = ((VertexAttribs1svNV)(Gl.GetDelegateForExtensionMethod("glVertexAttribs1svNV", typeof(VertexAttribs1svNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs2dvNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs2dvNV glVertexAttribs2dvNV = ((VertexAttribs2dvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttribs2dvNV", typeof(VertexAttribs2dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs2fvNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs2fvNV glVertexAttribs2fvNV = ((VertexAttribs2fvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttribs2fvNV", typeof(VertexAttribs2fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs2hvNV(GLuint index, GLsizei n, System.IntPtr v);
        public static VertexAttribs2hvNV glVertexAttribs2hvNV = ((VertexAttribs2hvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttribs2hvNV", typeof(VertexAttribs2hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs2svNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs2svNV glVertexAttribs2svNV = ((VertexAttribs2svNV)(Gl.GetDelegateForExtensionMethod("glVertexAttribs2svNV", typeof(VertexAttribs2svNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs3dvNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs3dvNV glVertexAttribs3dvNV = ((VertexAttribs3dvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttribs3dvNV", typeof(VertexAttribs3dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs3fvNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs3fvNV glVertexAttribs3fvNV = ((VertexAttribs3fvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttribs3fvNV", typeof(VertexAttribs3fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs3hvNV(GLuint index, GLsizei n, System.IntPtr v);
        public static VertexAttribs3hvNV glVertexAttribs3hvNV = ((VertexAttribs3hvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttribs3hvNV", typeof(VertexAttribs3hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs3svNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs3svNV glVertexAttribs3svNV = ((VertexAttribs3svNV)(Gl.GetDelegateForExtensionMethod("glVertexAttribs3svNV", typeof(VertexAttribs3svNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs4dvNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs4dvNV glVertexAttribs4dvNV = ((VertexAttribs4dvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttribs4dvNV", typeof(VertexAttribs4dvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs4fvNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs4fvNV glVertexAttribs4fvNV = ((VertexAttribs4fvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttribs4fvNV", typeof(VertexAttribs4fvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs4hvNV(GLuint index, GLsizei n, System.IntPtr v);
        public static VertexAttribs4hvNV glVertexAttribs4hvNV = ((VertexAttribs4hvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttribs4hvNV", typeof(VertexAttribs4hvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs4svNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs4svNV glVertexAttribs4svNV = ((VertexAttribs4svNV)(Gl.GetDelegateForExtensionMethod("glVertexAttribs4svNV", typeof(VertexAttribs4svNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexAttribs4ubvNV(GLuint index, GLsizei count, System.IntPtr v);
        public static VertexAttribs4ubvNV glVertexAttribs4ubvNV = ((VertexAttribs4ubvNV)(Gl.GetDelegateForExtensionMethod("glVertexAttribs4ubvNV", typeof(VertexAttribs4ubvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexBlendARB(GLint count);
        public static VertexBlendARB glVertexBlendARB = ((VertexBlendARB)(Gl.GetDelegateForExtensionMethod("glVertexBlendARB", typeof(VertexBlendARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexBlendEnvfATI(GLenum pname, GLfloat param);
        public static VertexBlendEnvfATI glVertexBlendEnvfATI = ((VertexBlendEnvfATI)(Gl.GetDelegateForExtensionMethod("glVertexBlendEnvfATI", typeof(VertexBlendEnvfATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexBlendEnviATI(GLenum pname, GLint param);
        public static VertexBlendEnviATI glVertexBlendEnviATI = ((VertexBlendEnviATI)(Gl.GetDelegateForExtensionMethod("glVertexBlendEnviATI", typeof(VertexBlendEnviATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexPointer(GLint size, GLenum type, GLsizei stride, System.IntPtr pointer);
        public static VertexPointer glVertexPointer = ((VertexPointer)(Gl.GetDelegateForExtensionMethod("glVertexPointer", typeof(VertexPointer)))) ?? new VertexPointer(Imports.VertexPointer);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexPointerEXT(GLint size, GLenum type, GLsizei stride, GLsizei count, System.IntPtr pointer);
        public static VertexPointerEXT glVertexPointerEXT = ((VertexPointerEXT)(Gl.GetDelegateForExtensionMethod("glVertexPointerEXT", typeof(VertexPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexPointerListIBM(GLint size, GLenum type, GLint stride, System.IntPtr pointer, GLint ptrstride);
        public static VertexPointerListIBM glVertexPointerListIBM = ((VertexPointerListIBM)(Gl.GetDelegateForExtensionMethod("glVertexPointerListIBM", typeof(VertexPointerListIBM))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexPointervINTEL(GLint size, GLenum type, System.IntPtr pointer);
        public static VertexPointervINTEL glVertexPointervINTEL = ((VertexPointervINTEL)(Gl.GetDelegateForExtensionMethod("glVertexPointervINTEL", typeof(VertexPointervINTEL))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream1dATI(GLenum stream, GLdouble x);
        public static VertexStream1dATI glVertexStream1dATI = ((VertexStream1dATI)(Gl.GetDelegateForExtensionMethod("glVertexStream1dATI", typeof(VertexStream1dATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream1dvATI(GLenum stream, System.IntPtr coords);
        public static VertexStream1dvATI glVertexStream1dvATI = ((VertexStream1dvATI)(Gl.GetDelegateForExtensionMethod("glVertexStream1dvATI", typeof(VertexStream1dvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream1fATI(GLenum stream, GLfloat x);
        public static VertexStream1fATI glVertexStream1fATI = ((VertexStream1fATI)(Gl.GetDelegateForExtensionMethod("glVertexStream1fATI", typeof(VertexStream1fATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream1fvATI(GLenum stream, System.IntPtr coords);
        public static VertexStream1fvATI glVertexStream1fvATI = ((VertexStream1fvATI)(Gl.GetDelegateForExtensionMethod("glVertexStream1fvATI", typeof(VertexStream1fvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream1iATI(GLenum stream, GLint x);
        public static VertexStream1iATI glVertexStream1iATI = ((VertexStream1iATI)(Gl.GetDelegateForExtensionMethod("glVertexStream1iATI", typeof(VertexStream1iATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream1ivATI(GLenum stream, System.IntPtr coords);
        public static VertexStream1ivATI glVertexStream1ivATI = ((VertexStream1ivATI)(Gl.GetDelegateForExtensionMethod("glVertexStream1ivATI", typeof(VertexStream1ivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream1sATI(GLenum stream, GLshort x);
        public static VertexStream1sATI glVertexStream1sATI = ((VertexStream1sATI)(Gl.GetDelegateForExtensionMethod("glVertexStream1sATI", typeof(VertexStream1sATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream1svATI(GLenum stream, System.IntPtr coords);
        public static VertexStream1svATI glVertexStream1svATI = ((VertexStream1svATI)(Gl.GetDelegateForExtensionMethod("glVertexStream1svATI", typeof(VertexStream1svATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream2dATI(GLenum stream, GLdouble x, GLdouble y);
        public static VertexStream2dATI glVertexStream2dATI = ((VertexStream2dATI)(Gl.GetDelegateForExtensionMethod("glVertexStream2dATI", typeof(VertexStream2dATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream2dvATI(GLenum stream, System.IntPtr coords);
        public static VertexStream2dvATI glVertexStream2dvATI = ((VertexStream2dvATI)(Gl.GetDelegateForExtensionMethod("glVertexStream2dvATI", typeof(VertexStream2dvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream2fATI(GLenum stream, GLfloat x, GLfloat y);
        public static VertexStream2fATI glVertexStream2fATI = ((VertexStream2fATI)(Gl.GetDelegateForExtensionMethod("glVertexStream2fATI", typeof(VertexStream2fATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream2fvATI(GLenum stream, System.IntPtr coords);
        public static VertexStream2fvATI glVertexStream2fvATI = ((VertexStream2fvATI)(Gl.GetDelegateForExtensionMethod("glVertexStream2fvATI", typeof(VertexStream2fvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream2iATI(GLenum stream, GLint x, GLint y);
        public static VertexStream2iATI glVertexStream2iATI = ((VertexStream2iATI)(Gl.GetDelegateForExtensionMethod("glVertexStream2iATI", typeof(VertexStream2iATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream2ivATI(GLenum stream, System.IntPtr coords);
        public static VertexStream2ivATI glVertexStream2ivATI = ((VertexStream2ivATI)(Gl.GetDelegateForExtensionMethod("glVertexStream2ivATI", typeof(VertexStream2ivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream2sATI(GLenum stream, GLshort x, GLshort y);
        public static VertexStream2sATI glVertexStream2sATI = ((VertexStream2sATI)(Gl.GetDelegateForExtensionMethod("glVertexStream2sATI", typeof(VertexStream2sATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream2svATI(GLenum stream, System.IntPtr coords);
        public static VertexStream2svATI glVertexStream2svATI = ((VertexStream2svATI)(Gl.GetDelegateForExtensionMethod("glVertexStream2svATI", typeof(VertexStream2svATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream3dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z);
        public static VertexStream3dATI glVertexStream3dATI = ((VertexStream3dATI)(Gl.GetDelegateForExtensionMethod("glVertexStream3dATI", typeof(VertexStream3dATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream3dvATI(GLenum stream, System.IntPtr coords);
        public static VertexStream3dvATI glVertexStream3dvATI = ((VertexStream3dvATI)(Gl.GetDelegateForExtensionMethod("glVertexStream3dvATI", typeof(VertexStream3dvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream3fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z);
        public static VertexStream3fATI glVertexStream3fATI = ((VertexStream3fATI)(Gl.GetDelegateForExtensionMethod("glVertexStream3fATI", typeof(VertexStream3fATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream3fvATI(GLenum stream, System.IntPtr coords);
        public static VertexStream3fvATI glVertexStream3fvATI = ((VertexStream3fvATI)(Gl.GetDelegateForExtensionMethod("glVertexStream3fvATI", typeof(VertexStream3fvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream3iATI(GLenum stream, GLint x, GLint y, GLint z);
        public static VertexStream3iATI glVertexStream3iATI = ((VertexStream3iATI)(Gl.GetDelegateForExtensionMethod("glVertexStream3iATI", typeof(VertexStream3iATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream3ivATI(GLenum stream, System.IntPtr coords);
        public static VertexStream3ivATI glVertexStream3ivATI = ((VertexStream3ivATI)(Gl.GetDelegateForExtensionMethod("glVertexStream3ivATI", typeof(VertexStream3ivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream3sATI(GLenum stream, GLshort x, GLshort y, GLshort z);
        public static VertexStream3sATI glVertexStream3sATI = ((VertexStream3sATI)(Gl.GetDelegateForExtensionMethod("glVertexStream3sATI", typeof(VertexStream3sATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream3svATI(GLenum stream, System.IntPtr coords);
        public static VertexStream3svATI glVertexStream3svATI = ((VertexStream3svATI)(Gl.GetDelegateForExtensionMethod("glVertexStream3svATI", typeof(VertexStream3svATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream4dATI(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static VertexStream4dATI glVertexStream4dATI = ((VertexStream4dATI)(Gl.GetDelegateForExtensionMethod("glVertexStream4dATI", typeof(VertexStream4dATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream4dvATI(GLenum stream, System.IntPtr coords);
        public static VertexStream4dvATI glVertexStream4dvATI = ((VertexStream4dvATI)(Gl.GetDelegateForExtensionMethod("glVertexStream4dvATI", typeof(VertexStream4dvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream4fATI(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static VertexStream4fATI glVertexStream4fATI = ((VertexStream4fATI)(Gl.GetDelegateForExtensionMethod("glVertexStream4fATI", typeof(VertexStream4fATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream4fvATI(GLenum stream, System.IntPtr coords);
        public static VertexStream4fvATI glVertexStream4fvATI = ((VertexStream4fvATI)(Gl.GetDelegateForExtensionMethod("glVertexStream4fvATI", typeof(VertexStream4fvATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream4iATI(GLenum stream, GLint x, GLint y, GLint z, GLint w);
        public static VertexStream4iATI glVertexStream4iATI = ((VertexStream4iATI)(Gl.GetDelegateForExtensionMethod("glVertexStream4iATI", typeof(VertexStream4iATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream4ivATI(GLenum stream, System.IntPtr coords);
        public static VertexStream4ivATI glVertexStream4ivATI = ((VertexStream4ivATI)(Gl.GetDelegateForExtensionMethod("glVertexStream4ivATI", typeof(VertexStream4ivATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream4sATI(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
        public static VertexStream4sATI glVertexStream4sATI = ((VertexStream4sATI)(Gl.GetDelegateForExtensionMethod("glVertexStream4sATI", typeof(VertexStream4sATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexStream4svATI(GLenum stream, System.IntPtr coords);
        public static VertexStream4svATI glVertexStream4svATI = ((VertexStream4svATI)(Gl.GetDelegateForExtensionMethod("glVertexStream4svATI", typeof(VertexStream4svATI))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexWeightfEXT(GLfloat weight);
        public static VertexWeightfEXT glVertexWeightfEXT = ((VertexWeightfEXT)(Gl.GetDelegateForExtensionMethod("glVertexWeightfEXT", typeof(VertexWeightfEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexWeightfvEXT(System.IntPtr weight);
        public static VertexWeightfvEXT glVertexWeightfvEXT = ((VertexWeightfvEXT)(Gl.GetDelegateForExtensionMethod("glVertexWeightfvEXT", typeof(VertexWeightfvEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexWeighthNV(GLhalfNV weight);
        public static VertexWeighthNV glVertexWeighthNV = ((VertexWeighthNV)(Gl.GetDelegateForExtensionMethod("glVertexWeighthNV", typeof(VertexWeighthNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexWeighthvNV(System.IntPtr weight);
        public static VertexWeighthvNV glVertexWeighthvNV = ((VertexWeighthvNV)(Gl.GetDelegateForExtensionMethod("glVertexWeighthvNV", typeof(VertexWeighthvNV))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void VertexWeightPointerEXT(GLsizei size, GLenum type, GLsizei stride, System.IntPtr pointer);
        public static VertexWeightPointerEXT glVertexWeightPointerEXT = ((VertexWeightPointerEXT)(Gl.GetDelegateForExtensionMethod("glVertexWeightPointerEXT", typeof(VertexWeightPointerEXT))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void Viewport(GLint x, GLint y, GLsizei width, GLsizei height);
        public static Viewport glViewport = ((Viewport)(Gl.GetDelegateForExtensionMethod("glViewport", typeof(Viewport)))) ?? new Viewport(Imports.Viewport);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WeightbvARB(GLint size, System.IntPtr weights);
        public static WeightbvARB glWeightbvARB = ((WeightbvARB)(Gl.GetDelegateForExtensionMethod("glWeightbvARB", typeof(WeightbvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WeightdvARB(GLint size, System.IntPtr weights);
        public static WeightdvARB glWeightdvARB = ((WeightdvARB)(Gl.GetDelegateForExtensionMethod("glWeightdvARB", typeof(WeightdvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WeightfvARB(GLint size, System.IntPtr weights);
        public static WeightfvARB glWeightfvARB = ((WeightfvARB)(Gl.GetDelegateForExtensionMethod("glWeightfvARB", typeof(WeightfvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WeightivARB(GLint size, System.IntPtr weights);
        public static WeightivARB glWeightivARB = ((WeightivARB)(Gl.GetDelegateForExtensionMethod("glWeightivARB", typeof(WeightivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WeightPointerARB(GLint size, GLenum type, GLsizei stride, System.IntPtr pointer);
        public static WeightPointerARB glWeightPointerARB = ((WeightPointerARB)(Gl.GetDelegateForExtensionMethod("glWeightPointerARB", typeof(WeightPointerARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WeightsvARB(GLint size, System.IntPtr weights);
        public static WeightsvARB glWeightsvARB = ((WeightsvARB)(Gl.GetDelegateForExtensionMethod("glWeightsvARB", typeof(WeightsvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WeightubvARB(GLint size, System.IntPtr weights);
        public static WeightubvARB glWeightubvARB = ((WeightubvARB)(Gl.GetDelegateForExtensionMethod("glWeightubvARB", typeof(WeightubvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WeightuivARB(GLint size, System.IntPtr weights);
        public static WeightuivARB glWeightuivARB = ((WeightuivARB)(Gl.GetDelegateForExtensionMethod("glWeightuivARB", typeof(WeightuivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WeightusvARB(GLint size, System.IntPtr weights);
        public static WeightusvARB glWeightusvARB = ((WeightusvARB)(Gl.GetDelegateForExtensionMethod("glWeightusvARB", typeof(WeightusvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2d(GLdouble x, GLdouble y);
        public static WindowPos2d glWindowPos2d = ((WindowPos2d)(Gl.GetDelegateForExtensionMethod("glWindowPos2d", typeof(WindowPos2d)))) ?? new WindowPos2d(Imports.WindowPos2d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2dARB(GLdouble x, GLdouble y);
        public static WindowPos2dARB glWindowPos2dARB = ((WindowPos2dARB)(Gl.GetDelegateForExtensionMethod("glWindowPos2dARB", typeof(WindowPos2dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2dMESA(GLdouble x, GLdouble y);
        public static WindowPos2dMESA glWindowPos2dMESA = ((WindowPos2dMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos2dMESA", typeof(WindowPos2dMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2dv(System.IntPtr v);
        public static WindowPos2dv glWindowPos2dv = ((WindowPos2dv)(Gl.GetDelegateForExtensionMethod("glWindowPos2dv", typeof(WindowPos2dv)))) ?? new WindowPos2dv(Imports.WindowPos2dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2dvARB(System.IntPtr v);
        public static WindowPos2dvARB glWindowPos2dvARB = ((WindowPos2dvARB)(Gl.GetDelegateForExtensionMethod("glWindowPos2dvARB", typeof(WindowPos2dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2dvMESA(System.IntPtr v);
        public static WindowPos2dvMESA glWindowPos2dvMESA = ((WindowPos2dvMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos2dvMESA", typeof(WindowPos2dvMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2f(GLfloat x, GLfloat y);
        public static WindowPos2f glWindowPos2f = ((WindowPos2f)(Gl.GetDelegateForExtensionMethod("glWindowPos2f", typeof(WindowPos2f)))) ?? new WindowPos2f(Imports.WindowPos2f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2fARB(GLfloat x, GLfloat y);
        public static WindowPos2fARB glWindowPos2fARB = ((WindowPos2fARB)(Gl.GetDelegateForExtensionMethod("glWindowPos2fARB", typeof(WindowPos2fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2fMESA(GLfloat x, GLfloat y);
        public static WindowPos2fMESA glWindowPos2fMESA = ((WindowPos2fMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos2fMESA", typeof(WindowPos2fMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2fv(System.IntPtr v);
        public static WindowPos2fv glWindowPos2fv = ((WindowPos2fv)(Gl.GetDelegateForExtensionMethod("glWindowPos2fv", typeof(WindowPos2fv)))) ?? new WindowPos2fv(Imports.WindowPos2fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2fvARB(System.IntPtr v);
        public static WindowPos2fvARB glWindowPos2fvARB = ((WindowPos2fvARB)(Gl.GetDelegateForExtensionMethod("glWindowPos2fvARB", typeof(WindowPos2fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2fvMESA(System.IntPtr v);
        public static WindowPos2fvMESA glWindowPos2fvMESA = ((WindowPos2fvMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos2fvMESA", typeof(WindowPos2fvMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2i(GLint x, GLint y);
        public static WindowPos2i glWindowPos2i = ((WindowPos2i)(Gl.GetDelegateForExtensionMethod("glWindowPos2i", typeof(WindowPos2i)))) ?? new WindowPos2i(Imports.WindowPos2i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2iARB(GLint x, GLint y);
        public static WindowPos2iARB glWindowPos2iARB = ((WindowPos2iARB)(Gl.GetDelegateForExtensionMethod("glWindowPos2iARB", typeof(WindowPos2iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2iMESA(GLint x, GLint y);
        public static WindowPos2iMESA glWindowPos2iMESA = ((WindowPos2iMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos2iMESA", typeof(WindowPos2iMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2iv(System.IntPtr v);
        public static WindowPos2iv glWindowPos2iv = ((WindowPos2iv)(Gl.GetDelegateForExtensionMethod("glWindowPos2iv", typeof(WindowPos2iv)))) ?? new WindowPos2iv(Imports.WindowPos2iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2ivARB(System.IntPtr v);
        public static WindowPos2ivARB glWindowPos2ivARB = ((WindowPos2ivARB)(Gl.GetDelegateForExtensionMethod("glWindowPos2ivARB", typeof(WindowPos2ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2ivMESA(System.IntPtr v);
        public static WindowPos2ivMESA glWindowPos2ivMESA = ((WindowPos2ivMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos2ivMESA", typeof(WindowPos2ivMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2s(GLshort x, GLshort y);
        public static WindowPos2s glWindowPos2s = ((WindowPos2s)(Gl.GetDelegateForExtensionMethod("glWindowPos2s", typeof(WindowPos2s)))) ?? new WindowPos2s(Imports.WindowPos2s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2sARB(GLshort x, GLshort y);
        public static WindowPos2sARB glWindowPos2sARB = ((WindowPos2sARB)(Gl.GetDelegateForExtensionMethod("glWindowPos2sARB", typeof(WindowPos2sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2sMESA(GLshort x, GLshort y);
        public static WindowPos2sMESA glWindowPos2sMESA = ((WindowPos2sMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos2sMESA", typeof(WindowPos2sMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2sv(System.IntPtr v);
        public static WindowPos2sv glWindowPos2sv = ((WindowPos2sv)(Gl.GetDelegateForExtensionMethod("glWindowPos2sv", typeof(WindowPos2sv)))) ?? new WindowPos2sv(Imports.WindowPos2sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2svARB(System.IntPtr v);
        public static WindowPos2svARB glWindowPos2svARB = ((WindowPos2svARB)(Gl.GetDelegateForExtensionMethod("glWindowPos2svARB", typeof(WindowPos2svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos2svMESA(System.IntPtr v);
        public static WindowPos2svMESA glWindowPos2svMESA = ((WindowPos2svMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos2svMESA", typeof(WindowPos2svMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3d(GLdouble x, GLdouble y, GLdouble z);
        public static WindowPos3d glWindowPos3d = ((WindowPos3d)(Gl.GetDelegateForExtensionMethod("glWindowPos3d", typeof(WindowPos3d)))) ?? new WindowPos3d(Imports.WindowPos3d);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3dARB(GLdouble x, GLdouble y, GLdouble z);
        public static WindowPos3dARB glWindowPos3dARB = ((WindowPos3dARB)(Gl.GetDelegateForExtensionMethod("glWindowPos3dARB", typeof(WindowPos3dARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3dMESA(GLdouble x, GLdouble y, GLdouble z);
        public static WindowPos3dMESA glWindowPos3dMESA = ((WindowPos3dMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos3dMESA", typeof(WindowPos3dMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3dv(System.IntPtr v);
        public static WindowPos3dv glWindowPos3dv = ((WindowPos3dv)(Gl.GetDelegateForExtensionMethod("glWindowPos3dv", typeof(WindowPos3dv)))) ?? new WindowPos3dv(Imports.WindowPos3dv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3dvARB(System.IntPtr v);
        public static WindowPos3dvARB glWindowPos3dvARB = ((WindowPos3dvARB)(Gl.GetDelegateForExtensionMethod("glWindowPos3dvARB", typeof(WindowPos3dvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3dvMESA(System.IntPtr v);
        public static WindowPos3dvMESA glWindowPos3dvMESA = ((WindowPos3dvMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos3dvMESA", typeof(WindowPos3dvMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3f(GLfloat x, GLfloat y, GLfloat z);
        public static WindowPos3f glWindowPos3f = ((WindowPos3f)(Gl.GetDelegateForExtensionMethod("glWindowPos3f", typeof(WindowPos3f)))) ?? new WindowPos3f(Imports.WindowPos3f);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3fARB(GLfloat x, GLfloat y, GLfloat z);
        public static WindowPos3fARB glWindowPos3fARB = ((WindowPos3fARB)(Gl.GetDelegateForExtensionMethod("glWindowPos3fARB", typeof(WindowPos3fARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3fMESA(GLfloat x, GLfloat y, GLfloat z);
        public static WindowPos3fMESA glWindowPos3fMESA = ((WindowPos3fMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos3fMESA", typeof(WindowPos3fMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3fv(System.IntPtr v);
        public static WindowPos3fv glWindowPos3fv = ((WindowPos3fv)(Gl.GetDelegateForExtensionMethod("glWindowPos3fv", typeof(WindowPos3fv)))) ?? new WindowPos3fv(Imports.WindowPos3fv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3fvARB(System.IntPtr v);
        public static WindowPos3fvARB glWindowPos3fvARB = ((WindowPos3fvARB)(Gl.GetDelegateForExtensionMethod("glWindowPos3fvARB", typeof(WindowPos3fvARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3fvMESA(System.IntPtr v);
        public static WindowPos3fvMESA glWindowPos3fvMESA = ((WindowPos3fvMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos3fvMESA", typeof(WindowPos3fvMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3i(GLint x, GLint y, GLint z);
        public static WindowPos3i glWindowPos3i = ((WindowPos3i)(Gl.GetDelegateForExtensionMethod("glWindowPos3i", typeof(WindowPos3i)))) ?? new WindowPos3i(Imports.WindowPos3i);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3iARB(GLint x, GLint y, GLint z);
        public static WindowPos3iARB glWindowPos3iARB = ((WindowPos3iARB)(Gl.GetDelegateForExtensionMethod("glWindowPos3iARB", typeof(WindowPos3iARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3iMESA(GLint x, GLint y, GLint z);
        public static WindowPos3iMESA glWindowPos3iMESA = ((WindowPos3iMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos3iMESA", typeof(WindowPos3iMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3iv(System.IntPtr v);
        public static WindowPos3iv glWindowPos3iv = ((WindowPos3iv)(Gl.GetDelegateForExtensionMethod("glWindowPos3iv", typeof(WindowPos3iv)))) ?? new WindowPos3iv(Imports.WindowPos3iv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3ivARB(System.IntPtr v);
        public static WindowPos3ivARB glWindowPos3ivARB = ((WindowPos3ivARB)(Gl.GetDelegateForExtensionMethod("glWindowPos3ivARB", typeof(WindowPos3ivARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3ivMESA(System.IntPtr v);
        public static WindowPos3ivMESA glWindowPos3ivMESA = ((WindowPos3ivMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos3ivMESA", typeof(WindowPos3ivMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3s(GLshort x, GLshort y, GLshort z);
        public static WindowPos3s glWindowPos3s = ((WindowPos3s)(Gl.GetDelegateForExtensionMethod("glWindowPos3s", typeof(WindowPos3s)))) ?? new WindowPos3s(Imports.WindowPos3s);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3sARB(GLshort x, GLshort y, GLshort z);
        public static WindowPos3sARB glWindowPos3sARB = ((WindowPos3sARB)(Gl.GetDelegateForExtensionMethod("glWindowPos3sARB", typeof(WindowPos3sARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3sMESA(GLshort x, GLshort y, GLshort z);
        public static WindowPos3sMESA glWindowPos3sMESA = ((WindowPos3sMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos3sMESA", typeof(WindowPos3sMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3sv(System.IntPtr v);
        public static WindowPos3sv glWindowPos3sv = ((WindowPos3sv)(Gl.GetDelegateForExtensionMethod("glWindowPos3sv", typeof(WindowPos3sv)))) ?? new WindowPos3sv(Imports.WindowPos3sv);
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3svARB(System.IntPtr v);
        public static WindowPos3svARB glWindowPos3svARB = ((WindowPos3svARB)(Gl.GetDelegateForExtensionMethod("glWindowPos3svARB", typeof(WindowPos3svARB))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos3svMESA(System.IntPtr v);
        public static WindowPos3svMESA glWindowPos3svMESA = ((WindowPos3svMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos3svMESA", typeof(WindowPos3svMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos4dMESA(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        public static WindowPos4dMESA glWindowPos4dMESA = ((WindowPos4dMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos4dMESA", typeof(WindowPos4dMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos4dvMESA(System.IntPtr v);
        public static WindowPos4dvMESA glWindowPos4dvMESA = ((WindowPos4dvMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos4dvMESA", typeof(WindowPos4dvMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos4fMESA(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        public static WindowPos4fMESA glWindowPos4fMESA = ((WindowPos4fMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos4fMESA", typeof(WindowPos4fMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos4fvMESA(System.IntPtr v);
        public static WindowPos4fvMESA glWindowPos4fvMESA = ((WindowPos4fvMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos4fvMESA", typeof(WindowPos4fvMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos4iMESA(GLint x, GLint y, GLint z, GLint w);
        public static WindowPos4iMESA glWindowPos4iMESA = ((WindowPos4iMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos4iMESA", typeof(WindowPos4iMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos4ivMESA(System.IntPtr v);
        public static WindowPos4ivMESA glWindowPos4ivMESA = ((WindowPos4ivMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos4ivMESA", typeof(WindowPos4ivMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos4sMESA(GLshort x, GLshort y, GLshort z, GLshort w);
        public static WindowPos4sMESA glWindowPos4sMESA = ((WindowPos4sMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos4sMESA", typeof(WindowPos4sMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WindowPos4svMESA(System.IntPtr v);
        public static WindowPos4svMESA glWindowPos4svMESA = ((WindowPos4svMESA)(Gl.GetDelegateForExtensionMethod("glWindowPos4svMESA", typeof(WindowPos4svMESA))));
        [System.Security.SuppressUnmanagedCodeSecurity()]
        public delegate void WriteMaskEXT(GLuint res, GLuint @in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
        public static WriteMaskEXT glWriteMaskEXT = ((WriteMaskEXT)(Gl.GetDelegateForExtensionMethod("glWriteMaskEXT", typeof(WriteMaskEXT))));
        static Delegates()
        {
        }
    }
    #endregion
    #region Imports
    internal class Imports
    {
        static Imports()
        {
        }
        #region Accum
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glAccum", ExactSpelling = true)]
        public extern static void Accum(GLenum op, GLfloat value);
        #endregion

        #region ActiveTexture
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glActiveTexture", ExactSpelling = true)]
        public extern static void ActiveTexture(GLenum texture);
        #endregion

        #region AlphaFunc
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glAlphaFunc", ExactSpelling = true)]
        public extern static void AlphaFunc(GLenum func, GLclampf @ref);
        #endregion

        #region AreTexturesResident
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glAreTexturesResident", ExactSpelling = true)]
        public extern static GLboolean AreTexturesResident(GLsizei n, System.IntPtr textures, System.IntPtr residences);
        #endregion

        #region ArrayElement
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glArrayElement", ExactSpelling = true)]
        public extern static void ArrayElement(GLint i);
        #endregion

        #region AttachShader
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glAttachShader", ExactSpelling = true)]
        public extern static void AttachShader(GLuint program, GLuint shader);
        #endregion

        #region Begin
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glBegin", ExactSpelling = true)]
        public extern static void Begin(GLenum mode);
        #endregion

        #region BeginQuery
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glBeginQuery", ExactSpelling = true)]
        public extern static void BeginQuery(GLenum target, GLuint id);
        #endregion

        #region BindAttribLocation
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glBindAttribLocation", ExactSpelling = true)]
        public extern static void BindAttribLocation(GLuint program, GLuint index, System.String name);
        #endregion

        #region BindBuffer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glBindBuffer", ExactSpelling = true)]
        public extern static void BindBuffer(GLenum target, GLuint buffer);
        #endregion

        #region BindTexture
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glBindTexture", ExactSpelling = true)]
        public extern static void BindTexture(GLenum target, GLuint texture);
        #endregion

        #region Bitmap
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glBitmap", ExactSpelling = true)]
        public extern static void Bitmap(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, System.IntPtr bitmap);
        #endregion

        #region BlendColor
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glBlendColor", ExactSpelling = true)]
        public extern static void BlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
        #endregion

        #region BlendEquation
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glBlendEquation", ExactSpelling = true)]
        public extern static void BlendEquation(GLenum mode);
        #endregion

        #region BlendEquationSeparate
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glBlendEquationSeparate", ExactSpelling = true)]
        public extern static void BlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
        #endregion

        #region BlendFunc
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glBlendFunc", ExactSpelling = true)]
        public extern static void BlendFunc(GLenum sfactor, GLenum dfactor);
        #endregion

        #region BlendFuncSeparate
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glBlendFuncSeparate", ExactSpelling = true)]
        public extern static void BlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
        #endregion

        #region BufferData
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glBufferData", ExactSpelling = true)]
        public extern static void BufferData(GLenum target, GLsizeiptr size, System.IntPtr data, GLenum usage);
        #endregion

        #region BufferSubData
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glBufferSubData", ExactSpelling = true)]
        public extern static void BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, System.IntPtr data);
        #endregion

        #region CallList
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCallList", ExactSpelling = true)]
        public extern static void CallList(GLuint list);
        #endregion

        #region CallLists
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCallLists", ExactSpelling = true)]
        public extern static void CallLists(GLsizei n, GLenum type, System.IntPtr lists);
        #endregion

        #region Clear
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glClear", ExactSpelling = true)]
        public extern static void Clear(GLbitfield mask);
        #endregion

        #region ClearAccum
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glClearAccum", ExactSpelling = true)]
        public extern static void ClearAccum(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
        #endregion

        #region ClearColor
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glClearColor", ExactSpelling = true)]
        public extern static void ClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
        #endregion

        #region ClearDepth
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glClearDepth", ExactSpelling = true)]
        public extern static void ClearDepth(GLclampd depth);
        #endregion

        #region ClearIndex
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glClearIndex", ExactSpelling = true)]
        public extern static void ClearIndex(GLfloat c);
        #endregion

        #region ClearStencil
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glClearStencil", ExactSpelling = true)]
        public extern static void ClearStencil(GLint s);
        #endregion

        #region ClientActiveTexture
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glClientActiveTexture", ExactSpelling = true)]
        public extern static void ClientActiveTexture(GLenum texture);
        #endregion

        #region ClipPlane
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glClipPlane", ExactSpelling = true)]
        public extern static void ClipPlane(GLenum plane, System.IntPtr equation);
        #endregion

        #region Color3b
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor3b", ExactSpelling = true)]
        public extern static void Color3b(GLbyte red, GLbyte green, GLbyte blue);
        #endregion

        #region Color3bv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor3bv", ExactSpelling = true)]
        public extern static void Color3bv(System.IntPtr v);
        #endregion

        #region Color3d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor3d", ExactSpelling = true)]
        public extern static void Color3d(GLdouble red, GLdouble green, GLdouble blue);
        #endregion

        #region Color3dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor3dv", ExactSpelling = true)]
        public extern static void Color3dv(System.IntPtr v);
        #endregion

        #region Color3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor3f", ExactSpelling = true)]
        public extern static void Color3f(GLfloat red, GLfloat green, GLfloat blue);
        #endregion

        #region Color3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor3fv", ExactSpelling = true)]
        public extern static void Color3fv(System.IntPtr v);
        #endregion

        #region Color3i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor3i", ExactSpelling = true)]
        public extern static void Color3i(GLint red, GLint green, GLint blue);
        #endregion

        #region Color3iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor3iv", ExactSpelling = true)]
        public extern static void Color3iv(System.IntPtr v);
        #endregion

        #region Color3s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor3s", ExactSpelling = true)]
        public extern static void Color3s(GLshort red, GLshort green, GLshort blue);
        #endregion

        #region Color3sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor3sv", ExactSpelling = true)]
        public extern static void Color3sv(System.IntPtr v);
        #endregion

        #region Color3ub
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor3ub", ExactSpelling = true)]
        public extern static void Color3ub(GLubyte red, GLubyte green, GLubyte blue);
        #endregion

        #region Color3ubv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor3ubv", ExactSpelling = true)]
        public extern static void Color3ubv(System.IntPtr v);
        #endregion

        #region Color3ui
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor3ui", ExactSpelling = true)]
        public extern static void Color3ui(GLuint red, GLuint green, GLuint blue);
        #endregion

        #region Color3uiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor3uiv", ExactSpelling = true)]
        public extern static void Color3uiv(System.IntPtr v);
        #endregion

        #region Color3us
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor3us", ExactSpelling = true)]
        public extern static void Color3us(GLushort red, GLushort green, GLushort blue);
        #endregion

        #region Color3usv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor3usv", ExactSpelling = true)]
        public extern static void Color3usv(System.IntPtr v);
        #endregion

        #region Color4b
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor4b", ExactSpelling = true)]
        public extern static void Color4b(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
        #endregion

        #region Color4bv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor4bv", ExactSpelling = true)]
        public extern static void Color4bv(System.IntPtr v);
        #endregion

        #region Color4d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor4d", ExactSpelling = true)]
        public extern static void Color4d(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
        #endregion

        #region Color4dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor4dv", ExactSpelling = true)]
        public extern static void Color4dv(System.IntPtr v);
        #endregion

        #region Color4f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor4f", ExactSpelling = true)]
        public extern static void Color4f(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
        #endregion

        #region Color4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor4fv", ExactSpelling = true)]
        public extern static void Color4fv(System.IntPtr v);
        #endregion

        #region Color4i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor4i", ExactSpelling = true)]
        public extern static void Color4i(GLint red, GLint green, GLint blue, GLint alpha);
        #endregion

        #region Color4iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor4iv", ExactSpelling = true)]
        public extern static void Color4iv(System.IntPtr v);
        #endregion

        #region Color4s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor4s", ExactSpelling = true)]
        public extern static void Color4s(GLshort red, GLshort green, GLshort blue, GLshort alpha);
        #endregion

        #region Color4sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor4sv", ExactSpelling = true)]
        public extern static void Color4sv(System.IntPtr v);
        #endregion

        #region Color4ub
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor4ub", ExactSpelling = true)]
        public extern static void Color4ub(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
        #endregion

        #region Color4ubv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor4ubv", ExactSpelling = true)]
        public extern static void Color4ubv(System.IntPtr v);
        #endregion

        #region Color4ui
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor4ui", ExactSpelling = true)]
        public extern static void Color4ui(GLuint red, GLuint green, GLuint blue, GLuint alpha);
        #endregion

        #region Color4uiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor4uiv", ExactSpelling = true)]
        public extern static void Color4uiv(System.IntPtr v);
        #endregion

        #region Color4us
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor4us", ExactSpelling = true)]
        public extern static void Color4us(GLushort red, GLushort green, GLushort blue, GLushort alpha);
        #endregion

        #region Color4usv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColor4usv", ExactSpelling = true)]
        public extern static void Color4usv(System.IntPtr v);
        #endregion

        #region ColorMask
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColorMask", ExactSpelling = true)]
        public extern static void ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
        #endregion

        #region ColorMaterial
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColorMaterial", ExactSpelling = true)]
        public extern static void ColorMaterial(GLenum face, GLenum mode);
        #endregion

        #region ColorPointer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColorPointer", ExactSpelling = true)]
        public extern static void ColorPointer(GLint size, GLenum type, GLsizei stride, System.IntPtr pointer);
        #endregion

        #region ColorSubTable
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColorSubTable", ExactSpelling = true)]
        public extern static void ColorSubTable(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, System.IntPtr data);
        #endregion

        #region ColorTable
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColorTable", ExactSpelling = true)]
        public extern static void ColorTable(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, System.IntPtr table);
        #endregion

        #region ColorTableParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColorTableParameterfv", ExactSpelling = true)]
        public extern static void ColorTableParameterfv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region ColorTableParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glColorTableParameteriv", ExactSpelling = true)]
        public extern static void ColorTableParameteriv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region CompileShader
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCompileShader", ExactSpelling = true)]
        public extern static void CompileShader(GLuint shader);
        #endregion

        #region CompressedTexImage1D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexImage1D", ExactSpelling = true)]
        public extern static void CompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, System.IntPtr data);
        #endregion

        #region CompressedTexImage2D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexImage2D", ExactSpelling = true)]
        public extern static void CompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, System.IntPtr data);
        #endregion

        #region CompressedTexImage3D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexImage3D", ExactSpelling = true)]
        public extern static void CompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, System.IntPtr data);
        #endregion

        #region CompressedTexSubImage1D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexSubImage1D", ExactSpelling = true)]
        public extern static void CompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, System.IntPtr data);
        #endregion

        #region CompressedTexSubImage2D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexSubImage2D", ExactSpelling = true)]
        public extern static void CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, System.IntPtr data);
        #endregion

        #region CompressedTexSubImage3D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCompressedTexSubImage3D", ExactSpelling = true)]
        public extern static void CompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, System.IntPtr data);
        #endregion

        #region ConvolutionFilter1D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionFilter1D", ExactSpelling = true)]
        public extern static void ConvolutionFilter1D(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, System.IntPtr image);
        #endregion

        #region ConvolutionFilter2D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionFilter2D", ExactSpelling = true)]
        public extern static void ConvolutionFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr image);
        #endregion

        #region ConvolutionParameterf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionParameterf", ExactSpelling = true)]
        public extern static void ConvolutionParameterf(GLenum target, GLenum pname, GLfloat @params);
        #endregion

        #region ConvolutionParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionParameterfv", ExactSpelling = true)]
        public extern static void ConvolutionParameterfv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region ConvolutionParameteri
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionParameteri", ExactSpelling = true)]
        public extern static void ConvolutionParameteri(GLenum target, GLenum pname, GLint @params);
        #endregion

        #region ConvolutionParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glConvolutionParameteriv", ExactSpelling = true)]
        public extern static void ConvolutionParameteriv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region CopyColorSubTable
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCopyColorSubTable", ExactSpelling = true)]
        public extern static void CopyColorSubTable(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
        #endregion

        #region CopyColorTable
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCopyColorTable", ExactSpelling = true)]
        public extern static void CopyColorTable(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
        #endregion

        #region CopyConvolutionFilter1D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCopyConvolutionFilter1D", ExactSpelling = true)]
        public extern static void CopyConvolutionFilter1D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
        #endregion

        #region CopyConvolutionFilter2D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCopyConvolutionFilter2D", ExactSpelling = true)]
        public extern static void CopyConvolutionFilter2D(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
        #endregion

        #region CopyPixels
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCopyPixels", ExactSpelling = true)]
        public extern static void CopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
        #endregion

        #region CopyTexImage1D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexImage1D", ExactSpelling = true)]
        public extern static void CopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
        #endregion

        #region CopyTexImage2D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexImage2D", ExactSpelling = true)]
        public extern static void CopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
        #endregion

        #region CopyTexSubImage1D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexSubImage1D", ExactSpelling = true)]
        public extern static void CopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
        #endregion

        #region CopyTexSubImage2D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexSubImage2D", ExactSpelling = true)]
        public extern static void CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        #endregion

        #region CopyTexSubImage3D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCopyTexSubImage3D", ExactSpelling = true)]
        public extern static void CopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
        #endregion

        #region CreateProgram
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCreateProgram", ExactSpelling = true)]
        public extern static GLuint CreateProgram();
        #endregion

        #region CreateShader
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCreateShader", ExactSpelling = true)]
        public extern static GLuint CreateShader(GLenum type);
        #endregion

        #region CullFace
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glCullFace", ExactSpelling = true)]
        public extern static void CullFace(GLenum mode);
        #endregion

        #region DeleteBuffers
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glDeleteBuffers", ExactSpelling = true)]
        public extern static void DeleteBuffers(GLsizei n, System.IntPtr buffers);
        #endregion

        #region DeleteLists
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glDeleteLists", ExactSpelling = true)]
        public extern static void DeleteLists(GLuint list, GLsizei range);
        #endregion

        #region DeleteProgram
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glDeleteProgram", ExactSpelling = true)]
        public extern static void DeleteProgram(GLuint program);
        #endregion

        #region DeleteQueries
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glDeleteQueries", ExactSpelling = true)]
        public extern static void DeleteQueries(GLsizei n, System.IntPtr ids);
        #endregion

        #region DeleteShader
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glDeleteShader", ExactSpelling = true)]
        public extern static void DeleteShader(GLuint shader);
        #endregion

        #region DeleteTextures
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glDeleteTextures", ExactSpelling = true)]
        public extern static void DeleteTextures(GLsizei n, System.IntPtr textures);
        #endregion

        #region DepthFunc
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glDepthFunc", ExactSpelling = true)]
        public extern static void DepthFunc(GLenum func);
        #endregion

        #region DepthMask
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glDepthMask", ExactSpelling = true)]
        public extern static void DepthMask(GLboolean flag);
        #endregion

        #region DepthRange
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glDepthRange", ExactSpelling = true)]
        public extern static void DepthRange(GLclampd near, GLclampd far);
        #endregion

        #region DetachShader
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glDetachShader", ExactSpelling = true)]
        public extern static void DetachShader(GLuint program, GLuint shader);
        #endregion

        #region Disable
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glDisable", ExactSpelling = true)]
        public extern static void Disable(GLenum cap);
        #endregion

        #region DisableClientState
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glDisableClientState", ExactSpelling = true)]
        public extern static void DisableClientState(GLenum array);
        #endregion

        #region DisableVertexAttribArray
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glDisableVertexAttribArray", ExactSpelling = true)]
        public extern static void DisableVertexAttribArray(GLuint index);
        #endregion

        #region DrawArrays
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glDrawArrays", ExactSpelling = true)]
        public extern static void DrawArrays(GLenum mode, GLint first, GLsizei count);
        #endregion

        #region DrawBuffer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glDrawBuffer", ExactSpelling = true)]
        public extern static void DrawBuffer(GLenum mode);
        #endregion

        #region DrawBuffers
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glDrawBuffers", ExactSpelling = true)]
        public extern static void DrawBuffers(GLsizei n, System.IntPtr bufs);
        #endregion

        #region DrawElements
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glDrawElements", ExactSpelling = true)]
        public extern static void DrawElements(GLenum mode, GLsizei count, GLenum type, System.IntPtr indices);
        #endregion

        #region DrawPixels
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glDrawPixels", ExactSpelling = true)]
        public extern static void DrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr pixels);
        #endregion

        #region DrawRangeElements
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glDrawRangeElements", ExactSpelling = true)]
        public extern static void DrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, System.IntPtr indices);
        #endregion

        #region EdgeFlag
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEdgeFlag", ExactSpelling = true)]
        public extern static void EdgeFlag(GLboolean flag);
        #endregion

        #region EdgeFlagPointer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEdgeFlagPointer", ExactSpelling = true)]
        public extern static void EdgeFlagPointer(GLsizei stride, System.IntPtr pointer);
        #endregion

        #region EdgeFlagv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEdgeFlagv", ExactSpelling = true)]
        public extern static void EdgeFlagv(System.IntPtr flag);
        #endregion

        #region Enable
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEnable", ExactSpelling = true)]
        public extern static void Enable(GLenum cap);
        #endregion

        #region EnableClientState
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEnableClientState", ExactSpelling = true)]
        public extern static void EnableClientState(GLenum array);
        #endregion

        #region EnableVertexAttribArray
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEnableVertexAttribArray", ExactSpelling = true)]
        public extern static void EnableVertexAttribArray(GLuint index);
        #endregion

        #region End
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEnd", ExactSpelling = true)]
        public extern static void End();
        #endregion

        #region EndList
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEndList", ExactSpelling = true)]
        public extern static void EndList();
        #endregion

        #region EndQuery
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEndQuery", ExactSpelling = true)]
        public extern static void EndQuery(GLenum target);
        #endregion

        #region EvalCoord1d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord1d", ExactSpelling = true)]
        public extern static void EvalCoord1d(GLdouble u);
        #endregion

        #region EvalCoord1dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord1dv", ExactSpelling = true)]
        public extern static void EvalCoord1dv(System.IntPtr u);
        #endregion

        #region EvalCoord1f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord1f", ExactSpelling = true)]
        public extern static void EvalCoord1f(GLfloat u);
        #endregion

        #region EvalCoord1fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord1fv", ExactSpelling = true)]
        public extern static void EvalCoord1fv(System.IntPtr u);
        #endregion

        #region EvalCoord2d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord2d", ExactSpelling = true)]
        public extern static void EvalCoord2d(GLdouble u, GLdouble v);
        #endregion

        #region EvalCoord2dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord2dv", ExactSpelling = true)]
        public extern static void EvalCoord2dv(System.IntPtr u);
        #endregion

        #region EvalCoord2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord2f", ExactSpelling = true)]
        public extern static void EvalCoord2f(GLfloat u, GLfloat v);
        #endregion

        #region EvalCoord2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEvalCoord2fv", ExactSpelling = true)]
        public extern static void EvalCoord2fv(System.IntPtr u);
        #endregion

        #region EvalMesh1
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEvalMesh1", ExactSpelling = true)]
        public extern static void EvalMesh1(GLenum mode, GLint i1, GLint i2);
        #endregion

        #region EvalMesh2
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEvalMesh2", ExactSpelling = true)]
        public extern static void EvalMesh2(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
        #endregion

        #region EvalPoint1
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEvalPoint1", ExactSpelling = true)]
        public extern static void EvalPoint1(GLint i);
        #endregion

        #region EvalPoint2
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glEvalPoint2", ExactSpelling = true)]
        public extern static void EvalPoint2(GLint i, GLint j);
        #endregion

        #region FeedbackBuffer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glFeedbackBuffer", ExactSpelling = true)]
        public extern static void FeedbackBuffer(GLsizei size, GLenum type, System.IntPtr buffer);
        #endregion

        #region Finish
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glFinish", ExactSpelling = true)]
        public extern static void Finish();
        #endregion

        #region Flush
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glFlush", ExactSpelling = true)]
        public extern static void Flush();
        #endregion

        #region FogCoordd
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glFogCoordd", ExactSpelling = true)]
        public extern static void FogCoordd(GLdouble coord);
        #endregion

        #region FogCoorddv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glFogCoorddv", ExactSpelling = true)]
        public extern static void FogCoorddv(System.IntPtr coord);
        #endregion

        #region FogCoordf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glFogCoordf", ExactSpelling = true)]
        public extern static void FogCoordf(GLfloat coord);
        #endregion

        #region FogCoordfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glFogCoordfv", ExactSpelling = true)]
        public extern static void FogCoordfv(System.IntPtr coord);
        #endregion

        #region FogCoordPointer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glFogCoordPointer", ExactSpelling = true)]
        public extern static void FogCoordPointer(GLenum type, GLsizei stride, System.IntPtr pointer);
        #endregion

        #region Fogf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glFogf", ExactSpelling = true)]
        public extern static void Fogf(GLenum pname, GLfloat param);
        #endregion

        #region Fogfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glFogfv", ExactSpelling = true)]
        public extern static void Fogfv(GLenum pname, System.IntPtr @params);
        #endregion

        #region Fogi
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glFogi", ExactSpelling = true)]
        public extern static void Fogi(GLenum pname, GLint param);
        #endregion

        #region Fogiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glFogiv", ExactSpelling = true)]
        public extern static void Fogiv(GLenum pname, System.IntPtr @params);
        #endregion

        #region FrontFace
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glFrontFace", ExactSpelling = true)]
        public extern static void FrontFace(GLenum mode);
        #endregion

        #region Frustum
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glFrustum", ExactSpelling = true)]
        public extern static void Frustum(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
        #endregion

        #region GenBuffers
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGenBuffers", ExactSpelling = true)]
        public extern static void GenBuffers(GLsizei n, System.IntPtr buffers);
        #endregion

        #region GenLists
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGenLists", ExactSpelling = true)]
        public extern static GLuint GenLists(GLsizei range);
        #endregion

        #region GenQueries
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGenQueries", ExactSpelling = true)]
        public extern static void GenQueries(GLsizei n, System.IntPtr ids);
        #endregion

        #region GenTextures
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGenTextures", ExactSpelling = true)]
        public extern static void GenTextures(GLsizei n, System.IntPtr textures);
        #endregion

        #region GetActiveAttrib
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetActiveAttrib", ExactSpelling = true)]
        public extern static void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, System.IntPtr length, System.IntPtr size, System.IntPtr type, System.Text.StringBuilder name);
        #endregion

        #region GetActiveUniform
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetActiveUniform", ExactSpelling = true)]
        public extern static void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, System.IntPtr length, System.IntPtr size, System.IntPtr type, System.Text.StringBuilder name);
        #endregion

        #region GetAttachedShaders
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetAttachedShaders", ExactSpelling = true)]
        public extern static void GetAttachedShaders(GLuint program, GLsizei maxCount, System.IntPtr count, System.IntPtr obj);
        #endregion

        #region GetAttribLocation
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetAttribLocation", ExactSpelling = true)]
        public extern static GLint GetAttribLocation(GLuint program, System.String name);
        #endregion

        #region GetBooleanv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetBooleanv", ExactSpelling = true)]
        public extern static void GetBooleanv(GLenum pname, System.IntPtr @params);
        #endregion

        #region GetBufferParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetBufferParameteriv", ExactSpelling = true)]
        public extern static void GetBufferParameteriv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetBufferPointerv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetBufferPointerv", ExactSpelling = true)]
        public extern static void GetBufferPointerv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetBufferSubData
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetBufferSubData", ExactSpelling = true)]
        public extern static void GetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, System.IntPtr data);
        #endregion

        #region GetClipPlane
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetClipPlane", ExactSpelling = true)]
        public extern static void GetClipPlane(GLenum plane, System.IntPtr equation);
        #endregion

        #region GetColorTable
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetColorTable", ExactSpelling = true)]
        public extern static void GetColorTable(GLenum target, GLenum format, GLenum type, System.IntPtr table);
        #endregion

        #region GetColorTableParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetColorTableParameterfv", ExactSpelling = true)]
        public extern static void GetColorTableParameterfv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetColorTableParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetColorTableParameteriv", ExactSpelling = true)]
        public extern static void GetColorTableParameteriv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetCompressedTexImage
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetCompressedTexImage", ExactSpelling = true)]
        public extern static void GetCompressedTexImage(GLenum target, GLint level, System.IntPtr img);
        #endregion

        #region GetConvolutionFilter
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetConvolutionFilter", ExactSpelling = true)]
        public extern static void GetConvolutionFilter(GLenum target, GLenum format, GLenum type, System.IntPtr image);
        #endregion

        #region GetConvolutionParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetConvolutionParameterfv", ExactSpelling = true)]
        public extern static void GetConvolutionParameterfv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetConvolutionParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetConvolutionParameteriv", ExactSpelling = true)]
        public extern static void GetConvolutionParameteriv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetDoublev
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetDoublev", ExactSpelling = true)]
        public extern static void GetDoublev(GLenum pname, System.IntPtr @params);
        #endregion

        #region GetError
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetError", ExactSpelling = true)]
        public extern static GLenum GetError();
        #endregion

        #region GetFloatv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetFloatv", ExactSpelling = true)]
        public extern static void GetFloatv(GLenum pname, System.IntPtr @params);
        #endregion

        #region GetHistogram
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetHistogram", ExactSpelling = true)]
        public extern static void GetHistogram(GLenum target, GLboolean reset, GLenum format, GLenum type, System.IntPtr values);
        #endregion

        #region GetHistogramParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetHistogramParameterfv", ExactSpelling = true)]
        public extern static void GetHistogramParameterfv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetHistogramParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetHistogramParameteriv", ExactSpelling = true)]
        public extern static void GetHistogramParameteriv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetIntegerv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetIntegerv", ExactSpelling = true)]
        public extern static void GetIntegerv(GLenum pname, System.IntPtr @params);
        #endregion

        #region GetLightfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetLightfv", ExactSpelling = true)]
        public extern static void GetLightfv(GLenum light, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetLightiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetLightiv", ExactSpelling = true)]
        public extern static void GetLightiv(GLenum light, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetMapdv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetMapdv", ExactSpelling = true)]
        public extern static void GetMapdv(GLenum target, GLenum query, System.IntPtr v);
        #endregion

        #region GetMapfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetMapfv", ExactSpelling = true)]
        public extern static void GetMapfv(GLenum target, GLenum query, System.IntPtr v);
        #endregion

        #region GetMapiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetMapiv", ExactSpelling = true)]
        public extern static void GetMapiv(GLenum target, GLenum query, System.IntPtr v);
        #endregion

        #region GetMaterialfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetMaterialfv", ExactSpelling = true)]
        public extern static void GetMaterialfv(GLenum face, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetMaterialiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetMaterialiv", ExactSpelling = true)]
        public extern static void GetMaterialiv(GLenum face, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetMinmax
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetMinmax", ExactSpelling = true)]
        public extern static void GetMinmax(GLenum target, GLboolean reset, GLenum format, GLenum type, System.IntPtr values);
        #endregion

        #region GetMinmaxParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetMinmaxParameterfv", ExactSpelling = true)]
        public extern static void GetMinmaxParameterfv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetMinmaxParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetMinmaxParameteriv", ExactSpelling = true)]
        public extern static void GetMinmaxParameteriv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetPixelMapfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetPixelMapfv", ExactSpelling = true)]
        public extern static void GetPixelMapfv(GLenum map, System.IntPtr values);
        #endregion

        #region GetPixelMapuiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetPixelMapuiv", ExactSpelling = true)]
        public extern static void GetPixelMapuiv(GLenum map, System.IntPtr values);
        #endregion

        #region GetPixelMapusv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetPixelMapusv", ExactSpelling = true)]
        public extern static void GetPixelMapusv(GLenum map, System.IntPtr values);
        #endregion

        #region GetPointerv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetPointerv", ExactSpelling = true)]
        public extern static void GetPointerv(GLenum pname, System.IntPtr @params);
        #endregion

        #region GetPolygonStipple
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetPolygonStipple", ExactSpelling = true)]
        public extern static void GetPolygonStipple(System.IntPtr mask);
        #endregion

        #region GetProgramInfoLog
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetProgramInfoLog", ExactSpelling = true)]
        public extern static void GetProgramInfoLog(GLuint program, GLsizei bufSize, System.IntPtr length, System.Text.StringBuilder infoLog);
        #endregion

        #region GetProgramiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetProgramiv", ExactSpelling = true)]
        public extern static void GetProgramiv(GLuint program, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetQueryiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetQueryiv", ExactSpelling = true)]
        public extern static void GetQueryiv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetQueryObjectiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetQueryObjectiv", ExactSpelling = true)]
        public extern static void GetQueryObjectiv(GLuint id, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetQueryObjectuiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetQueryObjectuiv", ExactSpelling = true)]
        public extern static void GetQueryObjectuiv(GLuint id, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetSeparableFilter
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetSeparableFilter", ExactSpelling = true)]
        public extern static void GetSeparableFilter(GLenum target, GLenum format, GLenum type, System.IntPtr row, System.IntPtr column, System.IntPtr span);
        #endregion

        #region GetShaderInfoLog
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetShaderInfoLog", ExactSpelling = true)]
        public extern static void GetShaderInfoLog(GLuint shader, GLsizei bufSize, System.IntPtr length, System.Text.StringBuilder infoLog);
        #endregion

        #region GetShaderiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetShaderiv", ExactSpelling = true)]
        public extern static void GetShaderiv(GLuint shader, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetShaderSource
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetShaderSource", ExactSpelling = true)]
        public extern static void GetShaderSource(GLuint shader, GLsizei bufSize, System.IntPtr length, System.Text.StringBuilder source);
        #endregion

        #region GetString
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetString", ExactSpelling = true)]
        public extern static IntPtr GetString(GLenum name);
        #endregion

        #region GetTexEnvfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexEnvfv", ExactSpelling = true)]
        public extern static void GetTexEnvfv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetTexEnviv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexEnviv", ExactSpelling = true)]
        public extern static void GetTexEnviv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetTexGendv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexGendv", ExactSpelling = true)]
        public extern static void GetTexGendv(GLenum coord, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetTexGenfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexGenfv", ExactSpelling = true)]
        public extern static void GetTexGenfv(GLenum coord, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetTexGeniv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexGeniv", ExactSpelling = true)]
        public extern static void GetTexGeniv(GLenum coord, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetTexImage
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexImage", ExactSpelling = true)]
        public extern static void GetTexImage(GLenum target, GLint level, GLenum format, GLenum type, System.IntPtr pixels);
        #endregion

        #region GetTexLevelParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexLevelParameterfv", ExactSpelling = true)]
        public extern static void GetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetTexLevelParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexLevelParameteriv", ExactSpelling = true)]
        public extern static void GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetTexParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexParameterfv", ExactSpelling = true)]
        public extern static void GetTexParameterfv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetTexParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetTexParameteriv", ExactSpelling = true)]
        public extern static void GetTexParameteriv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetUniformfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetUniformfv", ExactSpelling = true)]
        public extern static void GetUniformfv(GLuint program, GLint location, System.IntPtr @params);
        #endregion

        #region GetUniformiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetUniformiv", ExactSpelling = true)]
        public extern static void GetUniformiv(GLuint program, GLint location, System.IntPtr @params);
        #endregion

        #region GetUniformLocation
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetUniformLocation", ExactSpelling = true)]
        public extern static GLint GetUniformLocation(GLuint program, System.String name);
        #endregion

        #region GetVertexAttribdv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetVertexAttribdv", ExactSpelling = true)]
        public extern static void GetVertexAttribdv(GLuint index, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetVertexAttribfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetVertexAttribfv", ExactSpelling = true)]
        public extern static void GetVertexAttribfv(GLuint index, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetVertexAttribiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetVertexAttribiv", ExactSpelling = true)]
        public extern static void GetVertexAttribiv(GLuint index, GLenum pname, System.IntPtr @params);
        #endregion

        #region GetVertexAttribPointerv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glGetVertexAttribPointerv", ExactSpelling = true)]
        public extern static void GetVertexAttribPointerv(GLuint index, GLenum pname, System.IntPtr pointer);
        #endregion

        #region Hint
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glHint", ExactSpelling = true)]
        public extern static void Hint(GLenum target, GLenum mode);
        #endregion

        #region Histogram
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glHistogram", ExactSpelling = true)]
        public extern static void Histogram(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
        #endregion

        #region Indexd
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glIndexd", ExactSpelling = true)]
        public extern static void Indexd(GLdouble c);
        #endregion

        #region Indexdv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glIndexdv", ExactSpelling = true)]
        public extern static void Indexdv(System.IntPtr c);
        #endregion

        #region Indexf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glIndexf", ExactSpelling = true)]
        public extern static void Indexf(GLfloat c);
        #endregion

        #region Indexfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glIndexfv", ExactSpelling = true)]
        public extern static void Indexfv(System.IntPtr c);
        #endregion

        #region Indexi
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glIndexi", ExactSpelling = true)]
        public extern static void Indexi(GLint c);
        #endregion

        #region Indexiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glIndexiv", ExactSpelling = true)]
        public extern static void Indexiv(System.IntPtr c);
        #endregion

        #region IndexMask
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glIndexMask", ExactSpelling = true)]
        public extern static void IndexMask(GLuint mask);
        #endregion

        #region IndexPointer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glIndexPointer", ExactSpelling = true)]
        public extern static void IndexPointer(GLenum type, GLsizei stride, System.IntPtr pointer);
        #endregion

        #region Indexs
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glIndexs", ExactSpelling = true)]
        public extern static void Indexs(GLshort c);
        #endregion

        #region Indexsv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glIndexsv", ExactSpelling = true)]
        public extern static void Indexsv(System.IntPtr c);
        #endregion

        #region Indexub
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glIndexub", ExactSpelling = true)]
        public extern static void Indexub(GLubyte c);
        #endregion

        #region Indexubv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glIndexubv", ExactSpelling = true)]
        public extern static void Indexubv(System.IntPtr c);
        #endregion

        #region InitNames
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glInitNames", ExactSpelling = true)]
        public extern static void InitNames();
        #endregion

        #region InterleavedArrays
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glInterleavedArrays", ExactSpelling = true)]
        public extern static void InterleavedArrays(GLenum format, GLsizei stride, System.IntPtr pointer);
        #endregion

        #region IsBuffer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glIsBuffer", ExactSpelling = true)]
        public extern static GLboolean IsBuffer(GLuint buffer);
        #endregion

        #region IsEnabled
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glIsEnabled", ExactSpelling = true)]
        public extern static GLboolean IsEnabled(GLenum cap);
        #endregion

        #region IsList
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glIsList", ExactSpelling = true)]
        public extern static GLboolean IsList(GLuint list);
        #endregion

        #region IsProgram
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glIsProgram", ExactSpelling = true)]
        public extern static GLboolean IsProgram(GLuint program);
        #endregion

        #region IsQuery
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glIsQuery", ExactSpelling = true)]
        public extern static GLboolean IsQuery(GLuint id);
        #endregion

        #region IsShader
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glIsShader", ExactSpelling = true)]
        public extern static GLboolean IsShader(GLuint shader);
        #endregion

        #region IsTexture
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glIsTexture", ExactSpelling = true)]
        public extern static GLboolean IsTexture(GLuint texture);
        #endregion

        #region Lightf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glLightf", ExactSpelling = true)]
        public extern static void Lightf(GLenum light, GLenum pname, GLfloat param);
        #endregion

        #region Lightfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glLightfv", ExactSpelling = true)]
        public extern static void Lightfv(GLenum light, GLenum pname, System.IntPtr @params);
        #endregion

        #region Lighti
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glLighti", ExactSpelling = true)]
        public extern static void Lighti(GLenum light, GLenum pname, GLint param);
        #endregion

        #region Lightiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glLightiv", ExactSpelling = true)]
        public extern static void Lightiv(GLenum light, GLenum pname, System.IntPtr @params);
        #endregion

        #region LightModelf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glLightModelf", ExactSpelling = true)]
        public extern static void LightModelf(GLenum pname, GLfloat param);
        #endregion

        #region LightModelfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glLightModelfv", ExactSpelling = true)]
        public extern static void LightModelfv(GLenum pname, System.IntPtr @params);
        #endregion

        #region LightModeli
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glLightModeli", ExactSpelling = true)]
        public extern static void LightModeli(GLenum pname, GLint param);
        #endregion

        #region LightModeliv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glLightModeliv", ExactSpelling = true)]
        public extern static void LightModeliv(GLenum pname, System.IntPtr @params);
        #endregion

        #region LineStipple
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glLineStipple", ExactSpelling = true)]
        public extern static void LineStipple(GLint factor, GLushort pattern);
        #endregion

        #region LineWidth
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glLineWidth", ExactSpelling = true)]
        public extern static void LineWidth(GLfloat width);
        #endregion

        #region LinkProgram
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glLinkProgram", ExactSpelling = true)]
        public extern static void LinkProgram(GLuint program);
        #endregion

        #region ListBase
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glListBase", ExactSpelling = true)]
        public extern static void ListBase(GLuint @base);
        #endregion

        #region LoadIdentity
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glLoadIdentity", ExactSpelling = true)]
        public extern static void LoadIdentity();
        #endregion

        #region LoadMatrixd
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glLoadMatrixd", ExactSpelling = true)]
        public extern static void LoadMatrixd(System.IntPtr m);
        #endregion

        #region LoadMatrixf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glLoadMatrixf", ExactSpelling = true)]
        public extern static void LoadMatrixf(System.IntPtr m);
        #endregion

        #region LoadName
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glLoadName", ExactSpelling = true)]
        public extern static void LoadName(GLuint name);
        #endregion

        #region LoadTransposeMatrixd
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glLoadTransposeMatrixd", ExactSpelling = true)]
        public extern static void LoadTransposeMatrixd(System.IntPtr m);
        #endregion

        #region LoadTransposeMatrixf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glLoadTransposeMatrixf", ExactSpelling = true)]
        public extern static void LoadTransposeMatrixf(System.IntPtr m);
        #endregion

        #region LogicOp
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glLogicOp", ExactSpelling = true)]
        public extern static void LogicOp(GLenum opcode);
        #endregion

        #region Map1d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMap1d", ExactSpelling = true)]
        public extern static void Map1d(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, System.IntPtr points);
        #endregion

        #region Map1f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMap1f", ExactSpelling = true)]
        public extern static void Map1f(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, System.IntPtr points);
        #endregion

        #region Map2d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMap2d", ExactSpelling = true)]
        public extern static void Map2d(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, System.IntPtr points);
        #endregion

        #region Map2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMap2f", ExactSpelling = true)]
        public extern static void Map2f(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, System.IntPtr points);
        #endregion

        #region MapBuffer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMapBuffer", ExactSpelling = true)]
        public extern static IntPtr MapBuffer(GLenum target, GLenum access);
        #endregion

        #region MapGrid1d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMapGrid1d", ExactSpelling = true)]
        public extern static void MapGrid1d(GLint un, GLdouble u1, GLdouble u2);
        #endregion

        #region MapGrid1f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMapGrid1f", ExactSpelling = true)]
        public extern static void MapGrid1f(GLint un, GLfloat u1, GLfloat u2);
        #endregion

        #region MapGrid2d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMapGrid2d", ExactSpelling = true)]
        public extern static void MapGrid2d(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
        #endregion

        #region MapGrid2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMapGrid2f", ExactSpelling = true)]
        public extern static void MapGrid2f(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
        #endregion

        #region Materialf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMaterialf", ExactSpelling = true)]
        public extern static void Materialf(GLenum face, GLenum pname, GLfloat param);
        #endregion

        #region Materialfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMaterialfv", ExactSpelling = true)]
        public extern static void Materialfv(GLenum face, GLenum pname, System.IntPtr @params);
        #endregion

        #region Materiali
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMateriali", ExactSpelling = true)]
        public extern static void Materiali(GLenum face, GLenum pname, GLint param);
        #endregion

        #region Materialiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMaterialiv", ExactSpelling = true)]
        public extern static void Materialiv(GLenum face, GLenum pname, System.IntPtr @params);
        #endregion

        #region MatrixMode
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMatrixMode", ExactSpelling = true)]
        public extern static void MatrixMode(GLenum mode);
        #endregion

        #region Minmax
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMinmax", ExactSpelling = true)]
        public extern static void Minmax(GLenum target, GLenum internalformat, GLboolean sink);
        #endregion

        #region MultiDrawArrays
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiDrawArrays", ExactSpelling = true)]
        public extern static void MultiDrawArrays(GLenum mode, System.IntPtr first, System.IntPtr count, GLsizei primcount);
        #endregion

        #region MultiDrawElements
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiDrawElements", ExactSpelling = true)]
        public extern static void MultiDrawElements(GLenum mode, System.IntPtr count, GLenum type, System.IntPtr indices, GLsizei primcount);
        #endregion

        #region MultiTexCoord1d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1d", ExactSpelling = true)]
        public extern static void MultiTexCoord1d(GLenum target, GLdouble s);
        #endregion

        #region MultiTexCoord1dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1dv", ExactSpelling = true)]
        public extern static void MultiTexCoord1dv(GLenum target, System.IntPtr v);
        #endregion

        #region MultiTexCoord1f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1f", ExactSpelling = true)]
        public extern static void MultiTexCoord1f(GLenum target, GLfloat s);
        #endregion

        #region MultiTexCoord1fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1fv", ExactSpelling = true)]
        public extern static void MultiTexCoord1fv(GLenum target, System.IntPtr v);
        #endregion

        #region MultiTexCoord1i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1i", ExactSpelling = true)]
        public extern static void MultiTexCoord1i(GLenum target, GLint s);
        #endregion

        #region MultiTexCoord1iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1iv", ExactSpelling = true)]
        public extern static void MultiTexCoord1iv(GLenum target, System.IntPtr v);
        #endregion

        #region MultiTexCoord1s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1s", ExactSpelling = true)]
        public extern static void MultiTexCoord1s(GLenum target, GLshort s);
        #endregion

        #region MultiTexCoord1sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord1sv", ExactSpelling = true)]
        public extern static void MultiTexCoord1sv(GLenum target, System.IntPtr v);
        #endregion

        #region MultiTexCoord2d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2d", ExactSpelling = true)]
        public extern static void MultiTexCoord2d(GLenum target, GLdouble s, GLdouble t);
        #endregion

        #region MultiTexCoord2dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2dv", ExactSpelling = true)]
        public extern static void MultiTexCoord2dv(GLenum target, System.IntPtr v);
        #endregion

        #region MultiTexCoord2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2f", ExactSpelling = true)]
        public extern static void MultiTexCoord2f(GLenum target, GLfloat s, GLfloat t);
        #endregion

        #region MultiTexCoord2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2fv", ExactSpelling = true)]
        public extern static void MultiTexCoord2fv(GLenum target, System.IntPtr v);
        #endregion

        #region MultiTexCoord2i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2i", ExactSpelling = true)]
        public extern static void MultiTexCoord2i(GLenum target, GLint s, GLint t);
        #endregion

        #region MultiTexCoord2iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2iv", ExactSpelling = true)]
        public extern static void MultiTexCoord2iv(GLenum target, System.IntPtr v);
        #endregion

        #region MultiTexCoord2s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2s", ExactSpelling = true)]
        public extern static void MultiTexCoord2s(GLenum target, GLshort s, GLshort t);
        #endregion

        #region MultiTexCoord2sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord2sv", ExactSpelling = true)]
        public extern static void MultiTexCoord2sv(GLenum target, System.IntPtr v);
        #endregion

        #region MultiTexCoord3d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3d", ExactSpelling = true)]
        public extern static void MultiTexCoord3d(GLenum target, GLdouble s, GLdouble t, GLdouble r);
        #endregion

        #region MultiTexCoord3dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3dv", ExactSpelling = true)]
        public extern static void MultiTexCoord3dv(GLenum target, System.IntPtr v);
        #endregion

        #region MultiTexCoord3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3f", ExactSpelling = true)]
        public extern static void MultiTexCoord3f(GLenum target, GLfloat s, GLfloat t, GLfloat r);
        #endregion

        #region MultiTexCoord3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3fv", ExactSpelling = true)]
        public extern static void MultiTexCoord3fv(GLenum target, System.IntPtr v);
        #endregion

        #region MultiTexCoord3i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3i", ExactSpelling = true)]
        public extern static void MultiTexCoord3i(GLenum target, GLint s, GLint t, GLint r);
        #endregion

        #region MultiTexCoord3iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3iv", ExactSpelling = true)]
        public extern static void MultiTexCoord3iv(GLenum target, System.IntPtr v);
        #endregion

        #region MultiTexCoord3s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3s", ExactSpelling = true)]
        public extern static void MultiTexCoord3s(GLenum target, GLshort s, GLshort t, GLshort r);
        #endregion

        #region MultiTexCoord3sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord3sv", ExactSpelling = true)]
        public extern static void MultiTexCoord3sv(GLenum target, System.IntPtr v);
        #endregion

        #region MultiTexCoord4d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4d", ExactSpelling = true)]
        public extern static void MultiTexCoord4d(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
        #endregion

        #region MultiTexCoord4dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4dv", ExactSpelling = true)]
        public extern static void MultiTexCoord4dv(GLenum target, System.IntPtr v);
        #endregion

        #region MultiTexCoord4f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4f", ExactSpelling = true)]
        public extern static void MultiTexCoord4f(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
        #endregion

        #region MultiTexCoord4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4fv", ExactSpelling = true)]
        public extern static void MultiTexCoord4fv(GLenum target, System.IntPtr v);
        #endregion

        #region MultiTexCoord4i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4i", ExactSpelling = true)]
        public extern static void MultiTexCoord4i(GLenum target, GLint s, GLint t, GLint r, GLint q);
        #endregion

        #region MultiTexCoord4iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4iv", ExactSpelling = true)]
        public extern static void MultiTexCoord4iv(GLenum target, System.IntPtr v);
        #endregion

        #region MultiTexCoord4s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4s", ExactSpelling = true)]
        public extern static void MultiTexCoord4s(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
        #endregion

        #region MultiTexCoord4sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultiTexCoord4sv", ExactSpelling = true)]
        public extern static void MultiTexCoord4sv(GLenum target, System.IntPtr v);
        #endregion

        #region MultMatrixd
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultMatrixd", ExactSpelling = true)]
        public extern static void MultMatrixd(System.IntPtr m);
        #endregion

        #region MultMatrixf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultMatrixf", ExactSpelling = true)]
        public extern static void MultMatrixf(System.IntPtr m);
        #endregion

        #region MultTransposeMatrixd
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultTransposeMatrixd", ExactSpelling = true)]
        public extern static void MultTransposeMatrixd(System.IntPtr m);
        #endregion

        #region MultTransposeMatrixf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glMultTransposeMatrixf", ExactSpelling = true)]
        public extern static void MultTransposeMatrixf(System.IntPtr m);
        #endregion

        #region NewList
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glNewList", ExactSpelling = true)]
        public extern static void NewList(GLuint list, GLenum mode);
        #endregion

        #region Normal3b
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3b", ExactSpelling = true)]
        public extern static void Normal3b(GLbyte nx, GLbyte ny, GLbyte nz);
        #endregion

        #region Normal3bv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3bv", ExactSpelling = true)]
        public extern static void Normal3bv(System.IntPtr v);
        #endregion

        #region Normal3d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3d", ExactSpelling = true)]
        public extern static void Normal3d(GLdouble nx, GLdouble ny, GLdouble nz);
        #endregion

        #region Normal3dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3dv", ExactSpelling = true)]
        public extern static void Normal3dv(System.IntPtr v);
        #endregion

        #region Normal3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3f", ExactSpelling = true)]
        public extern static void Normal3f(GLfloat nx, GLfloat ny, GLfloat nz);
        #endregion

        #region Normal3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3fv", ExactSpelling = true)]
        public extern static void Normal3fv(System.IntPtr v);
        #endregion

        #region Normal3i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3i", ExactSpelling = true)]
        public extern static void Normal3i(GLint nx, GLint ny, GLint nz);
        #endregion

        #region Normal3iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3iv", ExactSpelling = true)]
        public extern static void Normal3iv(System.IntPtr v);
        #endregion

        #region Normal3s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3s", ExactSpelling = true)]
        public extern static void Normal3s(GLshort nx, GLshort ny, GLshort nz);
        #endregion

        #region Normal3sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glNormal3sv", ExactSpelling = true)]
        public extern static void Normal3sv(System.IntPtr v);
        #endregion

        #region NormalPointer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glNormalPointer", ExactSpelling = true)]
        public extern static void NormalPointer(GLenum type, GLsizei stride, System.IntPtr pointer);
        #endregion

        #region Ortho
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glOrtho", ExactSpelling = true)]
        public extern static void Ortho(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
        #endregion

        #region PassThrough
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPassThrough", ExactSpelling = true)]
        public extern static void PassThrough(GLfloat token);
        #endregion

        #region PixelMapfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPixelMapfv", ExactSpelling = true)]
        public extern static void PixelMapfv(GLenum map, GLint mapsize, System.IntPtr values);
        #endregion

        #region PixelMapuiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPixelMapuiv", ExactSpelling = true)]
        public extern static void PixelMapuiv(GLenum map, GLint mapsize, System.IntPtr values);
        #endregion

        #region PixelMapusv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPixelMapusv", ExactSpelling = true)]
        public extern static void PixelMapusv(GLenum map, GLint mapsize, System.IntPtr values);
        #endregion

        #region PixelStoref
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPixelStoref", ExactSpelling = true)]
        public extern static void PixelStoref(GLenum pname, GLfloat param);
        #endregion

        #region PixelStorei
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPixelStorei", ExactSpelling = true)]
        public extern static void PixelStorei(GLenum pname, GLint param);
        #endregion

        #region PixelTransferf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPixelTransferf", ExactSpelling = true)]
        public extern static void PixelTransferf(GLenum pname, GLfloat param);
        #endregion

        #region PixelTransferi
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPixelTransferi", ExactSpelling = true)]
        public extern static void PixelTransferi(GLenum pname, GLint param);
        #endregion

        #region PixelZoom
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPixelZoom", ExactSpelling = true)]
        public extern static void PixelZoom(GLfloat xfactor, GLfloat yfactor);
        #endregion

        #region PointParameterf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPointParameterf", ExactSpelling = true)]
        public extern static void PointParameterf(GLenum pname, GLfloat param);
        #endregion

        #region PointParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPointParameterfv", ExactSpelling = true)]
        public extern static void PointParameterfv(GLenum pname, System.IntPtr @params);
        #endregion

        #region PointParameteri
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPointParameteri", ExactSpelling = true)]
        public extern static void PointParameteri(GLenum pname, GLint param);
        #endregion

        #region PointParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPointParameteriv", ExactSpelling = true)]
        public extern static void PointParameteriv(GLenum pname, System.IntPtr @params);
        #endregion

        #region PointSize
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPointSize", ExactSpelling = true)]
        public extern static void PointSize(GLfloat size);
        #endregion

        #region PolygonMode
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPolygonMode", ExactSpelling = true)]
        public extern static void PolygonMode(GLenum face, GLenum mode);
        #endregion

        #region PolygonOffset
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPolygonOffset", ExactSpelling = true)]
        public extern static void PolygonOffset(GLfloat factor, GLfloat units);
        #endregion

        #region PolygonStipple
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPolygonStipple", ExactSpelling = true)]
        public extern static void PolygonStipple(System.IntPtr mask);
        #endregion

        #region PopAttrib
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPopAttrib", ExactSpelling = true)]
        public extern static void PopAttrib();
        #endregion

        #region PopClientAttrib
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPopClientAttrib", ExactSpelling = true)]
        public extern static void PopClientAttrib();
        #endregion

        #region PopMatrix
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPopMatrix", ExactSpelling = true)]
        public extern static void PopMatrix();
        #endregion

        #region PopName
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPopName", ExactSpelling = true)]
        public extern static void PopName();
        #endregion

        #region PrioritizeTextures
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPrioritizeTextures", ExactSpelling = true)]
        public extern static void PrioritizeTextures(GLsizei n, System.IntPtr textures, System.IntPtr priorities);
        #endregion

        #region PushAttrib
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPushAttrib", ExactSpelling = true)]
        public extern static void PushAttrib(GLbitfield mask);
        #endregion

        #region PushClientAttrib
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPushClientAttrib", ExactSpelling = true)]
        public extern static void PushClientAttrib(GLbitfield mask);
        #endregion

        #region PushMatrix
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPushMatrix", ExactSpelling = true)]
        public extern static void PushMatrix();
        #endregion

        #region PushName
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glPushName", ExactSpelling = true)]
        public extern static void PushName(GLuint name);
        #endregion

        #region RasterPos2d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2d", ExactSpelling = true)]
        public extern static void RasterPos2d(GLdouble x, GLdouble y);
        #endregion

        #region RasterPos2dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2dv", ExactSpelling = true)]
        public extern static void RasterPos2dv(System.IntPtr v);
        #endregion

        #region RasterPos2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2f", ExactSpelling = true)]
        public extern static void RasterPos2f(GLfloat x, GLfloat y);
        #endregion

        #region RasterPos2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2fv", ExactSpelling = true)]
        public extern static void RasterPos2fv(System.IntPtr v);
        #endregion

        #region RasterPos2i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2i", ExactSpelling = true)]
        public extern static void RasterPos2i(GLint x, GLint y);
        #endregion

        #region RasterPos2iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2iv", ExactSpelling = true)]
        public extern static void RasterPos2iv(System.IntPtr v);
        #endregion

        #region RasterPos2s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2s", ExactSpelling = true)]
        public extern static void RasterPos2s(GLshort x, GLshort y);
        #endregion

        #region RasterPos2sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos2sv", ExactSpelling = true)]
        public extern static void RasterPos2sv(System.IntPtr v);
        #endregion

        #region RasterPos3d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3d", ExactSpelling = true)]
        public extern static void RasterPos3d(GLdouble x, GLdouble y, GLdouble z);
        #endregion

        #region RasterPos3dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3dv", ExactSpelling = true)]
        public extern static void RasterPos3dv(System.IntPtr v);
        #endregion

        #region RasterPos3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3f", ExactSpelling = true)]
        public extern static void RasterPos3f(GLfloat x, GLfloat y, GLfloat z);
        #endregion

        #region RasterPos3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3fv", ExactSpelling = true)]
        public extern static void RasterPos3fv(System.IntPtr v);
        #endregion

        #region RasterPos3i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3i", ExactSpelling = true)]
        public extern static void RasterPos3i(GLint x, GLint y, GLint z);
        #endregion

        #region RasterPos3iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3iv", ExactSpelling = true)]
        public extern static void RasterPos3iv(System.IntPtr v);
        #endregion

        #region RasterPos3s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3s", ExactSpelling = true)]
        public extern static void RasterPos3s(GLshort x, GLshort y, GLshort z);
        #endregion

        #region RasterPos3sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos3sv", ExactSpelling = true)]
        public extern static void RasterPos3sv(System.IntPtr v);
        #endregion

        #region RasterPos4d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4d", ExactSpelling = true)]
        public extern static void RasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        #endregion

        #region RasterPos4dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4dv", ExactSpelling = true)]
        public extern static void RasterPos4dv(System.IntPtr v);
        #endregion

        #region RasterPos4f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4f", ExactSpelling = true)]
        public extern static void RasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        #endregion

        #region RasterPos4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4fv", ExactSpelling = true)]
        public extern static void RasterPos4fv(System.IntPtr v);
        #endregion

        #region RasterPos4i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4i", ExactSpelling = true)]
        public extern static void RasterPos4i(GLint x, GLint y, GLint z, GLint w);
        #endregion

        #region RasterPos4iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4iv", ExactSpelling = true)]
        public extern static void RasterPos4iv(System.IntPtr v);
        #endregion

        #region RasterPos4s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4s", ExactSpelling = true)]
        public extern static void RasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
        #endregion

        #region RasterPos4sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRasterPos4sv", ExactSpelling = true)]
        public extern static void RasterPos4sv(System.IntPtr v);
        #endregion

        #region ReadBuffer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glReadBuffer", ExactSpelling = true)]
        public extern static void ReadBuffer(GLenum mode);
        #endregion

        #region ReadPixels
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glReadPixels", ExactSpelling = true)]
        public extern static void ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr pixels);
        #endregion

        #region Rectd
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRectd", ExactSpelling = true)]
        public extern static void Rectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
        #endregion

        #region Rectdv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRectdv", ExactSpelling = true)]
        public extern static void Rectdv(System.IntPtr v1, System.IntPtr v2);
        #endregion

        #region Rectf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRectf", ExactSpelling = true)]
        public extern static void Rectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
        #endregion

        #region Rectfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRectfv", ExactSpelling = true)]
        public extern static void Rectfv(System.IntPtr v1, System.IntPtr v2);
        #endregion

        #region Recti
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRecti", ExactSpelling = true)]
        public extern static void Recti(GLint x1, GLint y1, GLint x2, GLint y2);
        #endregion

        #region Rectiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRectiv", ExactSpelling = true)]
        public extern static void Rectiv(System.IntPtr v1, System.IntPtr v2);
        #endregion

        #region Rects
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRects", ExactSpelling = true)]
        public extern static void Rects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
        #endregion

        #region Rectsv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRectsv", ExactSpelling = true)]
        public extern static void Rectsv(System.IntPtr v1, System.IntPtr v2);
        #endregion

        #region RenderMode
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRenderMode", ExactSpelling = true)]
        public extern static GLint RenderMode(GLenum mode);
        #endregion

        #region ResetHistogram
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glResetHistogram", ExactSpelling = true)]
        public extern static void ResetHistogram(GLenum target);
        #endregion

        #region ResetMinmax
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glResetMinmax", ExactSpelling = true)]
        public extern static void ResetMinmax(GLenum target);
        #endregion

        #region Rotated
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRotated", ExactSpelling = true)]
        public extern static void Rotated(GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
        #endregion

        #region Rotatef
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glRotatef", ExactSpelling = true)]
        public extern static void Rotatef(GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
        #endregion

        #region SampleCoverage
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSampleCoverage", ExactSpelling = true)]
        public extern static void SampleCoverage(GLclampf value, GLboolean invert);
        #endregion

        #region Scaled
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glScaled", ExactSpelling = true)]
        public extern static void Scaled(GLdouble x, GLdouble y, GLdouble z);
        #endregion

        #region Scalef
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glScalef", ExactSpelling = true)]
        public extern static void Scalef(GLfloat x, GLfloat y, GLfloat z);
        #endregion

        #region Scissor
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glScissor", ExactSpelling = true)]
        public extern static void Scissor(GLint x, GLint y, GLsizei width, GLsizei height);
        #endregion

        #region SecondaryColor3b
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3b", ExactSpelling = true)]
        public extern static void SecondaryColor3b(GLbyte red, GLbyte green, GLbyte blue);
        #endregion

        #region SecondaryColor3bv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3bv", ExactSpelling = true)]
        public extern static void SecondaryColor3bv(System.IntPtr v);
        #endregion

        #region SecondaryColor3d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3d", ExactSpelling = true)]
        public extern static void SecondaryColor3d(GLdouble red, GLdouble green, GLdouble blue);
        #endregion

        #region SecondaryColor3dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3dv", ExactSpelling = true)]
        public extern static void SecondaryColor3dv(System.IntPtr v);
        #endregion

        #region SecondaryColor3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3f", ExactSpelling = true)]
        public extern static void SecondaryColor3f(GLfloat red, GLfloat green, GLfloat blue);
        #endregion

        #region SecondaryColor3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3fv", ExactSpelling = true)]
        public extern static void SecondaryColor3fv(System.IntPtr v);
        #endregion

        #region SecondaryColor3i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3i", ExactSpelling = true)]
        public extern static void SecondaryColor3i(GLint red, GLint green, GLint blue);
        #endregion

        #region SecondaryColor3iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3iv", ExactSpelling = true)]
        public extern static void SecondaryColor3iv(System.IntPtr v);
        #endregion

        #region SecondaryColor3s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3s", ExactSpelling = true)]
        public extern static void SecondaryColor3s(GLshort red, GLshort green, GLshort blue);
        #endregion

        #region SecondaryColor3sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3sv", ExactSpelling = true)]
        public extern static void SecondaryColor3sv(System.IntPtr v);
        #endregion

        #region SecondaryColor3ub
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3ub", ExactSpelling = true)]
        public extern static void SecondaryColor3ub(GLubyte red, GLubyte green, GLubyte blue);
        #endregion

        #region SecondaryColor3ubv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3ubv", ExactSpelling = true)]
        public extern static void SecondaryColor3ubv(System.IntPtr v);
        #endregion

        #region SecondaryColor3ui
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3ui", ExactSpelling = true)]
        public extern static void SecondaryColor3ui(GLuint red, GLuint green, GLuint blue);
        #endregion

        #region SecondaryColor3uiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3uiv", ExactSpelling = true)]
        public extern static void SecondaryColor3uiv(System.IntPtr v);
        #endregion

        #region SecondaryColor3us
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3us", ExactSpelling = true)]
        public extern static void SecondaryColor3us(GLushort red, GLushort green, GLushort blue);
        #endregion

        #region SecondaryColor3usv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColor3usv", ExactSpelling = true)]
        public extern static void SecondaryColor3usv(System.IntPtr v);
        #endregion

        #region SecondaryColorPointer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSecondaryColorPointer", ExactSpelling = true)]
        public extern static void SecondaryColorPointer(GLint size, GLenum type, GLsizei stride, System.IntPtr pointer);
        #endregion

        #region SelectBuffer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSelectBuffer", ExactSpelling = true)]
        public extern static void SelectBuffer(GLsizei size, System.IntPtr buffer);
        #endregion

        #region SeparableFilter2D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glSeparableFilter2D", ExactSpelling = true)]
        public extern static void SeparableFilter2D(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr row, System.IntPtr column);
        #endregion

        #region ShadeModel
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glShadeModel", ExactSpelling = true)]
        public extern static void ShadeModel(GLenum mode);
        #endregion

        #region ShaderSource
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glShaderSource", ExactSpelling = true)]
        public extern static void ShaderSource(GLuint shader, GLsizei count, System.String[] @string, System.IntPtr length);
        #endregion

        #region StencilFunc
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glStencilFunc", ExactSpelling = true)]
        public extern static void StencilFunc(GLenum func, GLint @ref, GLuint mask);
        #endregion

        #region StencilFuncSeparate
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glStencilFuncSeparate", ExactSpelling = true)]
        public extern static void StencilFuncSeparate(GLenum frontfunc, GLenum backfunc, GLint @ref, GLuint mask);
        #endregion

        #region StencilMask
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glStencilMask", ExactSpelling = true)]
        public extern static void StencilMask(GLuint mask);
        #endregion

        #region StencilMaskSeparate
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glStencilMaskSeparate", ExactSpelling = true)]
        public extern static void StencilMaskSeparate(GLenum face, GLuint mask);
        #endregion

        #region StencilOp
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glStencilOp", ExactSpelling = true)]
        public extern static void StencilOp(GLenum fail, GLenum zfail, GLenum zpass);
        #endregion

        #region StencilOpSeparate
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glStencilOpSeparate", ExactSpelling = true)]
        public extern static void StencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
        #endregion

        #region TexCoord1d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1d", ExactSpelling = true)]
        public extern static void TexCoord1d(GLdouble s);
        #endregion

        #region TexCoord1dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1dv", ExactSpelling = true)]
        public extern static void TexCoord1dv(System.IntPtr v);
        #endregion

        #region TexCoord1f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1f", ExactSpelling = true)]
        public extern static void TexCoord1f(GLfloat s);
        #endregion

        #region TexCoord1fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1fv", ExactSpelling = true)]
        public extern static void TexCoord1fv(System.IntPtr v);
        #endregion

        #region TexCoord1i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1i", ExactSpelling = true)]
        public extern static void TexCoord1i(GLint s);
        #endregion

        #region TexCoord1iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1iv", ExactSpelling = true)]
        public extern static void TexCoord1iv(System.IntPtr v);
        #endregion

        #region TexCoord1s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1s", ExactSpelling = true)]
        public extern static void TexCoord1s(GLshort s);
        #endregion

        #region TexCoord1sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord1sv", ExactSpelling = true)]
        public extern static void TexCoord1sv(System.IntPtr v);
        #endregion

        #region TexCoord2d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2d", ExactSpelling = true)]
        public extern static void TexCoord2d(GLdouble s, GLdouble t);
        #endregion

        #region TexCoord2dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2dv", ExactSpelling = true)]
        public extern static void TexCoord2dv(System.IntPtr v);
        #endregion

        #region TexCoord2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2f", ExactSpelling = true)]
        public extern static void TexCoord2f(GLfloat s, GLfloat t);
        #endregion

        #region TexCoord2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2fv", ExactSpelling = true)]
        public extern static void TexCoord2fv(System.IntPtr v);
        #endregion

        #region TexCoord2i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2i", ExactSpelling = true)]
        public extern static void TexCoord2i(GLint s, GLint t);
        #endregion

        #region TexCoord2iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2iv", ExactSpelling = true)]
        public extern static void TexCoord2iv(System.IntPtr v);
        #endregion

        #region TexCoord2s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2s", ExactSpelling = true)]
        public extern static void TexCoord2s(GLshort s, GLshort t);
        #endregion

        #region TexCoord2sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord2sv", ExactSpelling = true)]
        public extern static void TexCoord2sv(System.IntPtr v);
        #endregion

        #region TexCoord3d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3d", ExactSpelling = true)]
        public extern static void TexCoord3d(GLdouble s, GLdouble t, GLdouble r);
        #endregion

        #region TexCoord3dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3dv", ExactSpelling = true)]
        public extern static void TexCoord3dv(System.IntPtr v);
        #endregion

        #region TexCoord3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3f", ExactSpelling = true)]
        public extern static void TexCoord3f(GLfloat s, GLfloat t, GLfloat r);
        #endregion

        #region TexCoord3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3fv", ExactSpelling = true)]
        public extern static void TexCoord3fv(System.IntPtr v);
        #endregion

        #region TexCoord3i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3i", ExactSpelling = true)]
        public extern static void TexCoord3i(GLint s, GLint t, GLint r);
        #endregion

        #region TexCoord3iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3iv", ExactSpelling = true)]
        public extern static void TexCoord3iv(System.IntPtr v);
        #endregion

        #region TexCoord3s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3s", ExactSpelling = true)]
        public extern static void TexCoord3s(GLshort s, GLshort t, GLshort r);
        #endregion

        #region TexCoord3sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord3sv", ExactSpelling = true)]
        public extern static void TexCoord3sv(System.IntPtr v);
        #endregion

        #region TexCoord4d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4d", ExactSpelling = true)]
        public extern static void TexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
        #endregion

        #region TexCoord4dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4dv", ExactSpelling = true)]
        public extern static void TexCoord4dv(System.IntPtr v);
        #endregion

        #region TexCoord4f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4f", ExactSpelling = true)]
        public extern static void TexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
        #endregion

        #region TexCoord4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4fv", ExactSpelling = true)]
        public extern static void TexCoord4fv(System.IntPtr v);
        #endregion

        #region TexCoord4i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4i", ExactSpelling = true)]
        public extern static void TexCoord4i(GLint s, GLint t, GLint r, GLint q);
        #endregion

        #region TexCoord4iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4iv", ExactSpelling = true)]
        public extern static void TexCoord4iv(System.IntPtr v);
        #endregion

        #region TexCoord4s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4s", ExactSpelling = true)]
        public extern static void TexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
        #endregion

        #region TexCoord4sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoord4sv", ExactSpelling = true)]
        public extern static void TexCoord4sv(System.IntPtr v);
        #endregion

        #region TexCoordPointer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexCoordPointer", ExactSpelling = true)]
        public extern static void TexCoordPointer(GLint size, GLenum type, GLsizei stride, System.IntPtr pointer);
        #endregion

        #region TexEnvf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexEnvf", ExactSpelling = true)]
        public extern static void TexEnvf(GLenum target, GLenum pname, GLfloat param);
        #endregion

        #region TexEnvfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexEnvfv", ExactSpelling = true)]
        public extern static void TexEnvfv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region TexEnvi
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexEnvi", ExactSpelling = true)]
        public extern static void TexEnvi(GLenum target, GLenum pname, GLint param);
        #endregion

        #region TexEnviv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexEnviv", ExactSpelling = true)]
        public extern static void TexEnviv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region TexGend
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexGend", ExactSpelling = true)]
        public extern static void TexGend(GLenum coord, GLenum pname, GLdouble param);
        #endregion

        #region TexGendv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexGendv", ExactSpelling = true)]
        public extern static void TexGendv(GLenum coord, GLenum pname, System.IntPtr @params);
        #endregion

        #region TexGenf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexGenf", ExactSpelling = true)]
        public extern static void TexGenf(GLenum coord, GLenum pname, GLfloat param);
        #endregion

        #region TexGenfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexGenfv", ExactSpelling = true)]
        public extern static void TexGenfv(GLenum coord, GLenum pname, System.IntPtr @params);
        #endregion

        #region TexGeni
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexGeni", ExactSpelling = true)]
        public extern static void TexGeni(GLenum coord, GLenum pname, GLint param);
        #endregion

        #region TexGeniv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexGeniv", ExactSpelling = true)]
        public extern static void TexGeniv(GLenum coord, GLenum pname, System.IntPtr @params);
        #endregion

        #region TexImage1D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexImage1D", ExactSpelling = true)]
        public extern static void TexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, System.IntPtr pixels);
        #endregion

        #region TexImage2D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexImage2D", ExactSpelling = true)]
        public extern static void TexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, System.IntPtr pixels);
        #endregion

        #region TexImage3D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexImage3D", ExactSpelling = true)]
        public extern static void TexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, System.IntPtr pixels);
        #endregion

        #region TexParameterf
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexParameterf", ExactSpelling = true)]
        public extern static void TexParameterf(GLenum target, GLenum pname, GLfloat param);
        #endregion

        #region TexParameterfv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexParameterfv", ExactSpelling = true)]
        public extern static void TexParameterfv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region TexParameteri
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexParameteri", ExactSpelling = true)]
        public extern static void TexParameteri(GLenum target, GLenum pname, GLint param);
        #endregion

        #region TexParameteriv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexParameteriv", ExactSpelling = true)]
        public extern static void TexParameteriv(GLenum target, GLenum pname, System.IntPtr @params);
        #endregion

        #region TexSubImage1D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexSubImage1D", ExactSpelling = true)]
        public extern static void TexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, System.IntPtr pixels);
        #endregion

        #region TexSubImage2D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexSubImage2D", ExactSpelling = true)]
        public extern static void TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, System.IntPtr pixels);
        #endregion

        #region TexSubImage3D
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTexSubImage3D", ExactSpelling = true)]
        public extern static void TexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, System.IntPtr pixels);
        #endregion

        #region Translated
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTranslated", ExactSpelling = true)]
        public extern static void Translated(GLdouble x, GLdouble y, GLdouble z);
        #endregion

        #region Translatef
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glTranslatef", ExactSpelling = true)]
        public extern static void Translatef(GLfloat x, GLfloat y, GLfloat z);
        #endregion

        #region Uniform1f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniform1f", ExactSpelling = true)]
        public extern static void Uniform1f(GLint location, GLfloat v0);
        #endregion

        #region Uniform1fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniform1fv", ExactSpelling = true)]
        public extern static void Uniform1fv(GLint location, GLsizei count, System.IntPtr value);
        #endregion

        #region Uniform1i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniform1i", ExactSpelling = true)]
        public extern static void Uniform1i(GLint location, GLint v0);
        #endregion

        #region Uniform1iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniform1iv", ExactSpelling = true)]
        public extern static void Uniform1iv(GLint location, GLsizei count, System.IntPtr value);
        #endregion

        #region Uniform2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniform2f", ExactSpelling = true)]
        public extern static void Uniform2f(GLint location, GLfloat v0, GLfloat v1);
        #endregion

        #region Uniform2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniform2fv", ExactSpelling = true)]
        public extern static void Uniform2fv(GLint location, GLsizei count, System.IntPtr value);
        #endregion

        #region Uniform2i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniform2i", ExactSpelling = true)]
        public extern static void Uniform2i(GLint location, GLint v0, GLint v1);
        #endregion

        #region Uniform2iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniform2iv", ExactSpelling = true)]
        public extern static void Uniform2iv(GLint location, GLsizei count, System.IntPtr value);
        #endregion

        #region Uniform3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniform3f", ExactSpelling = true)]
        public extern static void Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
        #endregion

        #region Uniform3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniform3fv", ExactSpelling = true)]
        public extern static void Uniform3fv(GLint location, GLsizei count, System.IntPtr value);
        #endregion

        #region Uniform3i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniform3i", ExactSpelling = true)]
        public extern static void Uniform3i(GLint location, GLint v0, GLint v1, GLint v2);
        #endregion

        #region Uniform3iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniform3iv", ExactSpelling = true)]
        public extern static void Uniform3iv(GLint location, GLsizei count, System.IntPtr value);
        #endregion

        #region Uniform4f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniform4f", ExactSpelling = true)]
        public extern static void Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
        #endregion

        #region Uniform4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniform4fv", ExactSpelling = true)]
        public extern static void Uniform4fv(GLint location, GLsizei count, System.IntPtr value);
        #endregion

        #region Uniform4i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniform4i", ExactSpelling = true)]
        public extern static void Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
        #endregion

        #region Uniform4iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniform4iv", ExactSpelling = true)]
        public extern static void Uniform4iv(GLint location, GLsizei count, System.IntPtr value);
        #endregion

        #region UniformMatrix2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix2fv", ExactSpelling = true)]
        public extern static void UniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        #endregion

        #region UniformMatrix2x3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix2x3fv", ExactSpelling = true)]
        public extern static void UniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        #endregion

        #region UniformMatrix2x4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix2x4fv", ExactSpelling = true)]
        public extern static void UniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        #endregion

        #region UniformMatrix3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix3fv", ExactSpelling = true)]
        public extern static void UniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        #endregion

        #region UniformMatrix3x2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix3x2fv", ExactSpelling = true)]
        public extern static void UniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        #endregion

        #region UniformMatrix3x4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix3x4fv", ExactSpelling = true)]
        public extern static void UniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        #endregion

        #region UniformMatrix4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix4fv", ExactSpelling = true)]
        public extern static void UniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        #endregion

        #region UniformMatrix4x2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix4x2fv", ExactSpelling = true)]
        public extern static void UniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        #endregion

        #region UniformMatrix4x3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUniformMatrix4x3fv", ExactSpelling = true)]
        public extern static void UniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, System.IntPtr value);
        #endregion

        #region UnmapBuffer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUnmapBuffer", ExactSpelling = true)]
        public extern static GLboolean UnmapBuffer(GLenum target);
        #endregion

        #region UseProgram
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glUseProgram", ExactSpelling = true)]
        public extern static void UseProgram(GLuint program);
        #endregion

        #region ValidateProgram
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glValidateProgram", ExactSpelling = true)]
        public extern static void ValidateProgram(GLuint program);
        #endregion

        #region Vertex2d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex2d", ExactSpelling = true)]
        public extern static void Vertex2d(GLdouble x, GLdouble y);
        #endregion

        #region Vertex2dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex2dv", ExactSpelling = true)]
        public extern static void Vertex2dv(System.IntPtr v);
        #endregion

        #region Vertex2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex2f", ExactSpelling = true)]
        public extern static void Vertex2f(GLfloat x, GLfloat y);
        #endregion

        #region Vertex2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex2fv", ExactSpelling = true)]
        public extern static void Vertex2fv(System.IntPtr v);
        #endregion

        #region Vertex2i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex2i", ExactSpelling = true)]
        public extern static void Vertex2i(GLint x, GLint y);
        #endregion

        #region Vertex2iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex2iv", ExactSpelling = true)]
        public extern static void Vertex2iv(System.IntPtr v);
        #endregion

        #region Vertex2s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex2s", ExactSpelling = true)]
        public extern static void Vertex2s(GLshort x, GLshort y);
        #endregion

        #region Vertex2sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex2sv", ExactSpelling = true)]
        public extern static void Vertex2sv(System.IntPtr v);
        #endregion

        #region Vertex3d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex3d", ExactSpelling = true)]
        public extern static void Vertex3d(GLdouble x, GLdouble y, GLdouble z);
        #endregion

        #region Vertex3dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex3dv", ExactSpelling = true)]
        public extern static void Vertex3dv(System.IntPtr v);
        #endregion

        #region Vertex3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex3f", ExactSpelling = true)]
        public extern static void Vertex3f(GLfloat x, GLfloat y, GLfloat z);
        #endregion

        #region Vertex3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex3fv", ExactSpelling = true)]
        public extern static void Vertex3fv(System.IntPtr v);
        #endregion

        #region Vertex3i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex3i", ExactSpelling = true)]
        public extern static void Vertex3i(GLint x, GLint y, GLint z);
        #endregion

        #region Vertex3iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex3iv", ExactSpelling = true)]
        public extern static void Vertex3iv(System.IntPtr v);
        #endregion

        #region Vertex3s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex3s", ExactSpelling = true)]
        public extern static void Vertex3s(GLshort x, GLshort y, GLshort z);
        #endregion

        #region Vertex3sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex3sv", ExactSpelling = true)]
        public extern static void Vertex3sv(System.IntPtr v);
        #endregion

        #region Vertex4d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex4d", ExactSpelling = true)]
        public extern static void Vertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        #endregion

        #region Vertex4dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex4dv", ExactSpelling = true)]
        public extern static void Vertex4dv(System.IntPtr v);
        #endregion

        #region Vertex4f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex4f", ExactSpelling = true)]
        public extern static void Vertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        #endregion

        #region Vertex4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex4fv", ExactSpelling = true)]
        public extern static void Vertex4fv(System.IntPtr v);
        #endregion

        #region Vertex4i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex4i", ExactSpelling = true)]
        public extern static void Vertex4i(GLint x, GLint y, GLint z, GLint w);
        #endregion

        #region Vertex4iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex4iv", ExactSpelling = true)]
        public extern static void Vertex4iv(System.IntPtr v);
        #endregion

        #region Vertex4s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex4s", ExactSpelling = true)]
        public extern static void Vertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
        #endregion

        #region Vertex4sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertex4sv", ExactSpelling = true)]
        public extern static void Vertex4sv(System.IntPtr v);
        #endregion

        #region VertexAttrib1d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1d", ExactSpelling = true)]
        public extern static void VertexAttrib1d(GLuint index, GLdouble x);
        #endregion

        #region VertexAttrib1dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1dv", ExactSpelling = true)]
        public extern static void VertexAttrib1dv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib1f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1f", ExactSpelling = true)]
        public extern static void VertexAttrib1f(GLuint index, GLfloat x);
        #endregion

        #region VertexAttrib1fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1fv", ExactSpelling = true)]
        public extern static void VertexAttrib1fv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib1s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1s", ExactSpelling = true)]
        public extern static void VertexAttrib1s(GLuint index, GLshort x);
        #endregion

        #region VertexAttrib1sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib1sv", ExactSpelling = true)]
        public extern static void VertexAttrib1sv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib2d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2d", ExactSpelling = true)]
        public extern static void VertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
        #endregion

        #region VertexAttrib2dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2dv", ExactSpelling = true)]
        public extern static void VertexAttrib2dv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2f", ExactSpelling = true)]
        public extern static void VertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
        #endregion

        #region VertexAttrib2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2fv", ExactSpelling = true)]
        public extern static void VertexAttrib2fv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib2s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2s", ExactSpelling = true)]
        public extern static void VertexAttrib2s(GLuint index, GLshort x, GLshort y);
        #endregion

        #region VertexAttrib2sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib2sv", ExactSpelling = true)]
        public extern static void VertexAttrib2sv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib3d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3d", ExactSpelling = true)]
        public extern static void VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
        #endregion

        #region VertexAttrib3dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3dv", ExactSpelling = true)]
        public extern static void VertexAttrib3dv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3f", ExactSpelling = true)]
        public extern static void VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
        #endregion

        #region VertexAttrib3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3fv", ExactSpelling = true)]
        public extern static void VertexAttrib3fv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib3s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3s", ExactSpelling = true)]
        public extern static void VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
        #endregion

        #region VertexAttrib3sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib3sv", ExactSpelling = true)]
        public extern static void VertexAttrib3sv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4bv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4bv", ExactSpelling = true)]
        public extern static void VertexAttrib4bv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4d", ExactSpelling = true)]
        public extern static void VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
        #endregion

        #region VertexAttrib4dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4dv", ExactSpelling = true)]
        public extern static void VertexAttrib4dv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4f", ExactSpelling = true)]
        public extern static void VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
        #endregion

        #region VertexAttrib4fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4fv", ExactSpelling = true)]
        public extern static void VertexAttrib4fv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4iv", ExactSpelling = true)]
        public extern static void VertexAttrib4iv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4Nbv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nbv", ExactSpelling = true)]
        public extern static void VertexAttrib4Nbv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4Niv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Niv", ExactSpelling = true)]
        public extern static void VertexAttrib4Niv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4Nsv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nsv", ExactSpelling = true)]
        public extern static void VertexAttrib4Nsv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4Nub
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nub", ExactSpelling = true)]
        public extern static void VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
        #endregion

        #region VertexAttrib4Nubv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nubv", ExactSpelling = true)]
        public extern static void VertexAttrib4Nubv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4Nuiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nuiv", ExactSpelling = true)]
        public extern static void VertexAttrib4Nuiv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4Nusv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4Nusv", ExactSpelling = true)]
        public extern static void VertexAttrib4Nusv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4s", ExactSpelling = true)]
        public extern static void VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
        #endregion

        #region VertexAttrib4sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4sv", ExactSpelling = true)]
        public extern static void VertexAttrib4sv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4ubv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4ubv", ExactSpelling = true)]
        public extern static void VertexAttrib4ubv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4uiv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4uiv", ExactSpelling = true)]
        public extern static void VertexAttrib4uiv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttrib4usv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttrib4usv", ExactSpelling = true)]
        public extern static void VertexAttrib4usv(GLuint index, System.IntPtr v);
        #endregion

        #region VertexAttribPointer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexAttribPointer", ExactSpelling = true)]
        public extern static void VertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, System.IntPtr pointer);
        #endregion

        #region VertexPointer
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glVertexPointer", ExactSpelling = true)]
        public extern static void VertexPointer(GLint size, GLenum type, GLsizei stride, System.IntPtr pointer);
        #endregion

        #region Viewport
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glViewport", ExactSpelling = true)]
        public extern static void Viewport(GLint x, GLint y, GLsizei width, GLsizei height);
        #endregion

        #region WindowPos2d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2d", ExactSpelling = true)]
        public extern static void WindowPos2d(GLdouble x, GLdouble y);
        #endregion

        #region WindowPos2dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2dv", ExactSpelling = true)]
        public extern static void WindowPos2dv(System.IntPtr v);
        #endregion

        #region WindowPos2f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2f", ExactSpelling = true)]
        public extern static void WindowPos2f(GLfloat x, GLfloat y);
        #endregion

        #region WindowPos2fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2fv", ExactSpelling = true)]
        public extern static void WindowPos2fv(System.IntPtr v);
        #endregion

        #region WindowPos2i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2i", ExactSpelling = true)]
        public extern static void WindowPos2i(GLint x, GLint y);
        #endregion

        #region WindowPos2iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2iv", ExactSpelling = true)]
        public extern static void WindowPos2iv(System.IntPtr v);
        #endregion

        #region WindowPos2s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2s", ExactSpelling = true)]
        public extern static void WindowPos2s(GLshort x, GLshort y);
        #endregion

        #region WindowPos2sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos2sv", ExactSpelling = true)]
        public extern static void WindowPos2sv(System.IntPtr v);
        #endregion

        #region WindowPos3d
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3d", ExactSpelling = true)]
        public extern static void WindowPos3d(GLdouble x, GLdouble y, GLdouble z);
        #endregion

        #region WindowPos3dv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3dv", ExactSpelling = true)]
        public extern static void WindowPos3dv(System.IntPtr v);
        #endregion

        #region WindowPos3f
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3f", ExactSpelling = true)]
        public extern static void WindowPos3f(GLfloat x, GLfloat y, GLfloat z);
        #endregion

        #region WindowPos3fv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3fv", ExactSpelling = true)]
        public extern static void WindowPos3fv(System.IntPtr v);
        #endregion

        #region WindowPos3i
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3i", ExactSpelling = true)]
        public extern static void WindowPos3i(GLint x, GLint y, GLint z);
        #endregion

        #region WindowPos3iv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3iv", ExactSpelling = true)]
        public extern static void WindowPos3iv(System.IntPtr v);
        #endregion

        #region WindowPos3s
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3s", ExactSpelling = true)]
        public extern static void WindowPos3s(GLshort x, GLshort y, GLshort z);
        #endregion

        #region WindowPos3sv
        [System.Security.SuppressUnmanagedCodeSecurity()]
        [DllImport(Gl.GL_NATIVE_LIBRARY, EntryPoint = "glWindowPos3sv", ExactSpelling = true)]
        public extern static void WindowPos3sv(System.IntPtr v);
        #endregion

    }
    #endregion
}
