
** For the latest information, please visit http://taoframework.com

There are three ways of building Tao; one requiring GNU make, a win32-only
batch file build and one using the Prebuild tool. 
Please contact the tao mailing list with any problems;
see http://lists.ximian.com/mailman/listinfo/tao-list .

1. Using GNU make
=================

This is the preferred way to build Tao; however, it does require that GNU make
and a minimal toolset (cp, mkdir) be installed.  A minimal cygwin install
should be sufficient.

The build has two steps:

* Config file selection.  Type "make help" to see the options:

% make help
Use "make [targetname]" to configure the build
valid targets:
  net-1.1        .NET 1.1
  mono-1.1       Mono 1.1

other variables:
  MONODIR        Location to find mono install, mcs will be used from $MONODIR/bin

Selecting one build involves typing "make net-1.1", e.g.:

% make net-1.1
rm -f config.mk; cp config/net-1-1.mk config.mk
config.mk installed; re-run make.

* Building.  Simply type "make clean && make".  The "make clean" is neccessary
because there is a post-processing step which needs to be cleaned out 
before a build. The resulting DLLs will be placed in dist/bin,
and examples will be in dist/clean. If you wish to strongname the 
assemblies (as is recommended), build with "make clean && make STRONG=1".

2. Using batch files
====================

Two batch files are provided, "build.bat" and "buildmono.bat".  The second
is equivalent to the first, except that it builds Mono 2.0 Profile assemblies.

3. Using Prebuild
=================
Several scripts in the root directory of the code use the Prebuild tool to 
create project files for several IDE such as Visual Studio 2003, 2005, 
MonoDevelop, SharpDevelop, SharpDevelop2 and NAnt. These scripts are not
meant to do complete builds of the project like the make and batch script. 
Notably, the Prebuild builds will not do the post-processing step that properly
sets up P/Invoking callbacks.
They are meant to help you build parts of the Tao project. 
When you run a Prebuild script, you can find the main project file 
(*.sln, *.cmbx, *.build) in the src/Tao.<project> directory

Tao.Sdl - Builds Tao.Sdl and Sdl Examples
Tao.PhysFs - Builds Tao.PhysFs and PhysFs Examples
Tao.Lua - Build Tao.Lua and Lua Examples
Tao.Ode -  Builds Tao.Ode and Ode Examples
Tao.Cg - Builds Tao.Cg
Tao.DevIl - Builds Tao.DevIl and DevIl Examples
Tao.OpenGl - Due to the fact that Tao.OpenGl is used in many subprojects,
I had to put them altogether so they would build properly.
Tao.OpenGl builds Tao.OpenGl, Tao.OpenGl.Glu, Tao.OpenGl.ExtensionLoader,
Tao.OpenAl, OpenAl Examples, Tao.Glfw, Glfw Examples, 
Tao.Platform.Windows and Tao.GlPostProcess
---------------------------------------------------------------------------


To build an autotools tarball of, for instance Tao.OpenGL, you
currently need either the (bleeding edge) Prebuild-cjac branch of dnpb
or the Prebuild.exe from said branch.  To get the whole package, do
the following:

svn co https://dnpb.svn.sourceforge.net/svnroot/dnpb/branches/Prebuild-cjac &&
cd Prebuild-cjac                 &&
./Prebuild.exe /target autotools &&
cd autotools/Prebuild/Prebuild   &&
sh autogen.sh                    &&
make                             &&
sudo make install

This will put a script called 'prebuild' in /usr/local/bin, which is
probably in your PATH.  The 'prebuild' script takes the same arguments
as Prebuild.exe.  To see the usage docs, run the following:

prebuild /usage

Now that you have the bleeding edge prebuild, prebuild /target
autotools will create an autotools/ directory which contains the files
needed to create autotools distributions of prebuild packages.

Let's try this on Tao.OpenGL:

svn co http://anonsvn.mono-project.com/source/trunk/tao &&
cd tao/src/Tao.OpenGL &&
prebuild /target autotools &&
cd autotools/Tao.OpenGL &&
sh autogen.sh &&
make

You should now have all of the .dll files required to use Tao.OpenGL.
To install a given package, cd to its directory and run 'sudo make install':

cd Tao.OpenGL && sudo make install

You should now have:
* Tao.OpenGl.pc in /usr/local/lib/pkgconfig/
* Tao.OpenGl.dll in /usr/local/lib/mono/Tao.OpenGl/
* Tao.OpenGl in your GAC

You can now run something like this:

$ pkg-config --modversion Tao.OpenGl
2.1.0.4

You can now add a dependence on Tao.OpenGl into your application by
adding something like the following to your configure.ac (or
configure.in, if you like using deprecated filenames):

TAO_OPENGL_REQUIRED_VERSION=2.1.0

PKG_CHECK_MODULES(TAO_OPENGL_DEPENDENCIES,
                  Tao.OpenGl >= $TAO_OPENGL_REQUIRED_VERSION,
		  has_tao_opengl=yes,
		  has_tao_opengl=no
		  )

if test "x$has_tao_opengl" = "xno"; then
  AC_MSG_WARN([Tao.OpenGl not detected; examples will not be built])
else
  AC_MSG_NOTICE([Tao.OpenGl found; examples will be built])
fi

AM_CONDITIONAL(HAS_TAO_OPENGL, test x$has_tao_opengl = xyes)
